<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>ES654</title>
<link>https://github.com/nipunbatra/ml2023/notebooks/index.html</link>
<atom:link href="https://github.com/nipunbatra/ml2023/notebooks/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.475</generator>
<lastBuildDate>Tue, 04 Apr 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Autodiff</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/autodiff-helper.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> torch.nn <span class="im" style="color: #00769E;">as</span> nn</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> torch.optim <span class="im" style="color: #00769E;">as</span> optim</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> torch.utils.data <span class="im" style="color: #00769E;">import</span> DataLoader, TensorDataset</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># Set random seed for reproducibility</span></span>
<span id="cb1-16">torch.manual_seed(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;"># Torch version</span></span>
<span id="cb1-19">torch.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>'2.0.0+cu118'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">theta_0 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">1.0</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-2">theta_1 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">1.0</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-3">theta_2 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">2.0</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-4"></span>
<span id="cb3-5">x1 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">1.0</span>)</span>
<span id="cb3-6">x2 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">2.0</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8">f1 <span class="op" style="color: #5E5E5E;">=</span> theta_1<span class="op" style="color: #5E5E5E;">*</span>x1</span>
<span id="cb3-9">f2 <span class="op" style="color: #5E5E5E;">=</span> theta_2<span class="op" style="color: #5E5E5E;">*</span>x2</span>
<span id="cb3-10"></span>
<span id="cb3-11">f3 <span class="op" style="color: #5E5E5E;">=</span> f1 <span class="op" style="color: #5E5E5E;">+</span> f2</span>
<span id="cb3-12"></span>
<span id="cb3-13">f4 <span class="op" style="color: #5E5E5E;">=</span> f3 <span class="op" style="color: #5E5E5E;">+</span> theta_0</span>
<span id="cb3-14"></span>
<span id="cb3-15">f5 <span class="op" style="color: #5E5E5E;">=</span> f4<span class="op" style="color: #5E5E5E;">*-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-16"></span>
<span id="cb3-17">f6 <span class="op" style="color: #5E5E5E;">=</span> torch.exp(f5)</span>
<span id="cb3-18"></span>
<span id="cb3-19">f7 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> f6</span>
<span id="cb3-20"></span>
<span id="cb3-21">f8 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">/</span>f7</span>
<span id="cb3-22"></span>
<span id="cb3-23">f9 <span class="op" style="color: #5E5E5E;">=</span> torch.log(f8)</span>
<span id="cb3-24"></span>
<span id="cb3-25">L <span class="op" style="color: #5E5E5E;">=</span> f9<span class="op" style="color: #5E5E5E;">*-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-26"></span>
<span id="cb3-27">all_nodes <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"theta_0"</span>: theta_0, <span class="st" style="color: #20794D;">"theta_1"</span>: theta_1, <span class="st" style="color: #20794D;">"theta_2"</span>: theta_2,  </span>
<span id="cb3-28">             <span class="st" style="color: #20794D;">"f1"</span>: f1, <span class="st" style="color: #20794D;">"f2"</span>: f2, <span class="st" style="color: #20794D;">"f3"</span>: f3, <span class="st" style="color: #20794D;">"f4"</span>: f4, <span class="st" style="color: #20794D;">"f5"</span>: f5, <span class="st" style="color: #20794D;">"f6"</span>: f6, <span class="st" style="color: #20794D;">"f7"</span>: f7, <span class="st" style="color: #20794D;">"f8"</span>: f8, <span class="st" style="color: #20794D;">"f9"</span>: f9, <span class="st" style="color: #20794D;">"L"</span>: L}</span>
<span id="cb3-29"></span>
<span id="cb3-30"><span class="co" style="color: #5E5E5E;"># Retain grad for all nodes</span></span>
<span id="cb3-31"><span class="cf" style="color: #003B4F;">for</span> node <span class="kw" style="color: #003B4F;">in</span> all_nodes.values():</span>
<span id="cb3-32">    node.retain_grad()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Print out the function evaluation for all nodes along with name of the node</span></span>
<span id="cb4-2"><span class="cf" style="color: #003B4F;">for</span> name, node <span class="kw" style="color: #003B4F;">in</span> all_nodes.items():</span>
<span id="cb4-3">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: </span><span class="sc" style="color: #5E5E5E;">{</span>node<span class="sc" style="color: #5E5E5E;">.</span>item()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>theta_0: 1.0
theta_1: 1.0
theta_2: 2.0
f1: 1.0
f2: 4.0
f3: 5.0
f4: 6.0
f5: -6.0
f6: 0.0024787522852420807
f7: 1.0024787187576294
f8: 0.9975274205207825
f9: -0.0024756414350122213
L: 0.0024756414350122213</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">L.backward()</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;"># Print out the gradient for all nodes along with name of the node</span></span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;">for</span> name, node <span class="kw" style="color: #003B4F;">in</span> all_nodes.items():</span>
<span id="cb6-5">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: </span><span class="sc" style="color: #5E5E5E;">{</span>node<span class="sc" style="color: #5E5E5E;">.</span>grad<span class="sc" style="color: #5E5E5E;">.</span>item()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>theta_0: -0.00247262348420918
theta_1: -0.00247262348420918
theta_2: -0.00494524696841836
f1: -0.00247262348420918
f2: -0.00247262348420918
f3: -0.00247262348420918
f4: -0.00247262348420918
f5: 0.00247262348420918
f6: 0.9975274801254272
f7: 0.9975274801254272
f8: -1.0024787187576294
f9: -1.0
L: 1.0</code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">/</span>(f7<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>))<span class="op" style="color: #5E5E5E;">*-</span><span class="fl" style="color: #AD0000;">1.00247</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>tensor(0.9975, grad_fn=&lt;MulBackward0&gt;)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">torch.exp(f5)<span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">0.9975</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>tensor(0.0025, grad_fn=&lt;MulBackward0&gt;)</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/autodiff-helper.html</guid>
  <pubDate>Tue, 04 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>1d CNN</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/1d-cnn.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> torch.nn <span class="im" style="color: #00769E;">as</span> nn</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> torch.optim <span class="im" style="color: #00769E;">as</span> optim</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> torch.utils.data <span class="im" style="color: #00769E;">import</span> DataLoader, TensorDataset</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># Set random seed for reproducibility</span></span>
<span id="cb1-16">torch.manual_seed(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;"># Torch version</span></span>
<span id="cb1-19">torch.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>'2.0.0+cu118'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Simple 1d dataset</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">y <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb3-4">x <span class="op" style="color: #5E5E5E;">=</span> torch.arange(<span class="dv" style="color: #AD0000;">0</span>, <span class="bu" style="color: null;">len</span>(y))</span>
<span id="cb3-5"></span>
<span id="cb3-6">plt.plot(x, y, <span class="st" style="color: #20794D;">'o-'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/1d-cnn_files/figure-html/cell-3-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Filter 1 (detect silence)</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb4-4">    f1 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv1d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, padding<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-5">    f1.weight.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([[[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]]])</span>
<span id="cb4-6">    f1.bias.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb4-7">    y1 <span class="op" style="color: #5E5E5E;">=</span> F.relu(f1(y.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>))).view(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9">plt.plot(x, y, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'original'</span>)</span>
<span id="cb4-10">plt.plot(x, y1, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'filtered f1 (silence)'</span>)</span>
<span id="cb4-11">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>&lt;matplotlib.legend.Legend at 0x7efecfcccb80&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/1d-cnn_files/figure-html/cell-4-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Filter 2 (detect falling edge)</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb6-4">    f2 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv1d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, padding<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-5">    f2.weight.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([[[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]]])</span>
<span id="cb6-6">    f2.bias.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb6-7">    y2 <span class="op" style="color: #5E5E5E;">=</span> F.relu(f2(y.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>))).view(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-8"></span>
<span id="cb6-9">plt.plot(x, y, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'original'</span>)</span>
<span id="cb6-10">plt.plot(x, y2, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'filtered f2 (falling edge)'</span>)</span>
<span id="cb6-11">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>&lt;matplotlib.legend.Legend at 0x7efecfbc7250&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/1d-cnn_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Filter 3 (detect rising edge)</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb8-4">    f3 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv1d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, padding<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb8-5">    f3.weight.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([[[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>]]])</span>
<span id="cb8-6">    f3.bias.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb8-7">    y3 <span class="op" style="color: #5E5E5E;">=</span> F.relu(f3(y.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>))).view(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9">plt.plot(x, y, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'original'</span>)</span>
<span id="cb8-10">plt.plot(x, y3, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'filtered f3 (rising edge)'</span>)</span>
<span id="cb8-11">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>&lt;matplotlib.legend.Legend at 0x7efecfbb88e0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/1d-cnn_files/figure-html/cell-6-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Filter 4 (detect high amplitude)</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb10-4">    f4 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv1d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, padding<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb10-5">    f4.weight.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([[[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>]]])</span>
<span id="cb10-6">    f4.bias.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb10-7">    y4 <span class="op" style="color: #5E5E5E;">=</span> F.relu(f4(y.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>))).view(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb10-8"></span>
<span id="cb10-9">plt.plot(x, y, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'original'</span>) </span>
<span id="cb10-10">plt.plot(x, y4, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'filtered f4 (high amplitude)'</span>)</span>
<span id="cb10-11">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>&lt;matplotlib.legend.Legend at 0x7efecfb2dfd0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/1d-cnn_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/1d-cnn.html</guid>
  <pubDate>Tue, 04 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>KNN LSH</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/knn-lsh.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Generate some data</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">X <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;">3000</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># Plot the data</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f6268340400&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/knn-lsh_files/figure-html/cell-3-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Naive KNN</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">def</span> naive_knn_for_loop(X, x_test, k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>):</span>
<span id="cb4-4">    dists <span class="op" style="color: #5E5E5E;">=</span> np.zeros(X.shape[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(X.shape[<span class="dv" style="color: #AD0000;">0</span>]): <span class="co" style="color: #5E5E5E;"># N iterations (N = number of data points)</span></span>
<span id="cb4-6">        dists[i] <span class="op" style="color: #5E5E5E;">=</span> np.dot(X[i] <span class="op" style="color: #5E5E5E;">-</span> x_test, X[i] <span class="op" style="color: #5E5E5E;">-</span> x_test) <span class="co" style="color: #5E5E5E;"># Time complexity: O(D)</span></span>
<span id="cb4-7">    </span>
<span id="cb4-8">    <span class="co" style="color: #5E5E5E;"># Time complexity to create the distance array: O(N*D)</span></span>
<span id="cb4-9"></span>
<span id="cb4-10">    <span class="co" style="color: #5E5E5E;"># Now, we need to sort the distances</span></span>
<span id="cb4-11">    <span class="co" style="color: #5E5E5E;"># Time complexity: O(N*log(N))</span></span>
<span id="cb4-12">    sorted_dists <span class="op" style="color: #5E5E5E;">=</span> np.argsort(dists)</span>
<span id="cb4-13"></span>
<span id="cb4-14">    <span class="co" style="color: #5E5E5E;"># Time complexity: O(k)</span></span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;">return</span> sorted_dists[:k]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">%</span>timeit naive_knn_for_loop(X, np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>12.7 ms ± 41.5 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Implement using numpy</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;">def</span> naive_knn_numpy(X, x_test, k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>):</span>
<span id="cb7-4">    dists <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">sum</span>((X <span class="op" style="color: #5E5E5E;">-</span> x_test)<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb7-5">    sorted_dists <span class="op" style="color: #5E5E5E;">=</span> np.argsort(dists)</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;">return</span> sorted_dists[:k]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">%</span>timeit naive_knn_numpy(X, np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>242 µs ± 1.72 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Show LSH implementation step by step</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;"># Creating a random separating hyperplane</span></span>
<span id="cb10-4"></span>
<span id="cb10-5">w <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb10-6">b <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;"># Plot the separating hyperplane</span></span>
<span id="cb10-9"></span>
<span id="cb10-10">x <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb10-11">y <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span>(w[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> x <span class="op" style="color: #5E5E5E;">+</span> b) <span class="op" style="color: #5E5E5E;">/</span> w[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb10-12"></span>
<span id="cb10-13">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb10-14">plt.plot(x, y, <span class="st" style="color: #20794D;">'r'</span>)</span>
<span id="cb10-15"></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;"># Color the points based on which side of the hyperplane they are on</span></span>
<span id="cb10-17"></span>
<span id="cb10-18">colors <span class="op" style="color: #5E5E5E;">=</span> X[:, <span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">*</span>w[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">+</span> X[:, <span class="dv" style="color: #AD0000;">1</span>]<span class="op" style="color: #5E5E5E;">*</span>w[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">+</span> b <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb10-19"></span>
<span id="cb10-20">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>, c<span class="op" style="color: #5E5E5E;">=</span>colors)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f619ec76b20&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/knn-lsh_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Create three random hyperplanes and color the points based on which side of the hyperplane they are on. </span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;"># there should be 2^3 = 8 different colors</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;"># each separating hyperplane corresponds to a bit in the hash</span></span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="bu" style="color: null;">hash</span> <span class="op" style="color: #5E5E5E;">=</span> np.zeros((X.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="dv" style="color: #AD0000;">3</span>)).astype(<span class="bu" style="color: null;">int</span>)</span>
<span id="cb12-6">ws <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb12-7">bs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb12-8"><span class="cf" style="color: #003B4F;">for</span> s_h <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">3</span>):</span>
<span id="cb12-9">    w <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb12-10">    b <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb12-11">    ws.append(w)</span>
<span id="cb12-12">    bs.append(b)</span>
<span id="cb12-13">    <span class="bu" style="color: null;">hash</span>[:, s_h] <span class="op" style="color: #5E5E5E;">=</span> X[:, <span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">*</span>w[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">+</span> X[:, <span class="dv" style="color: #AD0000;">1</span>]<span class="op" style="color: #5E5E5E;">*</span>w[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">+</span> b <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb12-14"></span>
<span id="cb12-15"><span class="co" style="color: #5E5E5E;"># Convert the hash to a decimal number</span></span>
<span id="cb12-16"></span>
<span id="cb12-17">hash_dec <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">sum</span>(<span class="bu" style="color: null;">hash</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">**</span>np.arange(<span class="dv" style="color: #AD0000;">3</span>)[::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb12-18"></span>
<span id="cb12-19"><span class="co" style="color: #5E5E5E;"># Plot the hash</span></span>
<span id="cb12-20"></span>
<span id="cb12-21">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">hash</span>)</span>
<span id="cb12-22"></span>
<span id="cb12-23"><span class="co" style="color: #5E5E5E;"># Plot the hash with the separating hyperplanes</span></span>
<span id="cb12-24"></span>
<span id="cb12-25">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>, c<span class="op" style="color: #5E5E5E;">=</span>hash_dec)</span>
<span id="cb12-26"><span class="cf" style="color: #003B4F;">for</span> w, b <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(ws, bs):</span>
<span id="cb12-27">    <span class="bu" style="color: null;">print</span>(w, b)</span>
<span id="cb12-28">    x <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb12-29">    y <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span>(w[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> x <span class="op" style="color: #5E5E5E;">+</span> b) <span class="op" style="color: #5E5E5E;">/</span> w[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb12-30">    plt.plot(x, y, <span class="st" style="color: #20794D;">'r'</span>)</span>
<span id="cb12-31"></span>
<span id="cb12-32"><span class="co" style="color: #5E5E5E;"># Mark the test point</span></span>
<span id="cb12-33"></span>
<span id="cb12-34">x_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb12-35">plt.scatter(x_test[<span class="dv" style="color: #AD0000;">0</span>], x_test[<span class="dv" style="color: #AD0000;">1</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[-0.44543684 -2.02573568] [0.26697028]
[ 0.02870215 -1.02628883] [-0.01423546]
[-0.08089755  0.22046497] [0.07259317]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f619e8e5970&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/knn-lsh_files/figure-html/cell-9-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">pd.DataFrame(<span class="bu" style="color: null;">hash</span>).head()</span>
<span id="cb15-2"></span>
<span id="cb15-3">pd.DataFrame(<span class="bu" style="color: null;">hash</span>).value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>0  1  2
0  0  1    1273
1  1  0    1032
      1     408
   0  1     201
0  1  0      51
   0  0      33
   1  1       2
dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Predict the K nearest neighbors using LSH</span></span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;"># Compute the hash for the test point</span></span>
<span id="cb17-4"></span>
<span id="cb17-5">x_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb17-6">hash_test <span class="op" style="color: #5E5E5E;">=</span> x_test[<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">*</span>ws[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">+</span> x_test[<span class="dv" style="color: #AD0000;">1</span>]<span class="op" style="color: #5E5E5E;">*</span>ws[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">+</span> bs[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;">#convert to decimal</span></span>
<span id="cb17-9">hash_test_dec <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">sum</span>(hash_test <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">**</span>np.arange(<span class="dv" style="color: #AD0000;">3</span>)[::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb17-10"></span>
<span id="cb17-11">hash_test_dec</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>7</code></pre>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Find subset of points with the same hash</span></span>
<span id="cb19-2"></span>
<span id="cb19-3">X_subset <span class="op" style="color: #5E5E5E;">=</span> X[hash_dec <span class="op" style="color: #5E5E5E;">==</span> hash_test_dec]</span>
<span id="cb19-4">X_subset.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>(408, 2)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Now, we can use the naive KNN implementation to find the K nearest neighbors</span></span>
<span id="cb21-2"></span>
<span id="cb21-3">naive_knn_numpy(X_subset, x_test, k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>array([396, 263,  92])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">X_subset[naive_knn_numpy(X_subset, x_test, k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>array([[-0.02365365, -0.05081177],
       [ 0.02026029, -0.05361056],
       [-0.03790977, -0.04458837]])</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/knn-lsh.html</guid>
  <pubDate>Tue, 04 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>CNN</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/cnn.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> torch.nn <span class="im" style="color: #00769E;">as</span> nn</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> torch.optim <span class="im" style="color: #00769E;">as</span> optim</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> torch.utils.data <span class="im" style="color: #00769E;">import</span> DataLoader, TensorDataset</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># Set random seed for reproducibility</span></span>
<span id="cb1-16">torch.manual_seed(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;"># Torch version</span></span>
<span id="cb1-19">torch.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>'2.0.0+cu118'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># MNIST dataset</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="im" style="color: #00769E;">from</span> torchvision <span class="im" style="color: #00769E;">import</span> datasets, transforms</span>
<span id="cb3-4"><span class="im" style="color: #00769E;">import</span> torchvision</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># Split MNIST into train, validation, and test sets</span></span>
<span id="cb3-7">train_data <span class="op" style="color: #5E5E5E;">=</span> datasets.MNIST(root<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'data'</span>, train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, download<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, transform<span class="op" style="color: #5E5E5E;">=</span>transforms.ToTensor())</span>
<span id="cb3-8">test_data <span class="op" style="color: #5E5E5E;">=</span> datasets.MNIST(root<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'data'</span>, train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, download<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, transform<span class="op" style="color: #5E5E5E;">=</span>transforms.ToTensor())</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;"># Split train_data into train and validation sets</span></span>
<span id="cb3-11">val_data <span class="op" style="color: #5E5E5E;">=</span> torch.utils.data.Subset(train_data, <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">50000</span>, <span class="dv" style="color: #AD0000;">51000</span>))</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;"># Reduce the size of the training set to 5,000</span></span>
<span id="cb3-14">train_data <span class="op" style="color: #5E5E5E;">=</span> torch.utils.data.Subset(train_data, <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">5000</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Create data loaders</span></span>
<span id="cb4-2">batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">64</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">train_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(train_data, batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb4-5">val_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(val_data, batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb4-6">test_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(test_data, batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">img, target <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(train_loader))</span>
<span id="cb5-2"><span class="bu" style="color: null;">print</span>(img.shape)</span>
<span id="cb5-3"><span class="bu" style="color: null;">print</span>(target.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([64, 1, 28, 28])
torch.Size([64])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">plt.imshow(img[<span class="dv" style="color: #AD0000;">0</span>].numpy().squeeze(), cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray_r'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">img[<span class="dv" style="color: #AD0000;">0</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>torch.Size([1, 28, 28])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Create a simple LeNet like CNN</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;">class</span> LeNet5(nn.Module):</span>
<span id="cb10-4">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb10-5">        <span class="bu" style="color: null;">super</span>(LeNet5, <span class="va" style="color: #111111;">self</span>).<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb10-6">        <span class="co" style="color: #5E5E5E;"># 1 input image channel, 6 output channels, 5x5 square convolution</span></span>
<span id="cb10-7">        <span class="va" style="color: #111111;">self</span>.conv1 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">5</span>) </span>
<span id="cb10-8">        <span class="co" style="color: #5E5E5E;"># 6 input image channel, 16 output channels, 5x5 square convolution</span></span>
<span id="cb10-9">        <span class="va" style="color: #111111;">self</span>.conv2 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb10-10">        <span class="va" style="color: #111111;">self</span>.fc1 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">16</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">4</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">120</span>)</span>
<span id="cb10-11">        <span class="va" style="color: #111111;">self</span>.fc2 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">120</span>, <span class="dv" style="color: #AD0000;">84</span>)</span>
<span id="cb10-12">        <span class="va" style="color: #111111;">self</span>.fc3 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">84</span>, <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb10-13">        </span>
<span id="cb10-14">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb10-15">        x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.conv1(x) <span class="co" style="color: #5E5E5E;"># 28x28x1 -&gt; 24x24x6</span></span>
<span id="cb10-16">        x <span class="op" style="color: #5E5E5E;">=</span> F.max_pool2d(F.relu(x), <span class="dv" style="color: #AD0000;">2</span>) <span class="co" style="color: #5E5E5E;"># 24x24x6 -&gt; 12x12x6</span></span>
<span id="cb10-17">        x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.conv2(x) <span class="co" style="color: #5E5E5E;"># 12x12x6 -&gt; 8x8x16</span></span>
<span id="cb10-18">        x <span class="op" style="color: #5E5E5E;">=</span> F.max_pool2d(F.relu(x), <span class="dv" style="color: #AD0000;">2</span>) <span class="co" style="color: #5E5E5E;"># 8x8x16 -&gt; 4x4x16</span></span>
<span id="cb10-19">        x <span class="op" style="color: #5E5E5E;">=</span> x.view(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="va" style="color: #111111;">self</span>.num_flat_features(x)) <span class="co" style="color: #5E5E5E;"># 4x4x16 -&gt; 256</span></span>
<span id="cb10-20">        x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fc1(x) <span class="co" style="color: #5E5E5E;"># 256 -&gt; 120</span></span>
<span id="cb10-21">        x <span class="op" style="color: #5E5E5E;">=</span> F.relu(x)</span>
<span id="cb10-22">        x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fc2(x) <span class="co" style="color: #5E5E5E;"># 120 -&gt; 84</span></span>
<span id="cb10-23">        x <span class="op" style="color: #5E5E5E;">=</span> F.relu(x)</span>
<span id="cb10-24">        x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fc3(x) <span class="co" style="color: #5E5E5E;"># 84 -&gt; 10</span></span>
<span id="cb10-25">        <span class="cf" style="color: #003B4F;">return</span> x</span>
<span id="cb10-26">    </span>
<span id="cb10-27">    <span class="kw" style="color: #003B4F;">def</span> num_flat_features(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb10-28">        size <span class="op" style="color: #5E5E5E;">=</span> x.size()[<span class="dv" style="color: #AD0000;">1</span>:]</span>
<span id="cb10-29">        num_features <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb10-30">        <span class="cf" style="color: #003B4F;">for</span> s <span class="kw" style="color: #003B4F;">in</span> size:</span>
<span id="cb10-31">            num_features <span class="op" style="color: #5E5E5E;">*=</span> s</span>
<span id="cb10-32">        <span class="cf" style="color: #003B4F;">return</span> num_features</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Create a model</span></span>
<span id="cb11-2"></span>
<span id="cb11-3">model <span class="op" style="color: #5E5E5E;">=</span> LeNet5()</span>
<span id="cb11-4"><span class="bu" style="color: null;">print</span>(model)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>LeNet5(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=256, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=84, bias=True)
  (fc3): Linear(in_features=84, out_features=10, bias=True)
)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># Train the model</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;"># Define the loss and optimizer</span></span>
<span id="cb13-4">criterion <span class="op" style="color: #5E5E5E;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb13-5">optimizer <span class="op" style="color: #5E5E5E;">=</span> optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.001</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;"># Train the model</span></span>
<span id="cb13-8">n_epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb13-9"></span>
<span id="cb13-10">train_losses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb13-11">val_losses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_epochs):</span>
<span id="cb13-14">    train_loss <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb13-15">    val_loss <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb13-16">    </span>
<span id="cb13-17">    <span class="co" style="color: #5E5E5E;"># Train the model</span></span>
<span id="cb13-18">    model.train()</span>
<span id="cb13-19">    <span class="cf" style="color: #003B4F;">for</span> data, target <span class="kw" style="color: #003B4F;">in</span> train_loader:</span>
<span id="cb13-20">        optimizer.zero_grad()</span>
<span id="cb13-21">        output <span class="op" style="color: #5E5E5E;">=</span> model(data)</span>
<span id="cb13-22">        loss <span class="op" style="color: #5E5E5E;">=</span> criterion(output, target)</span>
<span id="cb13-23">        loss.backward()</span>
<span id="cb13-24">        optimizer.step()</span>
<span id="cb13-25">        train_loss <span class="op" style="color: #5E5E5E;">+=</span> loss.item()<span class="op" style="color: #5E5E5E;">*</span>data.size(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb13-26">        </span>
<span id="cb13-27">    <span class="co" style="color: #5E5E5E;"># Evaluate the model</span></span>
<span id="cb13-28">    model.<span class="bu" style="color: null;">eval</span>()</span>
<span id="cb13-29">    <span class="cf" style="color: #003B4F;">for</span> data, target <span class="kw" style="color: #003B4F;">in</span> val_loader:</span>
<span id="cb13-30">        output <span class="op" style="color: #5E5E5E;">=</span> model(data)</span>
<span id="cb13-31">        loss <span class="op" style="color: #5E5E5E;">=</span> criterion(output, target)</span>
<span id="cb13-32">        val_loss <span class="op" style="color: #5E5E5E;">+=</span> loss.item()<span class="op" style="color: #5E5E5E;">*</span>data.size(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb13-33">        </span>
<span id="cb13-34">    <span class="co" style="color: #5E5E5E;"># Calculate average losses</span></span>
<span id="cb13-35">    train_loss <span class="op" style="color: #5E5E5E;">=</span> train_loss<span class="op" style="color: #5E5E5E;">/</span><span class="bu" style="color: null;">len</span>(train_loader.sampler)</span>
<span id="cb13-36">    val_loss <span class="op" style="color: #5E5E5E;">=</span> val_loss<span class="op" style="color: #5E5E5E;">/</span><span class="bu" style="color: null;">len</span>(val_loader.sampler)</span>
<span id="cb13-37">    train_losses.append(train_loss)</span>
<span id="cb13-38">    val_losses.append(val_loss)</span>
<span id="cb13-39">    </span>
<span id="cb13-40">    <span class="co" style="color: #5E5E5E;"># Print training/validation statistics </span></span>
<span id="cb13-41">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Epoch: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> </span><span class="ch" style="color: #20794D;">\t</span><span class="st" style="color: #20794D;">Training Loss: </span><span class="sc" style="color: #5E5E5E;">{:.6f}</span><span class="st" style="color: #20794D;"> </span><span class="ch" style="color: #20794D;">\t</span><span class="st" style="color: #20794D;">Validation Loss: </span><span class="sc" style="color: #5E5E5E;">{:.6f}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(</span>
<span id="cb13-42">        epoch<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb13-43">        train_loss,</span>
<span id="cb13-44">        val_loss</span>
<span id="cb13-45">        ))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch: 1    Training Loss: 1.437300     Validation Loss: 0.653900
Epoch: 2    Training Loss: 0.424091     Validation Loss: 0.367598
Epoch: 3    Training Loss: 0.303504     Validation Loss: 0.308797
Epoch: 4    Training Loss: 0.219186     Validation Loss: 0.257062
Epoch: 5    Training Loss: 0.195089     Validation Loss: 0.214157
Epoch: 6    Training Loss: 0.153489     Validation Loss: 0.190220
Epoch: 7    Training Loss: 0.130065     Validation Loss: 0.189110
Epoch: 8    Training Loss: 0.114033     Validation Loss: 0.173153
Epoch: 9    Training Loss: 0.103402     Validation Loss: 0.167645
Epoch: 10   Training Loss: 0.089715     Validation Loss: 0.156438</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Plot the training and validation loss</span></span>
<span id="cb15-2"></span>
<span id="cb15-3">plt.plot(train_losses, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Training loss'</span>)</span>
<span id="cb15-4">plt.plot(val_losses, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Validation loss'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Test the model</span></span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb16-4">    correct <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb16-5">    total <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb16-6">    <span class="cf" style="color: #003B4F;">for</span> data, target <span class="kw" style="color: #003B4F;">in</span> test_loader:</span>
<span id="cb16-7">        output <span class="op" style="color: #5E5E5E;">=</span> model(data)</span>
<span id="cb16-8">        _, predicted <span class="op" style="color: #5E5E5E;">=</span> torch.<span class="bu" style="color: null;">max</span>(output.data, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb16-9">        total <span class="op" style="color: #5E5E5E;">+=</span> target.size(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb16-10">        correct <span class="op" style="color: #5E5E5E;">+=</span> (predicted <span class="op" style="color: #5E5E5E;">==</span> target).<span class="bu" style="color: null;">sum</span>().item()</span>
<span id="cb16-11"></span>
<span id="cb16-12">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Test Accuracy: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">%'</span>.<span class="bu" style="color: null;">format</span>(<span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">*</span> correct <span class="op" style="color: #5E5E5E;">/</span> total))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test Accuracy: 96.1%</code></pre>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># Now, let us take an image and walk it through the model</span></span>
<span id="cb18-2"></span>
<span id="cb18-3">test_img <span class="op" style="color: #5E5E5E;">=</span> train_data[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">plt.imshow(test_img.numpy().squeeze(), cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray_r'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># Get weights and biases from the first convolutional layer</span></span>
<span id="cb20-2"></span>
<span id="cb20-3">weights <span class="op" style="color: #5E5E5E;">=</span> model.conv1.weight.data</span>
<span id="cb20-4">w <span class="op" style="color: #5E5E5E;">=</span> weights.numpy()</span>
<span id="cb20-5"></span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;"># Plot the weights</span></span>
<span id="cb20-7"></span>
<span id="cb20-8">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb20-9">ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb20-10"></span>
<span id="cb20-11"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>):</span>
<span id="cb20-12">    sns.heatmap(w[i][<span class="dv" style="color: #AD0000;">0</span>], ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>, cbar<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, annot<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb20-13">    ax[i].set_title(<span class="st" style="color: #20794D;">'Filter </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Get output from model's first conv1 layer</span></span>
<span id="cb21-2"></span>
<span id="cb21-3">conv1 <span class="op" style="color: #5E5E5E;">=</span> F.relu(model.conv1(test_img))</span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb21-6">c1 <span class="op" style="color: #5E5E5E;">=</span> conv1 <span class="op" style="color: #5E5E5E;">-</span> conv1.<span class="bu" style="color: null;">min</span>()</span>
<span id="cb21-7">c1 <span class="op" style="color: #5E5E5E;">=</span> c1 <span class="op" style="color: #5E5E5E;">/</span> conv1.<span class="bu" style="color: null;">max</span>()</span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="bu" style="color: null;">print</span>(c1.shape)</span>
<span id="cb21-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"1 image, 6 channels, 24x24 pixels"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 6, 24, 24])
1 image, 6 channels, 24x24 pixels</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb23-2"></span>
<span id="cb23-3">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb23-4">ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb23-5"></span>
<span id="cb23-6"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>):</span>
<span id="cb23-7">    sns.heatmap(c1[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb23-8">    ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># Get output from model after max pooling</span></span>
<span id="cb24-2"></span>
<span id="cb24-3">pool1 <span class="op" style="color: #5E5E5E;">=</span> F.max_pool2d(conv1, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb24-6">p1 <span class="op" style="color: #5E5E5E;">=</span> pool1 <span class="op" style="color: #5E5E5E;">-</span> pool1.<span class="bu" style="color: null;">min</span>()</span>
<span id="cb24-7">p1 <span class="op" style="color: #5E5E5E;">=</span> p1 <span class="op" style="color: #5E5E5E;">/</span> pool1.<span class="bu" style="color: null;">max</span>()</span>
<span id="cb24-8"></span>
<span id="cb24-9"><span class="bu" style="color: null;">print</span>(p1.shape)</span>
<span id="cb24-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"1 image, 6 channels, 12x12 pixels"</span>)</span>
<span id="cb24-11"></span>
<span id="cb24-12"><span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb24-13"></span>
<span id="cb24-14">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb24-15">ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb24-16"></span>
<span id="cb24-17"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>):</span>
<span id="cb24-18">    sns.heatmap(p1[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb24-19">    ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 6, 12, 12])
1 image, 6 channels, 12x12 pixels</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-18-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># Visualize the filters in the second convolutional layer</span></span>
<span id="cb26-2"></span>
<span id="cb26-3">weights <span class="op" style="color: #5E5E5E;">=</span> model.conv2.weight.data</span>
<span id="cb26-4">w <span class="op" style="color: #5E5E5E;">=</span> weights.numpy()</span>
<span id="cb26-5"></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;"># Plot the weights</span></span>
<span id="cb26-7"></span>
<span id="cb26-8">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">16</span>))</span>
<span id="cb26-9">ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb26-10"></span>
<span id="cb26-11"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">16</span>):</span>
<span id="cb26-12">    sns.heatmap(w[i][<span class="dv" style="color: #AD0000;">0</span>], ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>, cbar<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb26-13">    ax[i].set_title(<span class="st" style="color: #20794D;">'Filter </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Get output from model's second conv2 layer</span></span>
<span id="cb27-2"></span>
<span id="cb27-3">conv2 <span class="op" style="color: #5E5E5E;">=</span> F.relu(model.conv2(pool1))</span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb27-6">c2 <span class="op" style="color: #5E5E5E;">=</span> conv2 <span class="op" style="color: #5E5E5E;">-</span> conv2.<span class="bu" style="color: null;">min</span>()</span>
<span id="cb27-7">c2 <span class="op" style="color: #5E5E5E;">=</span> c2 <span class="op" style="color: #5E5E5E;">/</span> conv2.<span class="bu" style="color: null;">max</span>()</span>
<span id="cb27-8"></span>
<span id="cb27-9"><span class="bu" style="color: null;">print</span>(c2.shape)</span>
<span id="cb27-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"1 image, 16 channels, 8x8 pixels"</span>)</span>
<span id="cb27-11"></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb27-13"></span>
<span id="cb27-14">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">18</span>))</span>
<span id="cb27-15">ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb27-16"></span>
<span id="cb27-17"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">16</span>):</span>
<span id="cb27-18">    sns.heatmap(c2[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb27-19">    ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 16, 8, 8])
1 image, 16 channels, 8x8 pixels</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Get output from model after max pooling</span></span>
<span id="cb29-2"></span>
<span id="cb29-3">pool2 <span class="op" style="color: #5E5E5E;">=</span> F.max_pool2d(conv2, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb29-4"></span>
<span id="cb29-5"><span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb29-6">p2 <span class="op" style="color: #5E5E5E;">=</span> pool2 <span class="op" style="color: #5E5E5E;">-</span> pool2.<span class="bu" style="color: null;">min</span>()</span>
<span id="cb29-7">p2 <span class="op" style="color: #5E5E5E;">=</span> p2 <span class="op" style="color: #5E5E5E;">/</span> pool2.<span class="bu" style="color: null;">max</span>()</span>
<span id="cb29-8"></span>
<span id="cb29-9"><span class="bu" style="color: null;">print</span>(p2.shape)</span>
<span id="cb29-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"1 image, 16 channels, 4x4 pixels"</span>)</span>
<span id="cb29-11"></span>
<span id="cb29-12"><span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb29-13"></span>
<span id="cb29-14">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">18</span>))</span>
<span id="cb29-15">ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb29-16"></span>
<span id="cb29-17"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">16</span>):</span>
<span id="cb29-18">    sns.heatmap(p2[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb29-19">    ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 16, 4, 4])
1 image, 16 channels, 4x4 pixels</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-21-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Flatten the output of the second convolutional layer</span></span>
<span id="cb31-2"></span>
<span id="cb31-3">flat <span class="op" style="color: #5E5E5E;">=</span> pool2.view(pool2.size(<span class="dv" style="color: #AD0000;">0</span>), <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb31-4"><span class="bu" style="color: null;">print</span>(flat.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 256])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;"># Repeat the above process as a function to visualize the convolution outputs for any image for any layer</span></span>
<span id="cb33-2"><span class="kw" style="color: #003B4F;">def</span> scale_img(img):</span>
<span id="cb33-3">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;">    Scale the image to the same scale</span></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb33-6">    img <span class="op" style="color: #5E5E5E;">=</span> img <span class="op" style="color: #5E5E5E;">-</span> img.<span class="bu" style="color: null;">min</span>()</span>
<span id="cb33-7">    img <span class="op" style="color: #5E5E5E;">=</span> img <span class="op" style="color: #5E5E5E;">/</span> img.<span class="bu" style="color: null;">max</span>()</span>
<span id="cb33-8">    <span class="cf" style="color: #003B4F;">return</span> img</span>
<span id="cb33-9"></span>
<span id="cb33-10"><span class="kw" style="color: #003B4F;">def</span> visualize_conv_output(model, img):</span>
<span id="cb33-11">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb33-12"><span class="co" style="color: #5E5E5E;">    Visualize the output of a convolutional layer</span></span>
<span id="cb33-13"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb33-14">    <span class="co" style="color: #5E5E5E;"># Get output from model's first conv1 layer</span></span>
<span id="cb33-15">    conv1 <span class="op" style="color: #5E5E5E;">=</span> F.relu(model.conv1(img))</span>
<span id="cb33-16"></span>
<span id="cb33-17">    <span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb33-18">    c1 <span class="op" style="color: #5E5E5E;">=</span> scale_img(conv1)</span>
<span id="cb33-19"></span>
<span id="cb33-20">    <span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb33-21">    fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb33-22">    ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb33-23"></span>
<span id="cb33-24"></span>
<span id="cb33-25">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>):</span>
<span id="cb33-26">        sns.heatmap(c1[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb33-27">        ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb33-28">    <span class="co" style="color: #5E5E5E;"># Add title to the figure</span></span>
<span id="cb33-29">    fig.suptitle(<span class="st" style="color: #20794D;">'Convolutional Layer 1'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span>
<span id="cb33-30">    </span>
<span id="cb33-31">    <span class="co" style="color: #5E5E5E;"># Get output from model after max pooling</span></span>
<span id="cb33-32">    pool1 <span class="op" style="color: #5E5E5E;">=</span> F.max_pool2d(conv1, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb33-33"></span>
<span id="cb33-34">    <span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb33-35">    p1 <span class="op" style="color: #5E5E5E;">=</span> scale_img(pool1)</span>
<span id="cb33-36"></span>
<span id="cb33-37">    <span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb33-38">    fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb33-39">    ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb33-40"></span>
<span id="cb33-41"></span>
<span id="cb33-42">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>):</span>
<span id="cb33-43">        sns.heatmap(p1[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb33-44">        ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb33-45">    <span class="co" style="color: #5E5E5E;"># Add title to the figure</span></span>
<span id="cb33-46">    fig.suptitle(<span class="st" style="color: #20794D;">'Max Pooling Layer 1'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span>
<span id="cb33-47"></span>
<span id="cb33-48">    <span class="co" style="color: #5E5E5E;"># Get output from model's second conv2 layer</span></span>
<span id="cb33-49">    conv2 <span class="op" style="color: #5E5E5E;">=</span> F.relu(model.conv2(pool1))</span>
<span id="cb33-50"></span>
<span id="cb33-51">    <span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb33-52">    c2 <span class="op" style="color: #5E5E5E;">=</span> scale_img(conv2)</span>
<span id="cb33-53"></span>
<span id="cb33-54">    <span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb33-55">    fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">18</span>))</span>
<span id="cb33-56">    ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb33-57"></span>
<span id="cb33-58">    </span>
<span id="cb33-59">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">16</span>):</span>
<span id="cb33-60">        sns.heatmap(c2[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb33-61">        ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb33-62">    <span class="co" style="color: #5E5E5E;"># Add title to the figure</span></span>
<span id="cb33-63">    fig.suptitle(<span class="st" style="color: #20794D;">'Convolutional Layer 2'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span>
<span id="cb33-64"></span>
<span id="cb33-65">    <span class="co" style="color: #5E5E5E;"># Get output from model after max pooling</span></span>
<span id="cb33-66">    pool2 <span class="op" style="color: #5E5E5E;">=</span> F.max_pool2d(conv2, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb33-67"></span>
<span id="cb33-68">    <span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb33-69">    p2 <span class="op" style="color: #5E5E5E;">=</span> scale_img(pool2)</span>
<span id="cb33-70"></span>
<span id="cb33-71">    <span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb33-72">    fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">18</span>))</span>
<span id="cb33-73">    ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb33-74"></span>
<span id="cb33-75">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">16</span>):</span>
<span id="cb33-76">        sns.heatmap(p2[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb33-77">        ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb33-78">    <span class="co" style="color: #5E5E5E;"># Add title to the figure</span></span>
<span id="cb33-79">    fig.suptitle(<span class="st" style="color: #20794D;">'Max Pooling Layer 2'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">visualize_conv_output(model, train_data[<span class="dv" style="color: #AD0000;">2</span>][<span class="dv" style="color: #AD0000;">0</span>].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-24-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-24-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-24-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-24-output-4.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">visualize_conv_output(model, train_data[<span class="dv" style="color: #AD0000;">4</span>][<span class="dv" style="color: #AD0000;">0</span>].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-25-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-25-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-25-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-25-output-4.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/cnn.html</guid>
  <pubDate>Mon, 03 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Generating names using MLPs</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/names.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> torch <span class="im" style="color: #00769E;">import</span> nn</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt <span class="co" style="color: #5E5E5E;"># for making figures</span></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">torch.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>'2.0.0+cu118'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">device <span class="op" style="color: #5E5E5E;">=</span> torch.device(<span class="st" style="color: #20794D;">"cuda"</span> <span class="cf" style="color: #003B4F;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"cpu"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Get some names from https://github.com/MASTREX/List-of-Indian-Names</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">!</span>wget https:<span class="op" style="color: #5E5E5E;">//</span>raw.githubusercontent.com<span class="op" style="color: #5E5E5E;">/</span>balasahebgulave<span class="op" style="color: #5E5E5E;">/</span>Dataset<span class="op" style="color: #5E5E5E;">-</span>Indian<span class="op" style="color: #5E5E5E;">-</span>Names<span class="op" style="color: #5E5E5E;">/</span>master<span class="op" style="color: #5E5E5E;">/</span>Indian_Names.csv <span class="op" style="color: #5E5E5E;">-</span>O names<span class="op" style="color: #5E5E5E;">-</span><span class="bu" style="color: null;">long</span>.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>--2023-03-31 17:00:55--  https://raw.githubusercontent.com/balasahebgulave/Dataset-Indian-Names/master/Indian_Names.csv
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.110.133, 185.199.109.133, 185.199.108.133, ...
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.110.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 85538 (84K) [text/plain]
Saving to: ‘names-long.csv’

names-long.csv      100%[===================&gt;]  83.53K  --.-KB/s    in 0.07s   

2023-03-31 17:00:55 (1.12 MB/s) - ‘names-long.csv’ saved [85538/85538]
</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">!</span>head names<span class="op" style="color: #5E5E5E;">-</span><span class="bu" style="color: null;">long</span>.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>,Name
0,aabid
1,aabida
2,aachal
3,aadesh
4,aadil
5,aadish
6,aaditya
7,aaenab
8,aafreen</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">words <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'names-long.csv'</span>)[<span class="st" style="color: #20794D;">"Name"</span>]</span>
<span id="cb10-2">words <span class="op" style="color: #5E5E5E;">=</span> words.<span class="bu" style="color: null;">str</span>.lower()</span>
<span id="cb10-3">words <span class="op" style="color: #5E5E5E;">=</span> words.<span class="bu" style="color: null;">str</span>.strip()</span>
<span id="cb10-4">words <span class="op" style="color: #5E5E5E;">=</span> words.<span class="bu" style="color: null;">str</span>.replace(<span class="st" style="color: #20794D;">" "</span>, <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6">words <span class="op" style="color: #5E5E5E;">=</span> words[words.<span class="bu" style="color: null;">str</span>.<span class="bu" style="color: null;">len</span>() <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb10-7">words <span class="op" style="color: #5E5E5E;">=</span> words[words.<span class="bu" style="color: null;">str</span>.<span class="bu" style="color: null;">len</span>() <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">10</span>]</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;"># Randomly shuffle the words</span></span>
<span id="cb10-10">words <span class="op" style="color: #5E5E5E;">=</span> words.sample(frac<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).reset_index(drop<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb10-11">words <span class="op" style="color: #5E5E5E;">=</span> words.tolist()</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;"># Remove words having non alphabets</span></span>
<span id="cb10-14">words <span class="op" style="color: #5E5E5E;">=</span> [word <span class="cf" style="color: #003B4F;">for</span> word <span class="kw" style="color: #003B4F;">in</span> words <span class="cf" style="color: #003B4F;">if</span> word.isalpha()]</span>
<span id="cb10-15">words[:<span class="dv" style="color: #AD0000;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>['sehran',
 'iema',
 'bajinder',
 'manoj',
 'nayaka',
 'ajmal',
 'navleen',
 'akhtari',
 'samsung',
 'imtyaz']</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;">len</span>(words)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>6184</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># build the vocabulary of characters and mappings to/from integers</span></span>
<span id="cb14-2">chars <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sorted</span>(<span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">set</span>(<span class="st" style="color: #20794D;">''</span>.join(words))))</span>
<span id="cb14-3">stoi <span class="op" style="color: #5E5E5E;">=</span> {s:i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">for</span> i,s <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(chars)}</span>
<span id="cb14-4">stoi[<span class="st" style="color: #20794D;">'.'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb14-5">itos <span class="op" style="color: #5E5E5E;">=</span> {i:s <span class="cf" style="color: #003B4F;">for</span> s,i <span class="kw" style="color: #003B4F;">in</span> stoi.items()}</span>
<span id="cb14-6"><span class="bu" style="color: null;">print</span>(itos)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 0: '.'}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">block_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span> <span class="co" style="color: #5E5E5E;"># context length: how many characters do we take to predict the next one?</span></span>
<span id="cb16-2">X, Y <span class="op" style="color: #5E5E5E;">=</span> [], []</span>
<span id="cb16-3"><span class="cf" style="color: #003B4F;">for</span> w <span class="kw" style="color: #003B4F;">in</span> words[:]:</span>
<span id="cb16-4">  </span>
<span id="cb16-5">  <span class="co" style="color: #5E5E5E;">#print(w)</span></span>
<span id="cb16-6">  context <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> block_size</span>
<span id="cb16-7">  <span class="cf" style="color: #003B4F;">for</span> ch <span class="kw" style="color: #003B4F;">in</span> w <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'.'</span>:</span>
<span id="cb16-8">    ix <span class="op" style="color: #5E5E5E;">=</span> stoi[ch]</span>
<span id="cb16-9">    X.append(context)</span>
<span id="cb16-10">    Y.append(ix)</span>
<span id="cb16-11">    <span class="co" style="color: #5E5E5E;">#print(''.join(itos[i] for i in context), '---&gt;', itos[ix])</span></span>
<span id="cb16-12">    context <span class="op" style="color: #5E5E5E;">=</span> context[<span class="dv" style="color: #AD0000;">1</span>:] <span class="op" style="color: #5E5E5E;">+</span> [ix] <span class="co" style="color: #5E5E5E;"># crop and append</span></span>
<span id="cb16-13">  </span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;"># Move data to GPU</span></span>
<span id="cb16-15"></span>
<span id="cb16-16">X <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(X).to(device)</span>
<span id="cb16-17">Y <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(Y).to(device)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">X.shape, X.dtype, Y.shape, Y.dtype</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>(torch.Size([44325, 4]), torch.int64, torch.Size([44325]), torch.int64)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Embedding layer for the context</span></span>
<span id="cb19-2"></span>
<span id="cb19-3">emb_dim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb19-4">emb <span class="op" style="color: #5E5E5E;">=</span> torch.nn.Embedding(<span class="bu" style="color: null;">len</span>(stoi), emb_dim)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">emb.weight</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>Parameter containing:
tensor([[-0.7321, -0.0133],
        [ 0.9890, -0.3715],
        [-1.2565, -0.3346],
        [ 0.3989,  1.4209],
        [-0.5718, -0.1615],
        [ 0.4853,  2.2499],
        [ 0.1107,  2.7214],
        [-1.7009,  1.1288],
        [-0.6636, -1.1188],
        [-1.6768,  1.0876],
        [ 0.1645,  0.0063],
        [-1.0367, -0.9603],
        [-3.0939,  1.9831],
        [-0.8332,  0.8572],
        [-1.4305, -0.6878],
        [-0.5197, -0.9626],
        [-2.3395,  0.6205],
        [-0.7045,  0.2387],
        [ 2.8074, -0.8545],
        [-0.2396, -0.7623],
        [-1.1135, -0.1288],
        [-0.5464, -0.0345],
        [-1.2686,  1.0719],
        [-1.3973, -0.5510],
        [ 0.9127,  1.2566],
        [ 0.6278,  1.1915],
        [ 0.0465,  1.2633]], requires_grad=True)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># Function to visualize the embedding in 2d space</span></span>
<span id="cb22-2"></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;">def</span> plot_emb(emb, itos, ax<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb22-4">    <span class="cf" style="color: #003B4F;">if</span> ax <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb22-5">        fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb22-6">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(itos)):</span>
<span id="cb22-7">        x, y <span class="op" style="color: #5E5E5E;">=</span> emb.weight[i].detach().cpu().numpy()</span>
<span id="cb22-8">        ax.scatter(x, y, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb22-9">        ax.text(x <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.05</span>, y <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.05</span>, itos[i])</span>
<span id="cb22-10">    <span class="cf" style="color: #003B4F;">return</span> ax</span>
<span id="cb22-11"></span>
<span id="cb22-12">plot_emb(emb, itos)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>&lt;AxesSubplot:&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/names_files/figure-html/cell-15-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;">class</span> NextChar(nn.Module):</span>
<span id="cb24-2">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, block_size, vocab_size, emb_dim, hidden_size):</span>
<span id="cb24-3">    <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb24-4">    <span class="va" style="color: #111111;">self</span>.emb <span class="op" style="color: #5E5E5E;">=</span> nn.Embedding(vocab_size, emb_dim)</span>
<span id="cb24-5">    <span class="va" style="color: #111111;">self</span>.lin1 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(block_size <span class="op" style="color: #5E5E5E;">*</span> emb_dim, hidden_size)</span>
<span id="cb24-6">    <span class="va" style="color: #111111;">self</span>.lin2 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(hidden_size, vocab_size)</span>
<span id="cb24-7"></span>
<span id="cb24-8">  <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb24-9">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.emb(x)</span>
<span id="cb24-10">    x <span class="op" style="color: #5E5E5E;">=</span> x.view(x.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb24-11">    x <span class="op" style="color: #5E5E5E;">=</span> F.relu(<span class="va" style="color: #111111;">self</span>.lin1(x))</span>
<span id="cb24-12">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.lin2(x)</span>
<span id="cb24-13">    <span class="cf" style="color: #003B4F;">return</span> x</span>
<span id="cb24-14">    </span></code></pre></div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># Generate names from untrained model</span></span>
<span id="cb25-2"></span>
<span id="cb25-3"></span>
<span id="cb25-4">model <span class="op" style="color: #5E5E5E;">=</span> NextChar(block_size, <span class="bu" style="color: null;">len</span>(stoi), emb_dim, <span class="dv" style="color: #AD0000;">50</span>).to(device)</span>
<span id="cb25-5">model <span class="op" style="color: #5E5E5E;">=</span> torch.<span class="bu" style="color: null;">compile</span>(model)</span>
<span id="cb25-6"></span>
<span id="cb25-7">g <span class="op" style="color: #5E5E5E;">=</span> torch.Generator()</span>
<span id="cb25-8">g.manual_seed(<span class="dv" style="color: #AD0000;">4000002</span>)</span>
<span id="cb25-9"><span class="kw" style="color: #003B4F;">def</span> generate_name(model, itos, stoi, block_size, max_len<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb25-10">    context <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> block_size</span>
<span id="cb25-11">    name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">''</span></span>
<span id="cb25-12">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(max_len):</span>
<span id="cb25-13">        x <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(context).view(<span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).to(device)</span>
<span id="cb25-14">        y_pred <span class="op" style="color: #5E5E5E;">=</span> model(x)</span>
<span id="cb25-15">        ix <span class="op" style="color: #5E5E5E;">=</span> torch.distributions.categorical.Categorical(logits<span class="op" style="color: #5E5E5E;">=</span>y_pred).sample().item()</span>
<span id="cb25-16">        ch <span class="op" style="color: #5E5E5E;">=</span> itos[ix]</span>
<span id="cb25-17">        <span class="cf" style="color: #003B4F;">if</span> ch <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'.'</span>:</span>
<span id="cb25-18">            <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb25-19">        name <span class="op" style="color: #5E5E5E;">+=</span> ch</span>
<span id="cb25-20">        context <span class="op" style="color: #5E5E5E;">=</span> context[<span class="dv" style="color: #AD0000;">1</span>:] <span class="op" style="color: #5E5E5E;">+</span> [ix]</span>
<span id="cb25-21">    <span class="cf" style="color: #003B4F;">return</span> name</span>
<span id="cb25-22"></span>
<span id="cb25-23"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb25-24">    <span class="bu" style="color: null;">print</span>(generate_name(model, itos, stoi, block_size))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/nipun.batra/miniforge3/lib/python3.9/site-packages/torch/_inductor/compile_fx.py:90: UserWarning: TensorFloat32 tensor cores for float32 matrix multiplication available but not enabled. Consider setting `torch.set_float32_matmul_precision('high')` for better performance.
  warnings.warn(</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>ihjzyewjrp
puijjpnwfk
gcvvflic
eeokqgmlse
yiaghsikiv
smmggfnsot
ptdmdlmwfi
yitpyixshw
gjqapafodl
dfuhgoowtb</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="cf" style="color: #003B4F;">for</span> param_name, param <span class="kw" style="color: #003B4F;">in</span> model.named_parameters():</span>
<span id="cb28-2">    <span class="bu" style="color: null;">print</span>(param_name, param.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>emb.weight torch.Size([27, 2])
lin1.weight torch.Size([50, 8])
lin1.bias torch.Size([50])
lin2.weight torch.Size([27, 50])
lin2.bias torch.Size([27])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># Train the model</span></span>
<span id="cb30-2"></span>
<span id="cb30-3">loss_fn <span class="op" style="color: #5E5E5E;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb30-4">opt <span class="op" style="color: #5E5E5E;">=</span> torch.optim.AdamW(model.parameters(), lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>)</span>
<span id="cb30-5"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;"># Mini-batch training</span></span>
<span id="cb30-7">batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4096</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">32</span></span>
<span id="cb30-8">print_every <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">400</span></span>
<span id="cb30-9">elapsed_time <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb30-10"><span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10000</span>):</span>
<span id="cb30-11">    start_time <span class="op" style="color: #5E5E5E;">=</span> time.time()</span>
<span id="cb30-12">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, X.shape[<span class="dv" style="color: #AD0000;">0</span>], batch_size):</span>
<span id="cb30-13">        x <span class="op" style="color: #5E5E5E;">=</span> X[i:i<span class="op" style="color: #5E5E5E;">+</span>batch_size]</span>
<span id="cb30-14">        y <span class="op" style="color: #5E5E5E;">=</span> Y[i:i<span class="op" style="color: #5E5E5E;">+</span>batch_size]</span>
<span id="cb30-15">        y_pred <span class="op" style="color: #5E5E5E;">=</span> model(x)</span>
<span id="cb30-16">        loss <span class="op" style="color: #5E5E5E;">=</span> loss_fn(y_pred, y)</span>
<span id="cb30-17">        loss.backward()</span>
<span id="cb30-18">        opt.step()</span>
<span id="cb30-19">        opt.zero_grad()</span>
<span id="cb30-20">    end_time <span class="op" style="color: #5E5E5E;">=</span> time.time()</span>
<span id="cb30-21">    elapsed_time.append(end_time <span class="op" style="color: #5E5E5E;">-</span> start_time)</span>
<span id="cb30-22">    <span class="cf" style="color: #003B4F;">if</span> epoch <span class="op" style="color: #5E5E5E;">%</span> print_every <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb30-23">        <span class="bu" style="color: null;">print</span>(epoch, loss.item())</span>
<span id="cb30-24">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Time taken for 1 epochs: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> seconds"</span>.<span class="bu" style="color: null;">format</span>(<span class="bu" style="color: null;">sum</span>(elapsed_time)<span class="op" style="color: #5E5E5E;">/</span>print_every))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 2.0890238285064697
Time taken for 1 epochs: 6.577968597412109e-06 seconds
400 2.0890519618988037
Time taken for 1 epochs: 0.0018871128559112549 seconds
800 2.088754177093506
Time taken for 1 epochs: 0.0037400954961776733 seconds
1200 2.0887293815612793
Time taken for 1 epochs: 0.005593389868736267 seconds
1600 2.0884861946105957
Time taken for 1 epochs: 0.007446771860122681 seconds
2000 2.0891528129577637
Time taken for 1 epochs: 0.009300289154052734 seconds
2400 2.0879929065704346
Time taken for 1 epochs: 0.011153245568275452 seconds
2800 2.088449239730835
Time taken for 1 epochs: 0.013006348609924317 seconds
3200 2.0879693031311035
Time taken for 1 epochs: 0.014860434532165527 seconds
3600 2.0881006717681885
Time taken for 1 epochs: 0.016712880134582518 seconds
4000 2.087575912475586
Time taken for 1 epochs: 0.01856597661972046 seconds
4400 2.087235689163208
Time taken for 1 epochs: 0.020418978929519653 seconds
4800 2.087622880935669
Time taken for 1 epochs: 0.02227234423160553 seconds
5200 2.087576150894165
Time taken for 1 epochs: 0.02412549138069153 seconds
5600 2.0879015922546387
Time taken for 1 epochs: 0.025978831052780153 seconds
6000 2.088137626647949
Time taken for 1 epochs: 0.027831865549087523 seconds
6400 2.0875606536865234
Time taken for 1 epochs: 0.029685078263282774 seconds
6800 2.0870373249053955
Time taken for 1 epochs: 0.031538299322128295 seconds
7200 2.0867090225219727
Time taken for 1 epochs: 0.033391504883766174 seconds
7600 2.085026979446411
Time taken for 1 epochs: 0.035245080590248105 seconds
8000 2.0854732990264893
Time taken for 1 epochs: 0.03710031807422638 seconds
8400 2.0843679904937744
Time taken for 1 epochs: 0.03895375490188599 seconds
8800 2.084249258041382
Time taken for 1 epochs: 0.04080682039260864 seconds
9200 2.0851705074310303
Time taken for 1 epochs: 0.042660011649131774 seconds
9600 2.0844883918762207
Time taken for 1 epochs: 0.044512977004051206 seconds</code></pre>
</div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;"># Visualize the embedding</span></span>
<span id="cb32-2"></span>
<span id="cb32-3">plot_emb(model.emb, itos)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>&lt;AxesSubplot:&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/names_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;"># Generate names from trained model</span></span>
<span id="cb34-2"></span>
<span id="cb34-3"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb34-4">    <span class="bu" style="color: null;">print</span>(generate_name(model, itos, stoi, block_size))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>swina
miter
jakul
poshaban
nahmishsir
jaillanam
fibwahir
gurs
sakinu
ramta</code></pre>
</div>
</div>
<p>Tuning knobs</p>
<ol type="1">
<li>Embedding size</li>
<li>MLP</li>
<li>Context length</li>
</ol>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/names.html</guid>
  <pubDate>Fri, 31 Mar 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>AutoDiff in JAX and PyTorch</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/autodiff-jax-torch.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> jax.numpy <span class="im" style="color: #00769E;">as</span> jnp</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> jax</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-5"><span class="bu" style="color: null;">print</span>(torch.__version__)</span>
<span id="cb1-6"><span class="bu" style="color: null;">print</span>(jax.__version__)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>Array(1., dtype=float32, weak_type=True)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">def</span> f(x):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;">return</span> jnp.sin(x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>Array(1., dtype=float32, weak_type=True)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">z <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">0.0</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-2">torch.sin(z).backward()</span>
<span id="cb5-3"><span class="bu" style="color: null;">print</span>(jax.grad(f)(<span class="fl" style="color: #AD0000;">0.0</span>), z.grad)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>tensor(1.)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">def</span> f(x):</span>
<span id="cb7-2">    <span class="cf" style="color: #003B4F;">return</span> jnp.<span class="bu" style="color: null;">abs</span>(x)</span>
<span id="cb7-3"></span>
<span id="cb7-4"></span>
<span id="cb7-5">z1 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">0.0001</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb7-6">torch.<span class="bu" style="color: null;">abs</span>(z1).backward()</span>
<span id="cb7-7"></span>
<span id="cb7-8">z2 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.0001</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb7-9">torch.<span class="bu" style="color: null;">abs</span>(z2).backward()</span>
<span id="cb7-10"></span>
<span id="cb7-11">z3 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">0.0</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb7-12">torch.<span class="bu" style="color: null;">abs</span>(z3).backward()</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="bu" style="color: null;">print</span>(jax.grad(f)(<span class="fl" style="color: #AD0000;">0.0</span>), z1.grad, z2.grad, z3.grad)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.0 tensor(1.) tensor(-1.) tensor(0.)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Use functorch</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="im" style="color: #00769E;">import</span> functorch</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>ImportError: dlopen(/Users/nipun/miniconda3/lib/python3.9/site-packages/functorch/_C.cpython-39-darwin.so, 0x0002): Symbol not found: __ZN2at4_ops10as_strided4callERKNS_6TensorEN3c108ArrayRefINS5_6SymIntEEES8_NS5_8optionalIS7_EE
  Referenced from: &lt;12715304-4308-3E9B-A374-E4ADB3345E65&gt; /Users/nipun/miniconda3/lib/python3.9/site-packages/functorch/_C.cpython-39-darwin.so
  Expected in:     &lt;22ECBAD5-EEDD-3C80-9B5A-0564B60B6811&gt; /Users/nipun/miniconda3/lib/python3.9/site-packages/torch/lib/libtorch_cpu.dylib</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>'1.12.1'</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/autodiff-jax-torch.html</guid>
  <pubDate>Wed, 01 Mar 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Logistic Regression</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/logistic.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Create linearly separable data in 2d</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> sklearn.datasets <span class="im" style="color: #00769E;">import</span> make_classification</span>
<span id="cb1-7"></span>
<span id="cb1-8">X, y <span class="op" style="color: #5E5E5E;">=</span> make_classification(n_samples<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, n_features<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, n_redundant<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, n_informative<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb1-9">                            n_clusters_per_class<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, class_sep<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.5</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span>y, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>&lt;matplotlib.collections.PathCollection at 0x12b5ed280&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/logistic_files/figure-html/cell-2-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="92">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;">import</span> LogisticRegression</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># Without regularization</span></span>
<span id="cb3-4">clf <span class="op" style="color: #5E5E5E;">=</span> LogisticRegression(random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, penalty<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'none'</span>).fit(X, y)</span>
<span id="cb3-5">clf.coef_, clf.intercept_</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="92">
<pre><code>(array([[26.23339925, -5.01002931]]), array([1.74951957]))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Create a surface plot of the decision boundary for any theta_0, theta_1, theta_2</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;">def</span> plot_decision_boundary(theta_0, theta_1, theta_2):</span>
<span id="cb5-4">    x_lin <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb5-5">    y_lin <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span>(theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> x_lin) <span class="op" style="color: #5E5E5E;">/</span> theta_2</span>
<span id="cb5-6">    plt.plot(x_lin, y_lin, <span class="st" style="color: #20794D;">'k--'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Decision boundary ($\sigma(z) = 0.5$))'</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb5-7">    plt.xlim(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb5-8">    plt.ylim(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb5-9">    plt.xlabel(<span class="vs" style="color: #20794D;">r'$x_1$'</span>)</span>
<span id="cb5-10">    plt.ylabel(<span class="vs" style="color: #20794D;">r'$x_2$'</span>)</span>
<span id="cb5-11">    plt.title(<span class="vs" style="color: #20794D;">r'$\theta_0 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">, \theta_1 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">, \theta_2 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">$'</span>.<span class="bu" style="color: null;">format</span>(theta_0, theta_1, theta_2))</span>
<span id="cb5-12"></span>
<span id="cb5-13">    <span class="co" style="color: #5E5E5E;"># Plot the probability of class 1 contour</span></span>
<span id="cb5-14">    x1, x2 <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>), np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>))</span>
<span id="cb5-15">    z <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> np.exp(<span class="op" style="color: #5E5E5E;">-</span>(theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> x1 <span class="op" style="color: #5E5E5E;">+</span> theta_2 <span class="op" style="color: #5E5E5E;">*</span> x2)))</span>
<span id="cb5-16">    plt.contourf(x1, x2, z, linestyles<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dashed'</span>)</span>
<span id="cb5-17">    plt.colorbar()</span>
<span id="cb5-18"></span>
<span id="cb5-19">    <span class="co" style="color: #5E5E5E;"># Plot the data</span></span>
<span id="cb5-20">    plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span>y, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb5-21">    plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'best'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="93">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Create a slider widget to explore the decision boundary</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="im" style="color: #00769E;">from</span> ipywidgets <span class="im" style="color: #00769E;">import</span> interact, FloatSlider</span>
<span id="cb6-4"></span>
<span id="cb6-5">interact(plot_decision_boundary,</span>
<span id="cb6-6">            theta_0<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb6-7">            theta_1<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">40</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb6-8">            theta_2<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>))</span>
<span id="cb6-9"></span>
<span id="cb6-10"></span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"445ee1832c2c480cab355ed288df639a","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="93">
<pre><code>&lt;function __main__.plot_decision_boundary(theta_0, theta_1, theta_2)&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="99">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Create a 3d plot of the decision boundary for any theta_0, theta_1, theta_2</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="im" style="color: #00769E;">from</span> mpl_toolkits.mplot3d <span class="im" style="color: #00769E;">import</span> Axes3D</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;">def</span> plot_decision_boundary_3d(theta_0, theta_1, theta_2, azim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>, elev<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>):</span>
<span id="cb8-6">    fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb8-7">    ax <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">111</span>, projection<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'3d'</span>)</span>
<span id="cb8-8">    x_lin <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb8-9">    y_lin <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb8-10">    X_g, Y_g <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(x_lin, y_lin)</span>
<span id="cb8-11">    Z_g <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span>(theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> X_g <span class="op" style="color: #5E5E5E;">+</span> theta_2 <span class="op" style="color: #5E5E5E;">*</span> Y_g)</span>
<span id="cb8-12">    <span class="co" style="color: #5E5E5E;">#ax.plot_surface(X_g, Y_g, Z_g, alpha=0.2)</span></span>
<span id="cb8-13">    ax.set_xlabel(<span class="vs" style="color: #20794D;">r'$x_1$'</span>)</span>
<span id="cb8-14">    ax.set_ylabel(<span class="vs" style="color: #20794D;">r'$x_2$'</span>)</span>
<span id="cb8-15">    ax.set_zlabel(<span class="vs" style="color: #20794D;">r'$x_3$'</span>)</span>
<span id="cb8-16">    ax.set_title(<span class="vs" style="color: #20794D;">r'$\theta_0 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">, \theta_1 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">, \theta_2 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">$'</span>.<span class="bu" style="color: null;">format</span>(theta_0, theta_1, theta_2))</span>
<span id="cb8-17">    </span>
<span id="cb8-18">    <span class="co" style="color: #5E5E5E;"># Scatter plot of data (class 1 is Z = 1, class 0 is Z = 0)</span></span>
<span id="cb8-19">    ax.scatter(X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>], X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">1</span>, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'b'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb8-20">    ax.scatter(X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">0</span>, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb8-21"></span>
<span id="cb8-22">    <span class="co" style="color: #5E5E5E;"># Plot the 3d sigmoid function</span></span>
<span id="cb8-23">    x1, x2 <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>), np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>))</span>
<span id="cb8-24">    z <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> np.exp(<span class="op" style="color: #5E5E5E;">-</span>(theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> x1 <span class="op" style="color: #5E5E5E;">+</span> theta_2 <span class="op" style="color: #5E5E5E;">*</span> x2)))</span>
<span id="cb8-25">    ax.plot_surface(x1, x2, z, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'green'</span>)</span>
<span id="cb8-26">    </span>
<span id="cb8-27">    <span class="co" style="color: #5E5E5E;"># Rotate the plot so that the sigmoid function is visible</span></span>
<span id="cb8-28">    ax.view_init(azim, elev)</span>
<span id="cb8-29"></span>
<span id="cb8-30">    <span class="co" style="color: #5E5E5E;"># Plot the decision plane</span></span>
<span id="cb8-31">    ax.plot_surface(X_g, Y_g, Z_g, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb8-32"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="100">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Create a slider widget to explore the decision boundary</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="im" style="color: #00769E;">from</span> ipywidgets <span class="im" style="color: #00769E;">import</span> interact, FloatSlider</span>
<span id="cb9-4"></span>
<span id="cb9-5">interact(plot_decision_boundary_3d,</span>
<span id="cb9-6">            theta_0<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb9-7">            theta_1<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">40</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb9-8">            theta_2<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb9-9">            azim<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">180</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">180</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>),</span>
<span id="cb9-10">            elev<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">180</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">180</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>))</span>
<span id="cb9-11"></span>
<span id="cb9-12"></span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1337be77d0ab4a688da0b38dcd764071","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="100">
<pre><code>&lt;function __main__.plot_decision_boundary_3d(theta_0, theta_1, theta_2, azim=30, elev=30)&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="104">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Create two 3d plot any theta_0, theta_1, theta_2</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;"># First showing the decision boundary</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;"># Second showing the probability of class 1</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="im" style="color: #00769E;">from</span> mpl_toolkits.mplot3d <span class="im" style="color: #00769E;">import</span> Axes3D</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="kw" style="color: #003B4F;">def</span> plot_decision_boundary_3d(theta_0, theta_1, theta_2, azim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>, elev<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>):</span>
<span id="cb11-8">    fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb11-9">    ax1 <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">121</span>, projection<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'3d'</span>)</span>
<span id="cb11-10">    ax2 <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">122</span>, projection<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'3d'</span>)</span>
<span id="cb11-11"></span>
<span id="cb11-12">    x_lin <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb11-13">    y_lin <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb11-14">    X_g, Y_g <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(x_lin, y_lin)</span>
<span id="cb11-15">    Z_g <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span>(theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> X_g <span class="op" style="color: #5E5E5E;">+</span> theta_2 <span class="op" style="color: #5E5E5E;">*</span> Y_g)</span>
<span id="cb11-16">    <span class="co" style="color: #5E5E5E;">#ax.plot_surface(X_g, Y_g, Z_g, alpha=0.2)</span></span>
<span id="cb11-17">    ax1.set_xlabel(<span class="vs" style="color: #20794D;">r'$x_1$'</span>)</span>
<span id="cb11-18">    ax1.set_ylabel(<span class="vs" style="color: #20794D;">r'$x_2$'</span>)</span>
<span id="cb11-19">    ax1.set_zlabel(<span class="vs" style="color: #20794D;">r'$x_3$'</span>)</span>
<span id="cb11-20">    ax1.set_title(<span class="vs" style="color: #20794D;">r'$\theta_0 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">, \theta_1 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">, \theta_2 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">$'</span>.<span class="bu" style="color: null;">format</span>(theta_0, theta_1, theta_2))</span>
<span id="cb11-21"></span>
<span id="cb11-22">    <span class="co" style="color: #5E5E5E;"># Scatter plot of data (class 1 is Z = 1, class 0 is Z = 0)</span></span>
<span id="cb11-23">    ax1.scatter(X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>], X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">1</span>, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'b'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb11-24">    ax1.scatter(X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">0</span>, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb11-25"></span>
<span id="cb11-26">    <span class="co" style="color: #5E5E5E;"># Plot the 3d sigmoid function</span></span>
<span id="cb11-27">    x1, x2 <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>), np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>))</span>
<span id="cb11-28">    z <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> np.exp(<span class="op" style="color: #5E5E5E;">-</span>(theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> x1 <span class="op" style="color: #5E5E5E;">+</span> theta_2 <span class="op" style="color: #5E5E5E;">*</span> x2)))</span>
<span id="cb11-29"></span>
<span id="cb11-30">    <span class="co" style="color: #5E5E5E;"># Plot the decision plane</span></span>
<span id="cb11-31">    ax1.plot_surface(X_g, Y_g, Z_g, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb11-32"></span>
<span id="cb11-33">    <span class="co" style="color: #5E5E5E;"># Plot the probability of class 1</span></span>
<span id="cb11-34">    ax2.plot_surface(x1, x2, z, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span>)</span>
<span id="cb11-35">    ax2.scatter(X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>], X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">1</span>, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'b'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb11-36">    ax2.scatter(X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">0</span>, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb11-37"></span>
<span id="cb11-38"></span>
<span id="cb11-39">     <span class="co" style="color: #5E5E5E;"># Rotate the plot so that the sigmoid function is visible</span></span>
<span id="cb11-40">    ax1.view_init(azim, elev)</span>
<span id="cb11-41">    ax2.view_init(azim, elev)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="105">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Create a slider widget to explore the decision boundary</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="im" style="color: #00769E;">from</span> ipywidgets <span class="im" style="color: #00769E;">import</span> interact, FloatSlider</span>
<span id="cb12-4"></span>
<span id="cb12-5">interact(plot_decision_boundary_3d,</span>
<span id="cb12-6">            theta_0<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb12-7">            theta_1<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">40</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb12-8">            theta_2<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb12-9">            azim<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">180</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">180</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>),</span>
<span id="cb12-10">            elev<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">180</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">180</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>))</span>
<span id="cb12-11"></span>
<span id="cb12-12"></span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"28debcc48c7d4b7b8e635ae3bb8d740f","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="105">
<pre><code>&lt;function __main__.plot_decision_boundary_3d(theta_0, theta_1, theta_2, azim=30, elev=30)&gt;</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/logistic.html</guid>
  <pubDate>Tue, 28 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Neural Network</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/nn.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> torch.nn <span class="im" style="color: #00769E;">as</span> nn</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> torch.optim <span class="im" style="color: #00769E;">as</span> optim</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> torch.utils.data <span class="im" style="color: #00769E;">import</span> DataLoader, TensorDataset</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;"># Set random seed for reproducibility</span></span>
<span id="cb1-15">torch.manual_seed(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># Torch version</span></span>
<span id="cb1-18">torch.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>'2.0.0+cu118'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># MNIST dataset</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="im" style="color: #00769E;">from</span> torchvision <span class="im" style="color: #00769E;">import</span> datasets, transforms</span>
<span id="cb3-4"><span class="im" style="color: #00769E;">import</span> torchvision</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># Split MNIST into train, validation, and test sets</span></span>
<span id="cb3-7">train_data <span class="op" style="color: #5E5E5E;">=</span> datasets.MNIST(root<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'data'</span>, train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, download<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, transform<span class="op" style="color: #5E5E5E;">=</span>transforms.ToTensor())</span>
<span id="cb3-8">test_data <span class="op" style="color: #5E5E5E;">=</span> datasets.MNIST(root<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'data'</span>, train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, download<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, transform<span class="op" style="color: #5E5E5E;">=</span>transforms.ToTensor())</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;"># Split train_data into train and validation sets</span></span>
<span id="cb3-11">val_data <span class="op" style="color: #5E5E5E;">=</span> torch.utils.data.Subset(train_data, <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">50000</span>, <span class="dv" style="color: #AD0000;">51000</span>))</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;"># Reduce the size of the training set to 5,000</span></span>
<span id="cb3-14">train_data <span class="op" style="color: #5E5E5E;">=</span> torch.utils.data.Subset(train_data, <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">5000</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Create data loaders</span></span>
<span id="cb4-2">batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">64</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">train_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(train_data, batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb4-5">val_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(val_data, batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb4-6">test_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(test_data, batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">img, target <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(train_loader))</span>
<span id="cb5-2"><span class="bu" style="color: null;">print</span>(img.shape)</span>
<span id="cb5-3"><span class="bu" style="color: null;">print</span>(target.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([64, 1, 28, 28])
torch.Size([64])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">plt.imshow(img[<span class="dv" style="color: #AD0000;">0</span>].numpy().squeeze(), cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray_r'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/nn_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">target</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>tensor([3, 4, 1, 8, 9, 3, 9, 8, 4, 8, 3, 0, 0, 7, 7, 1, 6, 6, 9, 7, 4, 3, 3, 4,
        5, 7, 3, 2, 8, 4, 8, 2, 8, 3, 1, 4, 2, 1, 4, 8, 5, 3, 5, 1, 8, 7, 3, 7,
        7, 2, 0, 3, 1, 3, 7, 0, 7, 1, 7, 6, 4, 1, 8, 0])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Store the labels and Images in TensorBoard</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="im" style="color: #00769E;">from</span> torch.utils.tensorboard <span class="im" style="color: #00769E;">import</span> SummaryWriter</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;"># Clean up any old runs</span></span>
<span id="cb10-6"><span class="op" style="color: #5E5E5E;">!</span>rm <span class="op" style="color: #5E5E5E;">-</span>rf runs</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;"># Default `log_dir` is "runs"</span></span>
<span id="cb10-9">writer <span class="op" style="color: #5E5E5E;">=</span> SummaryWriter(<span class="st" style="color: #20794D;">'runs/mnist'</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;"># Add images to tensorboard in the form of a grid in batches of 64</span></span>
<span id="cb10-12">dataiter <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">iter</span>(DataLoader(train_data, batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;"># Add a slider in tensorboard to iterate through the batches</span></span>
<span id="cb10-15"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb10-16">    images, labels <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(dataiter)</span>
<span id="cb10-17">    images <span class="op" style="color: #5E5E5E;">=</span> torchvision.utils.make_grid(images)</span>
<span id="cb10-18">    <span class="co" style="color: #5E5E5E;"># Add images with labels to tensorboard</span></span>
<span id="cb10-19">    writer.add_image(<span class="ss" style="color: #20794D;">f'mnist_images_</span><span class="sc" style="color: #5E5E5E;">{</span>i<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>, images, global_step<span class="op" style="color: #5E5E5E;">=</span>i)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Define model for 10-class MNIST classification</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;">class</span> MNISTClassifier(nn.Module):</span>
<span id="cb11-4">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb11-5">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb11-6">        <span class="va" style="color: #111111;">self</span>.fc1 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">784</span>, <span class="dv" style="color: #AD0000;">64</span>)</span>
<span id="cb11-7">        <span class="va" style="color: #111111;">self</span>.fc2 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">64</span>, <span class="dv" style="color: #AD0000;">32</span>)</span>
<span id="cb11-8">        <span class="va" style="color: #111111;">self</span>.fc3 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb11-9">        </span>
<span id="cb11-10">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb11-11">        z1 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fc1(x)</span>
<span id="cb11-12">        a1 <span class="op" style="color: #5E5E5E;">=</span> F.relu(z1)</span>
<span id="cb11-13">        z2 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fc2(a1)</span>
<span id="cb11-14">        a2 <span class="op" style="color: #5E5E5E;">=</span> F.relu(z2)</span>
<span id="cb11-15">        z3 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fc3(a2) <span class="co" style="color: #5E5E5E;"># logits</span></span>
<span id="cb11-16">        <span class="cf" style="color: #003B4F;">return</span> z3</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">model <span class="op" style="color: #5E5E5E;">=</span> MNISTClassifier()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># Forward pass through the model</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"></span>
<span id="cb13-4"></span>
<span id="cb13-5">saved_img, saved_target <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(train_loader))</span>
<span id="cb13-6">saved_img <span class="op" style="color: #5E5E5E;">=</span> saved_img.view(saved_img.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb13-7"><span class="bu" style="color: null;">print</span>(saved_img.shape)</span>
<span id="cb13-8"></span>
<span id="cb13-9">plt.imshow(saved_img[<span class="dv" style="color: #AD0000;">0</span>].reshape(<span class="dv" style="color: #AD0000;">28</span>, <span class="dv" style="color: #AD0000;">28</span>), cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray_r'</span>)</span>
<span id="cb13-10">plt.title(saved_target[<span class="dv" style="color: #AD0000;">0</span>].item())</span>
<span id="cb13-11"></span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb13-14">    out <span class="op" style="color: #5E5E5E;">=</span> model(saved_img.view(saved_img.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb13-15"></span>
<span id="cb13-16"></span>
<span id="cb13-17"></span>
<span id="cb13-18"><span class="bu" style="color: null;">print</span>(out[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb13-19"></span>
<span id="cb13-20"><span class="co" style="color: #5E5E5E;"># Softmax</span></span>
<span id="cb13-21">probas <span class="op" style="color: #5E5E5E;">=</span> F.softmax(out, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb13-22"><span class="bu" style="color: null;">print</span>(probas[<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([64, 784])
tensor([-0.1859, -0.1648,  0.0156,  0.0309,  0.1785, -0.1567, -0.0472,  0.1143,
        -0.0400, -0.0006])
tensor([0.0846, 0.0864, 0.1035, 0.1051, 0.1218, 0.0871, 0.0972, 0.1143, 0.0979,
        0.1019])</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/nn_files/figure-html/cell-11-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">probas[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>tensor([[0.0846, 0.0864, 0.1035, 0.1051, 0.1218, 0.0871, 0.0972, 0.1143, 0.0979,
         0.1019]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Predicted label before training</span></span>
<span id="cb17-2"></span>
<span id="cb17-3">pred <span class="op" style="color: #5E5E5E;">=</span> torch.argmax(probas[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">1</span>], dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).item()</span>
<span id="cb17-4"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Prediction:  </span><span class="sc" style="color: #5E5E5E;">{</span>pred<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, True label: </span><span class="sc" style="color: #5E5E5E;">{</span>saved_target[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">.</span>item()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Prediction:  4, True label: 2</code></pre>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">model.fc1.weight.shape, model.fc1.bias.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>(torch.Size([64, 784]), torch.Size([64]))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Number of parameters in fc1</span></span>
<span id="cb21-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"fc1"</span>, model.fc1.weight.numel() <span class="op" style="color: #5E5E5E;">+</span> model.fc1.bias.numel())</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;"># Number of parameters in fc2</span></span>
<span id="cb21-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"fc2"</span>, model.fc2.weight.numel() <span class="op" style="color: #5E5E5E;">+</span> model.fc2.bias.numel())</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;"># Number of parameters in fc3</span></span>
<span id="cb21-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"fc3"</span>, model.fc3.weight.numel() <span class="op" style="color: #5E5E5E;">+</span> model.fc3.bias.numel())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>fc1 50240
fc2 2080
fc3 330</code></pre>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># Get total number of parameters</span></span>
<span id="cb23-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Total number of parameters:"</span>, <span class="bu" style="color: null;">sum</span>(p.numel() <span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> model.parameters()))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Total number of parameters: 52650</code></pre>
</div>
</div>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="bu" style="color: null;">len</span>(train_loader)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>79</code></pre>
</div>
</div>
<div class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Forward pass through the model and writing to tensorboard</span></span>
<span id="cb27-2"></span>
<span id="cb27-3">lr <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.001</span></span>
<span id="cb27-4">optimizer <span class="op" style="color: #5E5E5E;">=</span> optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;">=</span>lr)</span>
<span id="cb27-5">criterion <span class="op" style="color: #5E5E5E;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb27-6"></span>
<span id="cb27-7">num_epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb27-8"><span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(num_epochs):</span>
<span id="cb27-9">    <span class="cf" style="color: #003B4F;">for</span> batch_idx, (data_test, target) <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(train_loader):</span>
<span id="cb27-10">        <span class="co" style="color: #5E5E5E;"># Reshape data to input to the network</span></span>
<span id="cb27-11">        data_test <span class="op" style="color: #5E5E5E;">=</span> data_test.view(data_test.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb27-12">        <span class="co" style="color: #5E5E5E;"># Forward pass</span></span>
<span id="cb27-13">        output <span class="op" style="color: #5E5E5E;">=</span> model(data_test)</span>
<span id="cb27-14">        loss <span class="op" style="color: #5E5E5E;">=</span> criterion(output, target)</span>
<span id="cb27-15">        <span class="co" style="color: #5E5E5E;"># Backward and optimize</span></span>
<span id="cb27-16">        optimizer.zero_grad()</span>
<span id="cb27-17">        loss.backward()</span>
<span id="cb27-18">        optimizer.step()</span>
<span id="cb27-19"></span>
<span id="cb27-20">        iteration_num <span class="op" style="color: #5E5E5E;">=</span> epoch <span class="op" style="color: #5E5E5E;">*</span> <span class="bu" style="color: null;">len</span>(train_loader) <span class="op" style="color: #5E5E5E;">+</span> batch_idx</span>
<span id="cb27-21">        </span>
<span id="cb27-22">        <span class="co" style="color: #5E5E5E;"># Write to tensorboard</span></span>
<span id="cb27-23">        writer.add_scalar(<span class="st" style="color: #20794D;">'Loss/train'</span>, loss.item(), iteration_num)</span>
<span id="cb27-24">        writer.add_scalar(<span class="st" style="color: #20794D;">'Accuracy/train'</span>, (output.argmax(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">==</span> target).<span class="bu" style="color: null;">float</span>().mean(), iteration_num)</span>
<span id="cb27-25"></span>
<span id="cb27-26">        <span class="co" style="color: #5E5E5E;"># Find test loss and accuracy</span></span>
<span id="cb27-27">        runing_loss <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb27-28">        running_acc <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb27-29">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb27-30">            <span class="cf" style="color: #003B4F;">for</span> data_test, target_test <span class="kw" style="color: #003B4F;">in</span> val_loader:</span>
<span id="cb27-31">                data_test <span class="op" style="color: #5E5E5E;">=</span> data_test.view(data_test.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb27-32">                output_test <span class="op" style="color: #5E5E5E;">=</span> model(data_test)</span>
<span id="cb27-33">                loss_test <span class="op" style="color: #5E5E5E;">=</span> criterion(output_test, target_test)</span>
<span id="cb27-34">                runing_loss <span class="op" style="color: #5E5E5E;">+=</span> loss_test.item()</span>
<span id="cb27-35">                running_acc <span class="op" style="color: #5E5E5E;">+=</span> (output_test.argmax(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">==</span> target_test).<span class="bu" style="color: null;">float</span>().mean()</span>
<span id="cb27-36">        writer.add_scalar(<span class="st" style="color: #20794D;">'Loss/validation'</span>, runing_loss <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(val_loader), iteration_num)</span>
<span id="cb27-37">        writer.add_scalar(<span class="st" style="color: #20794D;">'Accuracy/validation'</span>, running_acc <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(val_loader), iteration_num)</span>
<span id="cb27-38"></span>
<span id="cb27-39">        <span class="cf" style="color: #003B4F;">if</span> batch_idx <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb27-40">            <span class="bu" style="color: null;">print</span> (<span class="ss" style="color: #20794D;">f'Epoch [</span><span class="sc" style="color: #5E5E5E;">{</span>epoch<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">], Step [</span><span class="sc" style="color: #5E5E5E;">{</span>batch_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(train_loader)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">], Loss: </span><span class="sc" style="color: #5E5E5E;">{</span>loss<span class="sc" style="color: #5E5E5E;">.</span>item()<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/1], Step [0/79], Loss: 2.3027</code></pre>
</div>
</div>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Prediction on the saved image</span></span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb29-4">    out <span class="op" style="color: #5E5E5E;">=</span> model(saved_img[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb29-5">    probas <span class="op" style="color: #5E5E5E;">=</span> F.softmax(out, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb29-6">    pred <span class="op" style="color: #5E5E5E;">=</span> torch.argmax(probas, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).item()</span>
<span id="cb29-7">    <span class="bu" style="color: null;">print</span>(pred, saved_target[<span class="dv" style="color: #AD0000;">0</span>].item())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 1</code></pre>
</div>
</div>
<div class="cell" data-execution_count="98">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Create a HParam dictionary for batch size and learning rate for tensorboard</span></span>
<span id="cb31-2"></span>
<span id="cb31-3">b_sizes <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">64</span>, <span class="dv" style="color: #AD0000;">512</span>]</span>
<span id="cb31-4">lrs <span class="op" style="color: #5E5E5E;">=</span> [<span class="fl" style="color: #AD0000;">0.001</span>, <span class="fl" style="color: #AD0000;">0.01</span>, <span class="fl" style="color: #AD0000;">0.1</span>]</span>
<span id="cb31-5"></span>
<span id="cb31-6"></span>
<span id="cb31-7">num_epochs  <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb31-8"><span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(num_epochs):</span>
<span id="cb31-9">    <span class="cf" style="color: #003B4F;">for</span> b_size <span class="kw" style="color: #003B4F;">in</span> b_sizes:</span>
<span id="cb31-10">        train_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(train_data, batch_size<span class="op" style="color: #5E5E5E;">=</span>b_size, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb31-11">        model <span class="op" style="color: #5E5E5E;">=</span> MNISTClassifier()</span>
<span id="cb31-12">        <span class="cf" style="color: #003B4F;">for</span> lr <span class="kw" style="color: #003B4F;">in</span> lrs:</span>
<span id="cb31-13">            <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Batch size: </span><span class="sc" style="color: #5E5E5E;">{</span>b_size<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, Learning rate: </span><span class="sc" style="color: #5E5E5E;">{</span>lr<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb31-14">            optimizer <span class="op" style="color: #5E5E5E;">=</span> optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;">=</span>lr)</span>
<span id="cb31-15">            criterion <span class="op" style="color: #5E5E5E;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb31-16">            <span class="cf" style="color: #003B4F;">for</span> batch_idx, (data, target) <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(train_loader):</span>
<span id="cb31-17">                <span class="co" style="color: #5E5E5E;"># Reshape data to input to the network</span></span>
<span id="cb31-18">                data <span class="op" style="color: #5E5E5E;">=</span> data.view(data.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb31-19">                <span class="co" style="color: #5E5E5E;"># Forward pass</span></span>
<span id="cb31-20">                output <span class="op" style="color: #5E5E5E;">=</span> model(data)</span>
<span id="cb31-21">                loss <span class="op" style="color: #5E5E5E;">=</span> criterion(output, target)</span>
<span id="cb31-22">                <span class="co" style="color: #5E5E5E;"># Backward and optimize</span></span>
<span id="cb31-23">                optimizer.zero_grad()</span>
<span id="cb31-24">                loss.backward()</span>
<span id="cb31-25">                optimizer.step()</span>
<span id="cb31-26">                </span>
<span id="cb31-27"></span>
<span id="cb31-28">                <span class="co" style="color: #5E5E5E;"># Write loss as scalar to Tensorboard and hyperparameters to HParams</span></span>
<span id="cb31-29">                writer.add_scalar(<span class="st" style="color: #20794D;">'training loss'</span>,</span>
<span id="cb31-30">                                loss.item(),</span>
<span id="cb31-31">                                epoch <span class="op" style="color: #5E5E5E;">*</span> <span class="bu" style="color: null;">len</span>(train_loader) <span class="op" style="color: #5E5E5E;">+</span> batch_idx)</span>
<span id="cb31-32">                writer.add_hparams({<span class="st" style="color: #20794D;">'lr'</span>: lr, <span class="st" style="color: #20794D;">'bsize'</span>: b_size},</span>
<span id="cb31-33">                                { <span class="st" style="color: #20794D;">'hparam/loss'</span>: loss.item()})</span>
<span id="cb31-34">                </span>
<span id="cb31-35"></span>
<span id="cb31-36">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Batch size: 32, Learning rate: 0.001
Batch size: 32, Learning rate: 0.01
Batch size: 32, Learning rate: 0.1
Batch size: 64, Learning rate: 0.001
Batch size: 64, Learning rate: 0.01
Batch size: 64, Learning rate: 0.1
Batch size: 512, Learning rate: 0.001
Batch size: 512, Learning rate: 0.01
Batch size: 512, Learning rate: 0.1</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/nn.html</guid>
  <pubDate>Tue, 28 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Gradient Descent</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/gd.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> jax.numpy <span class="im" style="color: #00769E;">as</span> jnp</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> jax <span class="im" style="color: #00769E;">import</span> random, jit, vmap, grad, jacfwd, jacrev, hessian, value_and_grad</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Simple 2D quadratic function</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;">def</span> f(theta_0, theta_1):</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;">return</span> theta_0<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> theta_1<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="222">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Plot surface and contour plots for f using jax.vmap</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;">def</span> create_plot(f):</span>
<span id="cb3-3">    theta_0 <span class="op" style="color: #5E5E5E;">=</span> jnp.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb3-4">    theta_1 <span class="op" style="color: #5E5E5E;">=</span> jnp.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb3-5">    theta_0, theta_1 <span class="op" style="color: #5E5E5E;">=</span> jnp.meshgrid(theta_0, theta_1)</span>
<span id="cb3-6">    f_vmap <span class="op" style="color: #5E5E5E;">=</span> jnp.vectorize(f, signature<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'(),()-&gt;()'</span>)</span>
<span id="cb3-7">    f_vals <span class="op" style="color: #5E5E5E;">=</span> f_vmap(theta_0, theta_1)</span>
<span id="cb3-8"></span>
<span id="cb3-9">    <span class="co" style="color: #5E5E5E;"># Create a figure with 2 subplots (3d surface and 2d contour)</span></span>
<span id="cb3-10">    fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb3-11">    ax1 <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">121</span>, projection<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'3d'</span>)</span>
<span id="cb3-12">    ax2 <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">122</span>)</span>
<span id="cb3-13"></span>
<span id="cb3-14">    <span class="co" style="color: #5E5E5E;"># Plot surface and contour plots</span></span>
<span id="cb3-15">    temp <span class="op" style="color: #5E5E5E;">=</span> ax1.plot_surface(theta_0, theta_1, f_vals, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'viridis'</span>)</span>
<span id="cb3-16"></span>
<span id="cb3-17">    <span class="co" style="color: #5E5E5E;"># Filled contour plot and marked level set values using clabel</span></span>
<span id="cb3-18">    <span class="co" style="color: #5E5E5E;"># Set 20 levels between min and max of f_vals</span></span>
<span id="cb3-19">    levels <span class="op" style="color: #5E5E5E;">=</span> jnp.linspace(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="bu" style="color: null;">int</span>(jnp.<span class="bu" style="color: null;">max</span>(f_vals))<span class="op" style="color: #5E5E5E;">+</span><span class="fl" style="color: #AD0000;">0.5</span>, <span class="dv" style="color: #AD0000;">11</span>)</span>
<span id="cb3-20"></span>
<span id="cb3-21">    contours <span class="op" style="color: #5E5E5E;">=</span> ax2.contour(theta_0, theta_1, f_vals, levels<span class="op" style="color: #5E5E5E;">=</span>levels, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'viridis'</span>)</span>
<span id="cb3-22">    ax2.clabel(contours, inline<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>)</span>
<span id="cb3-23"></span>
<span id="cb3-24">    <span class="co" style="color: #5E5E5E;"># Fill using imshow</span></span>
<span id="cb3-25">    ax2.imshow(f_vals, extent<span class="op" style="color: #5E5E5E;">=</span>[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>], origin<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lower'</span>, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'viridis'</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb3-26">  </span>
<span id="cb3-27">    <span class="co" style="color: #5E5E5E;"># Find the global minimum of f using jax.scipy.optimize.minimize</span></span>
<span id="cb3-28">    <span class="im" style="color: #00769E;">from</span> jax.scipy.optimize <span class="im" style="color: #00769E;">import</span> minimize</span>
<span id="cb3-29">    <span class="kw" style="color: #003B4F;">def</span> f_min(theta):</span>
<span id="cb3-30">        <span class="cf" style="color: #003B4F;">return</span> f(theta[<span class="dv" style="color: #AD0000;">0</span>], theta[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb3-31">    res <span class="op" style="color: #5E5E5E;">=</span> minimize(f_min, jnp.array([<span class="fl" style="color: #AD0000;">0.</span>, <span class="fl" style="color: #AD0000;">0.</span>]), method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'BFGS'</span>)</span>
<span id="cb3-32">    theta_min <span class="op" style="color: #5E5E5E;">=</span> res.x</span>
<span id="cb3-33">    f_min <span class="op" style="color: #5E5E5E;">=</span> res.fun</span>
<span id="cb3-34">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Global minimum: </span><span class="sc" style="color: #5E5E5E;">{</span>f_min<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> at </span><span class="sc" style="color: #5E5E5E;">{</span>theta_min<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb3-35">    <span class="co" style="color: #5E5E5E;"># Plot the global minimum</span></span>
<span id="cb3-36">    ax2.scatter(theta_min[<span class="dv" style="color: #AD0000;">0</span>], theta_min[<span class="dv" style="color: #AD0000;">1</span>], marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'x'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb3-37"></span>
<span id="cb3-38">    </span>
<span id="cb3-39"></span>
<span id="cb3-40">    ax2.set_aspect(<span class="st" style="color: #20794D;">'equal'</span>)</span>
<span id="cb3-41"></span>
<span id="cb3-42">    <span class="co" style="color: #5E5E5E;"># Add labels</span></span>
<span id="cb3-43">    ax1.set_xlabel(<span class="vs" style="color: #20794D;">r'$\theta_0$'</span>)</span>
<span id="cb3-44">    ax1.set_ylabel(<span class="vs" style="color: #20794D;">r'$\theta_1$'</span>)</span>
<span id="cb3-45">    ax1.set_zlabel(<span class="vs" style="color: #20794D;">r'$f(\theta_0, \theta_1)$'</span>)</span>
<span id="cb3-46">    ax2.set_xlabel(<span class="vs" style="color: #20794D;">r'$\theta_0$'</span>)</span>
<span id="cb3-47">    ax2.set_ylabel(<span class="vs" style="color: #20794D;">r'$\theta_1$'</span>)</span>
<span id="cb3-48"></span>
<span id="cb3-49">    <span class="co" style="color: #5E5E5E;"># Add colorbar</span></span>
<span id="cb3-50">    fig.colorbar(temp, ax<span class="op" style="color: #5E5E5E;">=</span>ax1, shrink<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, aspect<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb3-51"></span>
<span id="cb3-52">    <span class="co" style="color: #5E5E5E;"># Tight layout</span></span>
<span id="cb3-53">    plt.tight_layout()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="223">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">create_plot(f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Global minimum: 0.0 at [0. 0.]</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/gd_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="224">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Gradient of f at a given point</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;">def</span> grad_f(theta_0, theta_1):</span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;">return</span> grad(f, argnums<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>))(theta_0, theta_1)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="225">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">grad_f(<span class="fl" style="color: #AD0000;">2.</span>, <span class="fl" style="color: #AD0000;">1.</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="225">
<pre><code>(Array(4., dtype=float32, weak_type=True),
 Array(2., dtype=float32, weak_type=True))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="226">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">theta <span class="op" style="color: #5E5E5E;">=</span> jnp.array([<span class="fl" style="color: #AD0000;">2.</span>, <span class="fl" style="color: #AD0000;">1.</span>])</span>
<span id="cb9-2">theta</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="226">
<pre><code>Array([2., 1.], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="227">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">f(<span class="op" style="color: #5E5E5E;">*</span>theta)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="227">
<pre><code>Array(5., dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="228">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">jnp.array(grad_f(<span class="op" style="color: #5E5E5E;">*</span>theta))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="228">
<pre><code>Array([4., 2.], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="229">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">lr <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1</span></span>
<span id="cb15-2">theta <span class="op" style="color: #5E5E5E;">=</span> theta<span class="op" style="color: #5E5E5E;">-</span> lr <span class="op" style="color: #5E5E5E;">*</span> jnp.array(grad_f(<span class="op" style="color: #5E5E5E;">*</span>theta))</span>
<span id="cb15-3">theta</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="229">
<pre><code>Array([1.6, 0.8], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="230">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">f(<span class="op" style="color: #5E5E5E;">*</span>theta)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="230">
<pre><code>Array(3.2000003, dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="231">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Gradient descent loop</span></span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;"># Initial parameters</span></span>
<span id="cb19-4">theta <span class="op" style="color: #5E5E5E;">=</span> jnp.array([<span class="fl" style="color: #AD0000;">2.</span>, <span class="fl" style="color: #AD0000;">1.</span>])</span>
<span id="cb19-5"></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;"># Store parameters and function values for plotting</span></span>
<span id="cb19-7">theta_vals <span class="op" style="color: #5E5E5E;">=</span> [theta]</span>
<span id="cb19-8">f_vals <span class="op" style="color: #5E5E5E;">=</span> [f(<span class="op" style="color: #5E5E5E;">*</span>theta)]</span>
<span id="cb19-9"></span>
<span id="cb19-10"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb19-11">    theta <span class="op" style="color: #5E5E5E;">=</span> theta <span class="op" style="color: #5E5E5E;">-</span> lr <span class="op" style="color: #5E5E5E;">*</span> jnp.array(grad_f(<span class="op" style="color: #5E5E5E;">*</span>theta))</span>
<span id="cb19-12">    theta_vals.append(theta)</span>
<span id="cb19-13">    f_vals.append(f(<span class="op" style="color: #5E5E5E;">*</span>theta))</span>
<span id="cb19-14">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Iteration </span><span class="sc" style="color: #5E5E5E;">{</span>i<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: theta = </span><span class="sc" style="color: #5E5E5E;">{</span>theta<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, f = </span><span class="sc" style="color: #5E5E5E;">{</span>f(<span class="op" style="color: #5E5E5E;">*</span>theta)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb19-15"></span>
<span id="cb19-16">theta_vals <span class="op" style="color: #5E5E5E;">=</span> jnp.array(theta_vals)</span>
<span id="cb19-17">f_vals <span class="op" style="color: #5E5E5E;">=</span> jnp.array(f_vals)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Iteration 0: theta = [1.6 0.8], f = 3.200000286102295
Iteration 1: theta = [1.28 0.64], f = 2.047999858856201
Iteration 2: theta = [1.0239999  0.51199996], f = 1.3107198476791382
Iteration 3: theta = [0.8191999  0.40959996], f = 0.8388606309890747
Iteration 4: theta = [0.6553599  0.32767996], f = 0.5368707776069641
Iteration 5: theta = [0.52428794 0.26214397], f = 0.34359729290008545
Iteration 6: theta = [0.41943035 0.20971517], f = 0.21990226209163666
Iteration 7: theta = [0.3355443  0.16777214], f = 0.14073745906352997
Iteration 8: theta = [0.26843542 0.13421771], f = 0.09007196873426437
Iteration 9: theta = [0.21474834 0.10737417], f = 0.05764605849981308</code></pre>
</div>
</div>
<div class="cell" data-execution_count="232">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Plot the cost vs iterations</span></span>
<span id="cb21-2">plt.plot(f_vals)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/gd_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="233">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># Simple dataset for linear regression</span></span>
<span id="cb22-2"></span>
<span id="cb22-3">X <span class="op" style="color: #5E5E5E;">=</span> jnp.array([[<span class="fl" style="color: #AD0000;">1.</span>], [<span class="fl" style="color: #AD0000;">2.</span>], [<span class="fl" style="color: #AD0000;">3.</span>]])</span>
<span id="cb22-4">y <span class="op" style="color: #5E5E5E;">=</span> jnp.array([<span class="fl" style="color: #AD0000;">1.</span>, <span class="fl" style="color: #AD0000;">2.2</span>, <span class="fl" style="color: #AD0000;">2.8</span>])</span>
<span id="cb22-5"></span>
<span id="cb22-6"><span class="im" style="color: #00769E;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;">import</span> LinearRegression</span>
<span id="cb22-7">lr <span class="op" style="color: #5E5E5E;">=</span> LinearRegression()</span>
<span id="cb22-8">lr.fit(X, y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="233">
<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-5" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-5" type="checkbox" checked=""><label for="sk-estimator-id-5" class="sk-toggleable__label sk-toggleable__label-arrow">LinearRegression</label><div class="sk-toggleable__content"><pre>LinearRegression()</pre></div></div></div></div></div>
</div>
</div>
<div class="cell" data-execution_count="234">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">lr.coef_, lr.intercept_</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="234">
<pre><code>(array([0.9000001], dtype=float32), 0.19999981)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="235">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># Cost function for linear regression using jax.vmap</span></span>
<span id="cb25-2"><span class="kw" style="color: #003B4F;">def</span> cost(theta_0, theta_1):</span>
<span id="cb25-3">    y_hat <span class="op" style="color: #5E5E5E;">=</span> (theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> X).flatten()</span>
<span id="cb25-4">    <span class="co" style="color: #5E5E5E;">#print(y_hat, y, y-y_hat, (y-y_hat)**2)</span></span>
<span id="cb25-5">    <span class="cf" style="color: #003B4F;">return</span> jnp.mean((y_hat<span class="op" style="color: #5E5E5E;">-</span> y)<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb25-6">    </span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;"># Plot surface and contour plots for cost function</span></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;">#create_plot(cost)</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="236">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">cost(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="236">
<pre><code>Array(16.826666, dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="237">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">(<span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">3.8</span><span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">5.2</span><span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>)<span class="op" style="color: #5E5E5E;">/</span><span class="fl" style="color: #AD0000;">3.</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="237">
<pre><code>16.826666666666668</code></pre>
</div>
</div>
<div class="cell" data-execution_count="238">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># Gradient of cost function at a given point</span></span>
<span id="cb30-2"><span class="kw" style="color: #003B4F;">def</span> grad_cost(theta_0, theta_1):</span>
<span id="cb30-3">    <span class="cf" style="color: #003B4F;">return</span> jnp.array(grad(cost, argnums<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>))(theta_0, theta_1))</span>
<span id="cb30-4"></span>
<span id="cb30-5">grad_cost(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="238">
<pre><code>Array([ 8.      , 17.466667], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="239">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;">def</span> grad_cost_manual(theta_0, theta_1):</span>
<span id="cb32-2">    y_hat <span class="op" style="color: #5E5E5E;">=</span> (theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> X).flatten()</span>
<span id="cb32-3">    <span class="cf" style="color: #003B4F;">return</span> jnp.array([<span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>jnp.mean(y_hat <span class="op" style="color: #5E5E5E;">-</span> y), <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>jnp.mean((y_hat <span class="op" style="color: #5E5E5E;">-</span> y) <span class="op" style="color: #5E5E5E;">*</span> X.flatten())])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="240">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">grad_cost_manual(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="240">
<pre><code>Array([ 8.      , 17.466667], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="241">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;"># Plotting cost surface and contours for three points in X individually</span></span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="kw" style="color: #003B4F;">def</span> cost_i(theta_0, theta_1, i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb35-4">    y_hat <span class="op" style="color: #5E5E5E;">=</span> theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> X[i<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>:i]</span>
<span id="cb35-5">    <span class="cf" style="color: #003B4F;">return</span> jnp.mean((y_hat<span class="op" style="color: #5E5E5E;">-</span> y[i<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>:i])<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="242">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">(cost_i(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>, <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">+</span> cost_i(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>, <span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">+</span> cost_i(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>, <span class="dv" style="color: #AD0000;">3</span>))<span class="op" style="color: #5E5E5E;">/</span><span class="fl" style="color: #AD0000;">3.0</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="242">
<pre><code>Array(16.826666, dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="243">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;">from</span> functools <span class="im" style="color: #00769E;">import</span> partial</span></code></pre></div>
</div>
<div class="cell" data-execution_count="244">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;"># Plot surface and contour plots for cost function</span></span>
<span id="cb39-2"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>):</span>
<span id="cb39-3">    cost_i_p <span class="op" style="color: #5E5E5E;">=</span> partial(cost_i, i<span class="op" style="color: #5E5E5E;">=</span>i)</span>
<span id="cb39-4">    create_plot(cost_i_p)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Global minimum: 0.0 at [0.5 0.5]
Global minimum: 0.0 at [0.44000003 0.88000005]
Global minimum: 0.0 at [0.28000003 0.84      ]</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/gd_files/figure-html/cell-26-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/gd_files/figure-html/cell-26-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/gd_files/figure-html/cell-26-output-4.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="250">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">grad_cost_1 <span class="op" style="color: #5E5E5E;">=</span> grad(cost_i, argnums<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb41-2">grad_cost_1(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="250">
<pre><code>(Array(6., dtype=float32, weak_type=True),
 Array(6., dtype=float32, weak_type=True))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="258">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">jnp.array(grad_cost_1(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>, <span class="dv" style="color: #AD0000;">1</span>)), jnp.array(grad_cost_1(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>, <span class="dv" style="color: #AD0000;">2</span>)), jnp.array(grad_cost_1(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>, <span class="dv" style="color: #AD0000;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="258">
<pre><code>(Array([6., 6.], dtype=float32),
 Array([ 7.6, 15.2], dtype=float32),
 Array([10.4     , 31.199999], dtype=float32))</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/gd.html</guid>
  <pubDate>Thu, 16 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Taylor Series</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/taylor.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> jax.numpy <span class="im" style="color: #00769E;">as</span> jnp</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> jax <span class="im" style="color: #00769E;">import</span> random, jit, vmap, grad, jacfwd, jacrev, hessian, value_and_grad</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Define the function to be approximated</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;">def</span> f(x):</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;">return</span> jnp.sin(x)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Plot the function</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">x <span class="op" style="color: #5E5E5E;">=</span> jnp.linspace(<span class="op" style="color: #5E5E5E;">-</span>jnp.pi, jnp.pi, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb3-4">plt.plot(x, f(x))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/taylor_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># First order Taylor approximation for f(x) at x = 0</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">def</span> taylor1(f, x, x0<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.</span>):</span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;">return</span> f(x0) <span class="op" style="color: #5E5E5E;">+</span> grad(f)(x0) <span class="op" style="color: #5E5E5E;">*</span> (x <span class="op" style="color: #5E5E5E;">-</span> x0)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Plot the Taylor approximation</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">plt.plot(x, f(x), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'f(x)'</span>)</span>
<span id="cb5-4">plt.plot(x, taylor1(f, x), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/taylor_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># factorial function in JAX</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">def</span> factorial(n):</span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;">return</span> jnp.prod(jnp.arange(<span class="dv" style="color: #AD0000;">1</span>, n <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Find the nth order Taylor approximation for f(x) at x = 0</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;">def</span> taylor(f, x, n, x0<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.</span>):</span>
<span id="cb7-4">    grads <span class="op" style="color: #5E5E5E;">=</span> {<span class="dv" style="color: #AD0000;">0</span>:f}</span>
<span id="cb7-5">    output <span class="op" style="color: #5E5E5E;">=</span> f(x0)</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, n<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb7-7">        grads[i] <span class="op" style="color: #5E5E5E;">=</span> grad(grads[i<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb7-8">        output <span class="op" style="color: #5E5E5E;">+=</span> grads[i](x0) <span class="op" style="color: #5E5E5E;">*</span> (x <span class="op" style="color: #5E5E5E;">-</span> x0)<span class="op" style="color: #5E5E5E;">**</span>i <span class="op" style="color: #5E5E5E;">/</span> factorial(i)</span>
<span id="cb7-9">    <span class="cf" style="color: #003B4F;">return</span> output</span></code></pre></div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">plt.plot(x, f(x), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'f(x)'</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb8-2">plt.plot(x, taylor(f, x, <span class="dv" style="color: #AD0000;">1</span>), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation, n=1'</span>)</span>
<span id="cb8-3">plt.plot(x, taylor(f, x, <span class="dv" style="color: #AD0000;">3</span>), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation, n=3'</span>)</span>
<span id="cb8-4">plt.plot(x, taylor(f, x, <span class="dv" style="color: #AD0000;">5</span>), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation, n=5'</span>)</span>
<span id="cb8-5">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>&lt;matplotlib.legend.Legend at 0x1aea5ea90&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/taylor_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">x <span class="op" style="color: #5E5E5E;">=</span> jnp.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;">def</span> g(x):</span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;">return</span> x<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb10-5"></span>
<span id="cb10-6">plt.plot(x, g(x), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'g(x)'</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb10-7">plt.plot(x, taylor(g, x, <span class="dv" style="color: #AD0000;">1</span>), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation, n=1'</span>)</span>
<span id="cb10-8">plt.plot(x, taylor(g, x, <span class="dv" style="color: #AD0000;">2</span>), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation, n=3'</span>, ls<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/taylor_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">plt.plot(x, g(x), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'g(x)'</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb11-2">plt.plot(x, taylor(g, x, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">4.1</span>), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation, n=1'</span>)</span>
<span id="cb11-3">plt.plot(x, taylor(g, x, <span class="dv" style="color: #AD0000;">2</span>, <span class="fl" style="color: #AD0000;">4.1</span>), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation, n=3'</span>, ls<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb11-4">plt.ylim((<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">20</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>(-2.0, 20.0)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/taylor_files/figure-html/cell-11-output-2.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/taylor.html</guid>
  <pubDate>Tue, 14 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Conditioning and Linear Regression</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/condition-inverse.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Showing that np.linalg.solve is better conditioned than np.linalg.inv for linear regression normal equations</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># Generate data</span></span>
<span id="cb2-4">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb2-5">p <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb2-6">X <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(n, p)</span>
<span id="cb2-7">theta <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(p)</span>
<span id="cb2-8">y <span class="op" style="color: #5E5E5E;">=</span> X <span class="op" style="color: #5E5E5E;">@</span> theta <span class="op" style="color: #5E5E5E;">+</span> np.random.randn(n)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;"># Solve normal equations</span></span>
<span id="cb2-11">theta_hat <span class="op" style="color: #5E5E5E;">=</span> np.linalg.solve(X.T <span class="op" style="color: #5E5E5E;">@</span> X, X.T <span class="op" style="color: #5E5E5E;">@</span> y)</span>
<span id="cb2-12">theta_hat_inv <span class="op" style="color: #5E5E5E;">=</span> np.linalg.inv(X.T <span class="op" style="color: #5E5E5E;">@</span> X) <span class="op" style="color: #5E5E5E;">@</span> X.T <span class="op" style="color: #5E5E5E;">@</span> y</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;"># Compare the condition numbers</span></span>
<span id="cb2-15"><span class="bu" style="color: null;">print</span>(np.linalg.cond(X.T <span class="op" style="color: #5E5E5E;">@</span> X))</span>
<span id="cb2-16"><span class="bu" style="color: null;">print</span>(np.linalg.cond(np.linalg.inv(X.T <span class="op" style="color: #5E5E5E;">@</span> X)))</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;"># Plot the difference between the two solutions</span></span>
<span id="cb2-19">plt.plot(theta_hat <span class="op" style="color: #5E5E5E;">-</span> theta_hat_inv)</span>
<span id="cb2-20">plt.title(<span class="st" style="color: #20794D;">'Difference between solutions'</span>)</span>
<span id="cb2-21">plt.xlabel(<span class="st" style="color: #20794D;">'Index'</span>)</span>
<span id="cb2-22">plt.ylabel(<span class="st" style="color: #20794D;">'Difference'</span>)</span>
<span id="cb2-23">plt.show()</span>
<span id="cb2-24"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2.980877596192165
2.980877596192165</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/condition-inverse_files/figure-html/cell-3-output-2.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/condition-inverse.html</guid>
  <pubDate>Fri, 10 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Linear Regression: Geometric Perspective</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/projection.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Two three-dimensional vectors</span></span>
<span id="cb2-2">v1 <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb2-3">v2 <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">2</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># y-vector</span></span>
<span id="cb2-6">y <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">2.5</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.8</span>, <span class="fl" style="color: #AD0000;">1.2</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># plot the vectors in 3D</span></span>
<span id="cb3-2">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb3-3">ax <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">111</span>, projection<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'3d'</span>)</span>
<span id="cb3-4">ax.quiver(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, v1[<span class="dv" style="color: #AD0000;">0</span>], v1[<span class="dv" style="color: #AD0000;">1</span>], v1[<span class="dv" style="color: #AD0000;">2</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'v1'</span>)</span>
<span id="cb3-5">ax.quiver(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, v2[<span class="dv" style="color: #AD0000;">0</span>], v2[<span class="dv" style="color: #AD0000;">1</span>], v2[<span class="dv" style="color: #AD0000;">2</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'b'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'v2'</span>)</span>
<span id="cb3-6">ax.quiver(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, y[<span class="dv" style="color: #AD0000;">0</span>], y[<span class="dv" style="color: #AD0000;">1</span>], y[<span class="dv" style="color: #AD0000;">2</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'g'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8">ax.set_xlim(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb3-9">ax.set_ylim(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb3-10">ax.set_zlim(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb3-11">ax.set_xlabel(<span class="st" style="color: #20794D;">'x'</span>)</span>
<span id="cb3-12">ax.set_ylabel(<span class="st" style="color: #20794D;">'y'</span>)</span>
<span id="cb3-13">ax.set_zlabel(<span class="st" style="color: #20794D;">'z'</span>)</span>
<span id="cb3-14">ax.legend()</span>
<span id="cb3-15"></span>
<span id="cb3-16">ax.view_init(elev<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">45</span>, azim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">60</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/projection_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">theta <span class="op" style="color: #5E5E5E;">=</span> np.linalg.lstsq(np.array([v1, v2]).T, y, rcond<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb4-2">theta</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([0.525 , 0.6625])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Projection of y onto the plane spanned by v1 and v2</span></span>
<span id="cb6-2">y_proj <span class="op" style="color: #5E5E5E;">=</span> np.dot(np.array([v1, v2]).T, theta)</span>
<span id="cb6-3">y_proj</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>array([ 1.85, -0.8 ,  1.85])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Plot the x=z plane filled with color black</span></span>
<span id="cb8-2">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;"># 3d projection</span></span>
<span id="cb8-4">ax <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">111</span>, projection<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'3d'</span>)</span>
<span id="cb8-5">xx, zz <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>), np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>))</span>
<span id="cb8-6">yy <span class="op" style="color: #5E5E5E;">=</span> np.zeros_like(xx)</span>
<span id="cb8-7">ax.plot_surface(xx, yy, zz, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;"># plot the vectors in 3D</span></span>
<span id="cb8-11">ax.quiver(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, v1[<span class="dv" style="color: #AD0000;">0</span>], v1[<span class="dv" style="color: #AD0000;">1</span>], v1[<span class="dv" style="color: #AD0000;">2</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'v1'</span>)</span>
<span id="cb8-12">ax.quiver(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, v2[<span class="dv" style="color: #AD0000;">0</span>], v2[<span class="dv" style="color: #AD0000;">1</span>], v2[<span class="dv" style="color: #AD0000;">2</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'b'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'v2'</span>)</span>
<span id="cb8-13">ax.quiver(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, y[<span class="dv" style="color: #AD0000;">0</span>], y[<span class="dv" style="color: #AD0000;">1</span>], y[<span class="dv" style="color: #AD0000;">2</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'g'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>)</span>
<span id="cb8-14"></span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;"># Limit the view to the x-z plane</span></span>
<span id="cb8-17"></span>
<span id="cb8-18">ax.set_xlabel(<span class="st" style="color: #20794D;">'x'</span>)</span>
<span id="cb8-19">ax.set_ylabel(<span class="st" style="color: #20794D;">'y'</span>)</span>
<span id="cb8-20">ax.set_zlabel(<span class="st" style="color: #20794D;">'z'</span>)</span>
<span id="cb8-21"></span>
<span id="cb8-22"><span class="co" style="color: #5E5E5E;"># Set the view angle so that we can see the x-z plane appear at a 45 degree angle</span></span>
<span id="cb8-23"><span class="co" style="color: #5E5E5E;">#ax.view_init(azim=70, elev=200)</span></span>
<span id="cb8-24">ax.view_init(elev<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">60</span>, azim<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">80</span>, roll<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb8-25">ax.view_init(<span class="dv" style="color: #AD0000;">120</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">120</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">120</span>)</span>
<span id="cb8-26"><span class="co" style="color: #5E5E5E;">#ax.view_init(roll=45)</span></span>
<span id="cb8-27"><span class="co" style="color: #5E5E5E;">#ax.view_init(elev=30, azim=45, roll=15)</span></span>
<span id="cb8-28">ax.set_ylim(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb8-29">ax.set_xlim(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb8-30">ax.set_zlim(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb8-31"></span>
<span id="cb8-32"></span>
<span id="cb8-33"><span class="co" style="color: #5E5E5E;"># Plot the projection of y onto the plane spanned by v1 and v2</span></span>
<span id="cb8-34">ax.quiver(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, y_proj[<span class="dv" style="color: #AD0000;">0</span>], y_proj[<span class="dv" style="color: #AD0000;">1</span>], y_proj[<span class="dv" style="color: #AD0000;">2</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Projection of y onto</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;"> the plane spanned by v1 and v2'</span>)</span>
<span id="cb8-35">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>&lt;matplotlib.legend.Legend at 0x111d52730&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/projection_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/projection.html</guid>
  <pubDate>Tue, 31 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Maths and JAX</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/maths-jax.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> jax.numpy <span class="im" style="color: #00769E;">as</span> jnp</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> jax</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">def</span> func(x, y, z):</span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;">return</span> x<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> jnp.sin(y) <span class="op" style="color: #5E5E5E;">+</span> z</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">func(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>DeviceArray(4.9092975, dtype=float32, weak_type=True)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">from</span> sympy <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb5-2">init_printing()</span>
<span id="cb5-3"></span>
<span id="cb5-4">x, y, z <span class="op" style="color: #5E5E5E;">=</span> symbols(<span class="st" style="color: #20794D;">'x y z'</span>)</span>
<span id="cb5-5">f <span class="op" style="color: #5E5E5E;">=</span> x<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> sin(y) <span class="op" style="color: #5E5E5E;">+</span> z</span>
<span id="cb5-6">f</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20x%5E%7B2%7D%20+%20z%20+%20%5Csin%7B%5Cleft(y%20%5Cright)%7D"></p>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">diff(f, x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%202%20x"></p>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Find the derivative of f with respect to x, y, and z using sympy</span></span>
<span id="cb7-2">del_x, del_y, del_z <span class="op" style="color: #5E5E5E;">=</span> diff(f, x), diff(f, y), diff(f, z)</span>
<span id="cb7-3">del_x, del_y, del_z</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cleft(%202%20x,%20%5C%20%20%5Ccos%7B%5Cleft(y%20%5Cright)%7D,%20%5C%20%201%5Cright)"></p>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">grad_f <span class="op" style="color: #5E5E5E;">=</span> lambdify((x, y, z), [del_x, del_y, del_z])</span>
<span id="cb8-2">grad_f(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cleft%5B%202,%20%5C%20%20-0.416146836547142,%20%5C%20%201%5Cright%5D"></p>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">grad_f_jax <span class="op" style="color: #5E5E5E;">=</span> jax.grad(func, argnums<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb9-2">grad_f_jax(<span class="fl" style="color: #AD0000;">1.</span>, <span class="fl" style="color: #AD0000;">2.</span>, <span class="fl" style="color: #AD0000;">3.</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>(DeviceArray(2., dtype=float32, weak_type=True),
 DeviceArray(-0.41614684, dtype=float32, weak_type=True),
 DeviceArray(1., dtype=float32, weak_type=True))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="92">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb11-2">A <span class="op" style="color: #5E5E5E;">=</span> jax.random.normal(shape<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">1</span>, n), key<span class="op" style="color: #5E5E5E;">=</span>jax.random.PRNGKey(<span class="dv" style="color: #AD0000;">0</span>), dtype<span class="op" style="color: #5E5E5E;">=</span>jnp.float32)</span>
<span id="cb11-3">theta <span class="op" style="color: #5E5E5E;">=</span> jax.random.normal(shape<span class="op" style="color: #5E5E5E;">=</span>(n, <span class="dv" style="color: #AD0000;">1</span>), key<span class="op" style="color: #5E5E5E;">=</span>jax.random.PRNGKey(<span class="dv" style="color: #AD0000;">0</span>), dtype<span class="op" style="color: #5E5E5E;">=</span>jnp.float32)</span>
<span id="cb11-4">b <span class="op" style="color: #5E5E5E;">=</span> A <span class="op" style="color: #5E5E5E;">@</span> theta </span>
<span id="cb11-5"></span>
<span id="cb11-6">b</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="92">
<pre><code>DeviceArray([[28.684494]], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="93">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">b.flatten(), b.item()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="93">
<pre><code>(DeviceArray([28.684494], dtype=float32), 28.684494018554688)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="94">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;">def</span> a_theta(A, theta):</span>
<span id="cb15-2">    <span class="cf" style="color: #003B4F;">return</span> A <span class="op" style="color: #5E5E5E;">@</span> theta</span></code></pre></div>
</div>
<div class="cell" data-execution_count="95">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">a_theta(A, theta)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="95">
<pre><code>DeviceArray([[28.684494]], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="96">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">grad_a_theta <span class="op" style="color: #5E5E5E;">=</span> jax.grad(a_theta, argnums<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="101">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">jax.jacobian(a_theta, argnums<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)(A, theta)[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, :].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="101">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cleft(%2020,%20%5C%20%201%5Cright)"></p>
</div>
</div>
<div class="cell" data-execution_count="102">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">A.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="102">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cleft(%201,%20%5C%20%2020%5Cright)"></p>
</div>
</div>
<div class="cell" data-execution_count="112">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Sympy version</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="109">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">A <span class="op" style="color: #5E5E5E;">=</span> MatrixSymbol(<span class="st" style="color: #20794D;">'A'</span>, <span class="dv" style="color: #AD0000;">1</span>, n)</span>
<span id="cb22-2">theta <span class="op" style="color: #5E5E5E;">=</span> MatrixSymbol(<span class="st" style="color: #20794D;">'theta'</span>, n, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb22-3">A, theta</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="109">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cleft(%20A,%20%5C%20%20%5Ctheta%5Cright)"></p>
</div>
</div>
<div class="cell" data-execution_count="111">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">diff(A<span class="op" style="color: #5E5E5E;">*</span>theta, theta)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="111">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20A%5E%7BT%7D"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/maths-jax.html</guid>
  <pubDate>Tue, 31 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>CNN Edge 2d</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> torch <span class="im" style="color: #00769E;">import</span> nn</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt <span class="co" style="color: #5E5E5E;"># for making figures</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Create a tensor of size 6x6 with first three columns as 1 and rest as 0</span></span>
<span id="cb2-2">x <span class="op" style="color: #5E5E5E;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb2-3">x[:, :<span class="dv" style="color: #AD0000;">3</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-4"><span class="bu" style="color: null;">print</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[1., 1., 1., 0., 0., 0.],
        [1., 1., 1., 0., 0., 0.],
        [1., 1., 1., 0., 0., 0.],
        [1., 1., 1., 0., 0., 0.],
        [1., 1., 1., 0., 0., 0.],
        [1., 1., 1., 0., 0., 0.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">x.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>torch.Size([6, 6])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Plot the tensor with equal aspect ratio</span></span>
<span id="cb6-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb6-3">sns.heatmap(x, cbar<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, xticklabels<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, yticklabels<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>, annot<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>&lt;AxesSubplot: &gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Create a 3x3 kernel with first column as 1, second as 0 and third as -1</span></span>
<span id="cb8-2"></span>
<span id="cb8-3">k <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]]).<span class="bu" style="color: null;">float</span>()</span>
<span id="cb8-4"><span class="bu" style="color: null;">print</span>(k)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[ 1.,  0., -1.],
        [ 1.,  0., -1.],
        [ 1.,  0., -1.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Apply the kernel to the image</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"></span>
<span id="cb10-4">y <span class="op" style="color: #5E5E5E;">=</span> F.conv2d(x.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">6</span>), k.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb10-5"><span class="bu" style="color: null;">print</span>(y)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;"># Create figure of size of y</span></span>
<span id="cb10-8">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(y.shape[<span class="dv" style="color: #AD0000;">2</span>], y.shape[<span class="dv" style="color: #AD0000;">3</span>]))</span>
<span id="cb10-9">sns.heatmap(y[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], cbar<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, xticklabels<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, yticklabels<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>, annot<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[[[0., 3., 3., 0.],
          [0., 3., 3., 0.],
          [0., 3., 3., 0.],
          [0., 3., 3., 0.]]]])</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>&lt;AxesSubplot: &gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge_files/figure-html/cell-7-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">im <span class="op" style="color: #5E5E5E;">=</span> plt.imread(<span class="st" style="color: #20794D;">'lm.jpeg'</span>)</span>
<span id="cb13-2">plt.imshow(im)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>&lt;matplotlib.image.AxesImage at 0x151220670&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Crop to left 180 X 180 pixels</span></span>
<span id="cb15-2"></span>
<span id="cb15-3">im <span class="op" style="color: #5E5E5E;">=</span> im[:<span class="dv" style="color: #AD0000;">180</span>, :<span class="dv" style="color: #AD0000;">180</span>]</span>
<span id="cb15-4">plt.imshow(im, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>&lt;matplotlib.image.AxesImage at 0x1512b3cd0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Convert to grayscale</span></span>
<span id="cb17-2">im <span class="op" style="color: #5E5E5E;">=</span> im.mean(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb17-3">plt.imshow(im, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>&lt;matplotlib.image.AxesImage at 0x15133dac0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge_files/figure-html/cell-10-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">im.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>(180, 180)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Detect edges using our filter</span></span>
<span id="cb21-2"></span>
<span id="cb21-3">k <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]]).<span class="bu" style="color: null;">float</span>()</span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;"># Apply the kernel to the image</span></span>
<span id="cb21-6">y <span class="op" style="color: #5E5E5E;">=</span> F.conv2d(torch.tensor(im).<span class="bu" style="color: null;">float</span>().view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">180</span>, <span class="dv" style="color: #AD0000;">180</span>), k.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb21-7"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># plot the result</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;">#plt.figure(figsize=(y.shape[2], y.shape[3]))</span></span>
<span id="cb22-3">plt.imshow(y[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>&lt;matplotlib.image.AxesImage at 0x197097430&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge_files/figure-html/cell-13-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># Detect horizontal edges using our filter</span></span>
<span id="cb24-2"></span>
<span id="cb24-3">k <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]]).<span class="bu" style="color: null;">float</span>().T</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;"># Apply the kernel to the image</span></span>
<span id="cb24-6">y <span class="op" style="color: #5E5E5E;">=</span> F.conv2d(torch.tensor(im).<span class="bu" style="color: null;">float</span>().view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">180</span>, <span class="dv" style="color: #AD0000;">180</span>), k.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb24-7">plt.imshow(y[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>&lt;matplotlib.image.AxesImage at 0x197105730&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge.html</guid>
  <pubDate>Tue, 31 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Maths and JAX: Low Rank</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix.html</link>
  <description><![CDATA[ 



<section id="matrix-as-transformation-and-interpreting-low-rank-matrix" class="level1">
<h1>Matrix as transformation and interpreting low rank matrix</h1>
<section id="goals" class="level2">
<h2 class="anchored" data-anchor-id="goals">Goals</h2>
<section id="g1-to-understand-matrix-vector-multiplication-as-transformation-of-the-vector" class="level3">
<h3 class="anchored" data-anchor-id="g1-to-understand-matrix-vector-multiplication-as-transformation-of-the-vector">G1: To understand matrix vector multiplication as transformation of the vector</h3>
<p>Multiplying a matrix A with a vector x transforms x</p>
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/Ax-combined.png" class="img-fluid"></p>
</section>
<section id="g2-understanding-low-rank-matrices-as-applying-transformation-on-a-vector-resulting-in-a-subspace-of-the-original-vector-space" class="level3">
<h3 class="anchored" data-anchor-id="g2-understanding-low-rank-matrices-as-applying-transformation-on-a-vector-resulting-in-a-subspace-of-the-original-vector-space">G2: Understanding low rank matrices as applying transformation on a vector resulting in a subspace of the original vector space</h3>
<p>Transforming a vector via a low rank matrix in the shown examples leads to a line</p>
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lr-combined.png" class="img-fluid"></p>
<p>We first study Goal 1. The interpretation of matrix vector product is borrowed from the excellent videos from the <a href="https://www.youtube.com/watch?v=kYB8IZa5AuE">3Blue1Brown channel</a>. I’ll first set up the environment by importing a few relevant libraries.</p>
<section id="basic-imports" class="level4">
<h4 class="anchored" data-anchor-id="basic-imports">Basic imports</h4>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> matplotlib.patches <span class="im" style="color: #00769E;">as</span> mpatches</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> sympy <span class="im" style="color: #00769E;">import</span> Matrix, MatrixSymbol, Eq, MatMul</span>
<span id="cb1-7"></span>
<span id="cb1-8">sns.reset_defaults()</span>
<span id="cb1-9">sns.set_context(context<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"talk"</span>, font_scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>)</span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">sympy_A <span class="op" style="color: #5E5E5E;">=</span> MatrixSymbol(<span class="st" style="color: #20794D;">"A"</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-2">sympy_x <span class="op" style="color: #5E5E5E;">=</span> MatrixSymbol(<span class="st" style="color: #20794D;">"x"</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-3">y <span class="op" style="color: #5E5E5E;">=</span> MatrixSymbol(<span class="st" style="color: #20794D;">"y"</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5">Eq(y, sympy_A<span class="op" style="color: #5E5E5E;">*</span>sympy_x, evaluate<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20y%20=%20A%20x"></p>
</div>
</div>
<p>Given a matrix <code>A</code> and a vector <code>x</code>, we are trying to get <code>y=Ax</code>. Let us first see the values for a specific instance in the 2d space.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">A <span class="op" style="color: #5E5E5E;">=</span> np.array([[<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>]])</span>
<span id="cb3-2"></span>
<span id="cb3-3">x <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb3-4">Ax <span class="op" style="color: #5E5E5E;">=</span> A <span class="op" style="color: #5E5E5E;">@</span> x</span>
<span id="cb3-5"></span>
<span id="cb3-6">Eq(Matrix(Ax), MatMul(Matrix(A), Matrix(x)),evaluate<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cleft%5B%5Cbegin%7Bmatrix%7D3%5C%5C5%5Cend%7Bmatrix%7D%5Cright%5D%20=%20%5Cleft%5B%5Cbegin%7Bmatrix%7D2%20&amp;%201%5C%5C1%20&amp;%204%5Cend%7Bmatrix%7D%5Cright%5D%20%5Cleft%5B%5Cbegin%7Bmatrix%7D1%5C%5C1%5Cend%7Bmatrix%7D%5Cright%5D"></p>
</div>
</div>
<p>Here, we have A = <img src="https://latex.codecogs.com/png.latex?%5Cleft%5B%5Cbegin%7Bmatrix%7D2%20&amp;%201%5C%5C1%20&amp;%204%5Cend%7Bmatrix%7D%5Cright%5D"> and x = <img src="https://latex.codecogs.com/png.latex?%7B%5Ctext%7B%5B1%201%5D%7D%7D"></p>
<p>Now some code to create arrows to represent arrows.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> plot_arrow(ax, x, color, label):</span>
<span id="cb4-2">    x_head, y_head <span class="op" style="color: #5E5E5E;">=</span> x[<span class="dv" style="color: #AD0000;">0</span>], x[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb4-3">    x_tail <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb4-4">    y_tail <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb4-5">    dx <span class="op" style="color: #5E5E5E;">=</span> x_head <span class="op" style="color: #5E5E5E;">-</span> x_tail</span>
<span id="cb4-6">    dy <span class="op" style="color: #5E5E5E;">=</span> y_head <span class="op" style="color: #5E5E5E;">-</span> y_tail</span>
<span id="cb4-7"></span>
<span id="cb4-8">    arrow <span class="op" style="color: #5E5E5E;">=</span> mpatches.FancyArrowPatch(</span>
<span id="cb4-9">        (x_tail, y_tail), (x_head, y_head), mutation_scale<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, color<span class="op" style="color: #5E5E5E;">=</span>color, label<span class="op" style="color: #5E5E5E;">=</span>label</span>
<span id="cb4-10">    )</span>
<span id="cb4-11"></span>
<span id="cb4-12">    ax.add_patch(arrow)</span>
<span id="cb4-13">    ax.legend(bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">1.6</span>, <span class="dv" style="color: #AD0000;">1</span>), borderaxespad<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<p>Now some code to plot the vector corresponding to Ax</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">def</span> plot_transform(A, x):</span>
<span id="cb5-2">    Ax <span class="op" style="color: #5E5E5E;">=</span> A <span class="op" style="color: #5E5E5E;">@</span> x</span>
<span id="cb5-3">    fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb5-4">    plot_arrow(ax, x, <span class="st" style="color: #20794D;">"k"</span>, <span class="ss" style="color: #20794D;">f"Original (x) </span><span class="sc" style="color: #5E5E5E;">{</span>x<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb5-5">    plot_arrow(ax, Ax, <span class="st" style="color: #20794D;">"g"</span>, <span class="ss" style="color: #20794D;">f"Transformed (Ax) </span><span class="sc" style="color: #5E5E5E;">{</span>Ax<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb5-6">    plt.xlim((<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb5-7">    plt.ylim((<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb5-8">    plt.grid(alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>)</span>
<span id="cb5-9">    ax.set_aspect(<span class="st" style="color: #20794D;">"equal"</span>)</span>
<span id="cb5-10">    plt.title(<span class="ss" style="color: #20794D;">f"A = </span><span class="sc" style="color: #5E5E5E;">{</span>A<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb5-11">    sns.despine(left<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, bottom<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-12">    plt.tight_layout()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">plot_transform(np.array([[<span class="fl" style="color: #AD0000;">1.0</span>, <span class="fl" style="color: #AD0000;">1.0</span>], [<span class="fl" style="color: #AD0000;">1.0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.0</span>]]), [<span class="fl" style="color: #AD0000;">1.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>])</span>
<span id="cb6-2">plt.savefig(<span class="st" style="color: #20794D;">"Ax1.png"</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>In the plot above, we can see that the vector [1, 2] is transformed to [3, -1] via the matrix A.</p>
<p>Let us now write some code to create the rotation matrix and apply it on our input x</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">def</span> rot(angle):</span>
<span id="cb7-2">    theta <span class="op" style="color: #5E5E5E;">=</span> np.radians(angle)</span>
<span id="cb7-3">    c, s <span class="op" style="color: #5E5E5E;">=</span> np.cos(theta), np.sin(theta)</span>
<span id="cb7-4">    R <span class="op" style="color: #5E5E5E;">=</span> np.array(((c, <span class="op" style="color: #5E5E5E;">-</span>s), (s, c)))</span>
<span id="cb7-5">    <span class="cf" style="color: #003B4F;">return</span> np.<span class="bu" style="color: null;">round</span>(R, <span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">x <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">1.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>])</span>
<span id="cb8-2">plot_transform(rot(<span class="dv" style="color: #AD0000;">90</span>), x)</span>
<span id="cb8-3">plt.savefig(<span class="st" style="color: #20794D;">"Ax2"</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>As we can see above, creating the 90 degree rotation matrix indeed transforms our vector anticlockwise 90 degrees.</p>
<p>Now let us talk about matrices A that are low rank. I am creating a simple low rank matrix where the second row is some constant times the first row.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">def</span> plot_lr(x, slope):</span>
<span id="cb9-2">    low_rank <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">1.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>])</span>
<span id="cb9-3">    low_rank <span class="op" style="color: #5E5E5E;">=</span> np.vstack((low_rank, slope <span class="op" style="color: #5E5E5E;">*</span> low_rank))</span>
<span id="cb9-4">    plot_transform(low_rank, x)</span>
<span id="cb9-5">    x_lin <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb9-6">    y <span class="op" style="color: #5E5E5E;">=</span> x_lin <span class="op" style="color: #5E5E5E;">*</span> slope</span>
<span id="cb9-7">    plt.plot(x_lin, y, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.4</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"y = </span><span class="sc" style="color: #5E5E5E;">{</span>slope<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">x"</span>)</span>
<span id="cb9-8">    plt.legend(bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">1.2</span>, <span class="dv" style="color: #AD0000;">1</span>), borderaxespad<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">plot_lr(x, <span class="fl" style="color: #AD0000;">1.01</span>)</span>
<span id="cb10-2">plt.tight_layout()</span>
<span id="cb10-3">plt.savefig(<span class="st" style="color: #20794D;">"lr-1.png"</span>, bbox_inches<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"tight"</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">plot_lr([<span class="fl" style="color: #AD0000;">1.0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.0</span>], <span class="fl" style="color: #AD0000;">1.01</span>)</span>
<span id="cb11-2">plt.tight_layout()</span>
<span id="cb11-3">plt.savefig(<span class="st" style="color: #20794D;">"lr-2.png"</span>, bbox_inches<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"tight"</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">plot_lr([<span class="fl" style="color: #AD0000;">0.5</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.7</span>], <span class="fl" style="color: #AD0000;">1.01</span>)</span>
<span id="cb12-2">plt.tight_layout()</span>
<span id="cb12-3">plt.savefig(<span class="st" style="color: #20794D;">"lr-3.png"</span>, bbox_inches<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"tight"</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">plot_lr([<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.0</span>, <span class="fl" style="color: #AD0000;">0.0</span>], <span class="fl" style="color: #AD0000;">1.01</span>)</span>
<span id="cb13-2">plt.tight_layout()</span>
<span id="cb13-3">plt.savefig(<span class="st" style="color: #20794D;">"lr-4.png"</span>, bbox_inches<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"tight"</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>To summarize</p>
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lr-combined.png" class="img-fluid"></p>
<p>In the above plots we can see that changing our x to any vector in the 2d space leads to us to transformed vector not covering the whole 2d space, but on line in the 2d space. One can easily take this learning to higher dimensional matrices A.</p>


</section>
</section>
</section>
</section>

 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix.html</guid>
  <pubDate>Tue, 31 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/nipunbatra/ml2023/notebooks/posts/Ax-combined.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Some Python Utilities</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/python-utils.html</link>
  <description><![CDATA[ 



<section id="function-argument-unpacking" class="level4">
<h4 class="anchored" data-anchor-id="function-argument-unpacking">Function Argument Unpacking</h4>
<p>Reference: https://www.youtube.com/watch?v=YWY4BZi_o28</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> print_vec(x, y, z):</span>
<span id="cb1-2">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"[</span><span class="sc" style="color: #5E5E5E;">{</span>x<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> </span><span class="ch" style="color: #20794D;">\n</span><span class="sc" style="color: #5E5E5E;">{</span>y<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> </span><span class="ch" style="color: #20794D;">\n</span><span class="sc" style="color: #5E5E5E;">{</span>z<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">print_vec(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1 
2 
3]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">tuple_vec <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;">#print_vec(tuple_vec)</span></span>
<span id="cb4-3">print_vec(tuple_vec[<span class="dv" style="color: #AD0000;">0</span>], tuple_vec[<span class="dv" style="color: #AD0000;">1</span>], tuple_vec[<span class="dv" style="color: #AD0000;">2</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1 
0 
1]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">list_vec <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb6-2"></span>
<span id="cb6-3">print_vec(tuple_vec[<span class="dv" style="color: #AD0000;">0</span>], tuple_vec[<span class="dv" style="color: #AD0000;">1</span>], tuple_vec[<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb6-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"*"</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb6-5">print_vec(<span class="op" style="color: #5E5E5E;">*</span>tuple_vec)</span>
<span id="cb6-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"*"</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb6-7"></span>
<span id="cb6-8">print_vec(<span class="op" style="color: #5E5E5E;">*</span>list_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1 
0 
1]
********************
[1 
0 
1]
********************
[1 
0 
1]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">dictionary_vec <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"x"</span>: <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">"y"</span>: <span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">"z"</span>: <span class="dv" style="color: #AD0000;">1</span>}</span>
<span id="cb8-2">print_vec(<span class="op" style="color: #5E5E5E;">**</span>dictionary_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1 
0 
1]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">dictionary_vec <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"a"</span>: <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">"b"</span>: <span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">"c"</span>:<span class="dv" style="color: #AD0000;">1</span>}</span>
<span id="cb10-2">print_vec(<span class="op" style="color: #5E5E5E;">**</span>dictionary_vec)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>TypeError: print_vec() got an unexpected keyword argument 'a'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;">print</span>(<span class="op" style="color: #5E5E5E;">*</span>dictionary_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>a b c</code></pre>
</div>
</div>
</section>
<section id="zip" class="level4">
<h4 class="anchored" data-anchor-id="zip">Zip</h4>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">zip</span>([<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>], [<span class="st" style="color: #20794D;">'a'</span>, <span class="st" style="color: #20794D;">'b'</span>, <span class="st" style="color: #20794D;">'c'</span>], [<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>]))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>[(1, 'a', 7), (2, 'b', 8), (3, 'c', 9)]</code></pre>
</div>
</div>
</section>
<section id="itertools-product" class="level4">
<h4 class="anchored" data-anchor-id="itertools-product">Itertools Product</h4>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;">import</span> itertools</span>
<span id="cb16-2"><span class="bu" style="color: null;">list</span>(itertools.product([<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>], [<span class="st" style="color: #20794D;">'a'</span>, <span class="st" style="color: #20794D;">'b'</span>, <span class="st" style="color: #20794D;">'c'</span>], [<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>]))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>[(1, 'a', 7),
 (1, 'a', 8),
 (1, 'a', 9),
 (1, 'b', 7),
 (1, 'b', 8),
 (1, 'b', 9),
 (1, 'c', 7),
 (1, 'c', 8),
 (1, 'c', 9),
 (2, 'a', 7),
 (2, 'a', 8),
 (2, 'a', 9),
 (2, 'b', 7),
 (2, 'b', 8),
 (2, 'b', 9),
 (2, 'c', 7),
 (2, 'c', 8),
 (2, 'c', 9)]</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/python-utils.html</guid>
  <pubDate>Tue, 17 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Dataset splitting for machine learning</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/split.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Create a dataset with 3 features and 1000 samples for a classification problem</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(np.random.randn(<span class="dv" style="color: #AD0000;">1000</span>, <span class="dv" style="color: #AD0000;">3</span>), columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'A'</span>, <span class="st" style="color: #20794D;">'B'</span>, <span class="st" style="color: #20794D;">'C'</span>])</span>
<span id="cb2-4">df[<span class="st" style="color: #20794D;">'D'</span>] <span class="op" style="color: #5E5E5E;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.112981</td>
      <td>-0.033889</td>
      <td>0.348708</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.821601</td>
      <td>1.267423</td>
      <td>0.274915</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.148040</td>
      <td>-1.412712</td>
      <td>-0.271345</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.004766</td>
      <td>-1.209944</td>
      <td>0.122512</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.854442</td>
      <td>-0.559497</td>
      <td>-0.605376</td>
      <td>1</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>995</th>
      <td>0.161444</td>
      <td>-0.969567</td>
      <td>-2.079664</td>
      <td>0</td>
    </tr>
    <tr>
      <th>996</th>
      <td>1.615938</td>
      <td>0.219218</td>
      <td>-0.322223</td>
      <td>0</td>
    </tr>
    <tr>
      <th>997</th>
      <td>0.501970</td>
      <td>-0.874313</td>
      <td>1.571102</td>
      <td>1</td>
    </tr>
    <tr>
      <th>998</th>
      <td>0.386063</td>
      <td>-1.481215</td>
      <td>-1.974313</td>
      <td>1</td>
    </tr>
    <tr>
      <th>999</th>
      <td>0.468528</td>
      <td>1.060850</td>
      <td>0.612252</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>1000 rows × 4 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">X, y <span class="op" style="color: #5E5E5E;">=</span> df[[<span class="st" style="color: #20794D;">'A'</span>, <span class="st" style="color: #20794D;">'B'</span>, <span class="st" style="color: #20794D;">'C'</span>]], df[<span class="st" style="color: #20794D;">'D'</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">train_X, test_X <span class="op" style="color: #5E5E5E;">=</span> X[:<span class="dv" style="color: #AD0000;">800</span>], X[<span class="dv" style="color: #AD0000;">800</span>:]</span>
<span id="cb4-2">train_y, test_y <span class="op" style="color: #5E5E5E;">=</span> y[:<span class="dv" style="color: #AD0000;">800</span>], y[<span class="dv" style="color: #AD0000;">800</span>:]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">from</span> sklearn.tree <span class="im" style="color: #00769E;">import</span> DecisionTreeClassifier</span></code></pre></div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">dt <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier(max_depth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb6-2">dt.fit(train_X, train_y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>DecisionTreeClassifier(max_depth=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" checked=""><label for="sk-estimator-id-2" class="sk-toggleable__label sk-toggleable__label-arrow">DecisionTreeClassifier</label><div class="sk-toggleable__content"><pre>DecisionTreeClassifier(max_depth=2)</pre></div></div></div></div></div>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">from</span> sklearn <span class="im" style="color: #00769E;">import</span> tree</span>
<span id="cb7-2">tree.plot_tree(dt)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>[Text(0.5, 0.8333333333333334, 'X[0] &lt;= -0.17\ngini = 0.5\nsamples = 800\nvalue = [400, 400]'),
 Text(0.25, 0.5, 'X[0] &lt;= -0.307\ngini = 0.495\nsamples = 348\nvalue = [157, 191]'),
 Text(0.125, 0.16666666666666666, 'gini = 0.499\nsamples = 316\nvalue = [153, 163]'),
 Text(0.375, 0.16666666666666666, 'gini = 0.219\nsamples = 32\nvalue = [4, 28]'),
 Text(0.75, 0.5, 'X[2] &lt;= 1.656\ngini = 0.497\nsamples = 452\nvalue = [243, 209]'),
 Text(0.625, 0.16666666666666666, 'gini = 0.495\nsamples = 434\nvalue = [239, 195]'),
 Text(0.875, 0.16666666666666666, 'gini = 0.346\nsamples = 18\nvalue = [4, 14]')]</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/split_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">y_hat <span class="op" style="color: #5E5E5E;">=</span> dt.predict(test_X)</span>
<span id="cb9-2">pd.DataFrame({<span class="st" style="color: #20794D;">"y_true"</span>: test_y, <span class="st" style="color: #20794D;">"y_hat"</span>: y_hat})</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>y_true</th>
      <th>y_hat</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>800</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>801</th>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>802</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>803</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>804</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>995</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>996</th>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>997</th>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>998</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>999</th>
      <td>1</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>200 rows × 2 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;">from</span> sklearn.tree <span class="im" style="color: #00769E;">import</span> DecisionTreeClassifier</span>
<span id="cb10-2"></span>
<span id="cb10-3">train_scores <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb10-4">test_scores <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">20</span>):</span>
<span id="cb10-7">    dt <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier(max_depth<span class="op" style="color: #5E5E5E;">=</span>i)</span>
<span id="cb10-8">    dt.fit(train_X, train_y)</span>
<span id="cb10-9">    train_scores[i] <span class="op" style="color: #5E5E5E;">=</span> dt.score(train_X, train_y)</span>
<span id="cb10-10">    </span>
<span id="cb10-11">    test_scores[i] <span class="op" style="color: #5E5E5E;">=</span> dt.score(test_X, test_y)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">scores_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">'train'</span>: train_scores, <span class="st" style="color: #20794D;">'test'</span>: test_scores})</span>
<span id="cb11-2">scores_df.plot()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>&lt;AxesSubplot:&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/split_files/figure-html/cell-11-output-2.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/split.html</guid>
  <pubDate>Tue, 17 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Grid Search</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/hyperparameter-1.html</link>
  <description><![CDATA[ 



<section id="hyperparameter-tuning" class="level4">
<h4 class="anchored" data-anchor-id="hyperparameter-tuning">Hyperparameter Tuning</h4>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> sklearn.tree <span class="im" style="color: #00769E;">import</span> DecisionTreeClassifier</span></code></pre></div>
</div>
</section>
<section id="dataset-creation" class="level4">
<h4 class="anchored" data-anchor-id="dataset-creation">Dataset creation</h4>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Create a DataFrame for classification containing four real features and one binary target</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({</span>
<span id="cb2-4">    <span class="st" style="color: #20794D;">'feature1'</span>: np.random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>),</span>
<span id="cb2-5">    <span class="st" style="color: #20794D;">'feature2'</span>: np.random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>),</span>
<span id="cb2-6">    <span class="st" style="color: #20794D;">'feature3'</span>: np.random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>),</span>
<span id="cb2-7">    <span class="st" style="color: #20794D;">'feature4'</span>: np.random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>),</span>
<span id="cb2-8">    <span class="st" style="color: #20794D;">'target'</span>: np.random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb2-9">})</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>feature1</th>
      <th>feature2</th>
      <th>feature3</th>
      <th>feature4</th>
      <th>target</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>29</td>
      <td>14</td>
      <td>66</td>
      <td>83</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>68</td>
      <td>70</td>
      <td>87</td>
      <td>72</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>42</td>
      <td>5</td>
      <td>40</td>
      <td>67</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2</td>
      <td>54</td>
      <td>79</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>81</td>
      <td>36</td>
      <td>35</td>
      <td>75</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">train_df <span class="op" style="color: #5E5E5E;">=</span> df[:<span class="dv" style="color: #AD0000;">50</span>]</span>
<span id="cb4-2">validation_df <span class="op" style="color: #5E5E5E;">=</span> df[<span class="dv" style="color: #AD0000;">50</span>:<span class="dv" style="color: #AD0000;">80</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">dt <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier()</span>
<span id="cb5-2">dt.fit(train_df[[<span class="st" style="color: #20794D;">'feature1'</span>, <span class="st" style="color: #20794D;">'feature2'</span>, <span class="st" style="color: #20794D;">'feature3'</span>, <span class="st" style="color: #20794D;">'feature4'</span>]], train_df[<span class="st" style="color: #20794D;">'target'</span>])</span>
<span id="cb5-3">dt</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked=""><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">DecisionTreeClassifier</label><div class="sk-toggleable__content"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">dt.score(validation_df[[<span class="st" style="color: #20794D;">'feature1'</span>, <span class="st" style="color: #20794D;">'feature2'</span>, <span class="st" style="color: #20794D;">'feature3'</span>, <span class="st" style="color: #20794D;">'feature4'</span>]], validation_df[<span class="st" style="color: #20794D;">'target'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>0.5333333333333333</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">dt <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier(criterion<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'entropy'</span>, max_depth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb8-2">dt.fit(train_df[[<span class="st" style="color: #20794D;">'feature1'</span>, <span class="st" style="color: #20794D;">'feature2'</span>, <span class="st" style="color: #20794D;">'feature3'</span>, <span class="st" style="color: #20794D;">'feature4'</span>]], train_df[<span class="st" style="color: #20794D;">'target'</span>])</span>
<span id="cb8-3">dt.score(validation_df[[<span class="st" style="color: #20794D;">'feature1'</span>, <span class="st" style="color: #20794D;">'feature2'</span>, <span class="st" style="color: #20794D;">'feature3'</span>, <span class="st" style="color: #20794D;">'feature4'</span>]], validation_df[<span class="st" style="color: #20794D;">'target'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>0.5666666666666667</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">hyperparams <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'criterion'</span>: [<span class="st" style="color: #20794D;">'gini'</span>, <span class="st" style="color: #20794D;">'entropy'</span>],</span>
<span id="cb10-2">               <span class="st" style="color: #20794D;">'max_depth'</span>: [<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">10</span>],</span>
<span id="cb10-3">               <span class="st" style="color: #20794D;">'min_samples_split'</span>: [<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">10</span>]}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">out <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;">for</span> c <span class="kw" style="color: #003B4F;">in</span> hyperparams[<span class="st" style="color: #20794D;">'criterion'</span>]:</span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;">for</span> d <span class="kw" style="color: #003B4F;">in</span> hyperparams[<span class="st" style="color: #20794D;">'max_depth'</span>]:</span>
<span id="cb11-4">        <span class="cf" style="color: #003B4F;">for</span> s <span class="kw" style="color: #003B4F;">in</span> hyperparams[<span class="st" style="color: #20794D;">'min_samples_split'</span>]:</span>
<span id="cb11-5">            dt <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier(criterion<span class="op" style="color: #5E5E5E;">=</span>c, max_depth<span class="op" style="color: #5E5E5E;">=</span>d, min_samples_split<span class="op" style="color: #5E5E5E;">=</span>s)</span>
<span id="cb11-6">            dt.fit(train_df[[<span class="st" style="color: #20794D;">'feature1'</span>, <span class="st" style="color: #20794D;">'feature2'</span>, <span class="st" style="color: #20794D;">'feature3'</span>, <span class="st" style="color: #20794D;">'feature4'</span>]], train_df[<span class="st" style="color: #20794D;">'target'</span>])</span>
<span id="cb11-7">            out[(c, d, s)] <span class="op" style="color: #5E5E5E;">=</span> dt.score(validation_df[[<span class="st" style="color: #20794D;">'feature1'</span>, <span class="st" style="color: #20794D;">'feature2'</span>, <span class="st" style="color: #20794D;">'feature3'</span>, <span class="st" style="color: #20794D;">'feature4'</span>]], validation_df[<span class="st" style="color: #20794D;">'target'</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">hp_ser <span class="op" style="color: #5E5E5E;">=</span> pd.Series(out)</span>
<span id="cb12-2">hp_ser.sort_values(ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>entropy  10  10    0.766667
         7   7     0.766667
         9   8     0.766667
         8   10    0.766667
             9     0.766667
                     ...   
gini     10  5     0.500000
         8   3     0.500000
         7   4     0.500000
             3     0.500000
         5   2     0.500000
Length: 162, dtype: float64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">hp_ser.idxmax()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>('entropy', 4, 6)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">best_dt <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier(criterion<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'entropy'</span>, max_depth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, min_samples_split<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">best_dt.fit(df[:<span class="dv" style="color: #AD0000;">80</span>][[<span class="st" style="color: #20794D;">'feature1'</span>, <span class="st" style="color: #20794D;">'feature2'</span>, <span class="st" style="color: #20794D;">'feature3'</span>, <span class="st" style="color: #20794D;">'feature4'</span>]], df[:<span class="dv" style="color: #AD0000;">80</span>][<span class="st" style="color: #20794D;">'target'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>DecisionTreeClassifier(criterion='entropy', max_depth=4, min_samples_split=6)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" checked=""><label for="sk-estimator-id-2" class="sk-toggleable__label sk-toggleable__label-arrow">DecisionTreeClassifier</label><div class="sk-toggleable__content"><pre>DecisionTreeClassifier(criterion='entropy', max_depth=4, min_samples_split=6)</pre></div></div></div></div></div>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">best_dt.score(df[<span class="dv" style="color: #AD0000;">80</span>:][[<span class="st" style="color: #20794D;">'feature1'</span>, <span class="st" style="color: #20794D;">'feature2'</span>, <span class="st" style="color: #20794D;">'feature3'</span>, <span class="st" style="color: #20794D;">'feature4'</span>]], df[<span class="dv" style="color: #AD0000;">80</span>:][<span class="st" style="color: #20794D;">'target'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>0.45</code></pre>
</div>
</div>
</section>
<section id="without-using-multiple-nested-loops" class="level4">
<h4 class="anchored" data-anchor-id="without-using-multiple-nested-loops">Without using multiple nested loops</h4>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="bu" style="color: null;">print</span>(hyperparams.items(), <span class="bu" style="color: null;">len</span>(hyperparams.items()))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_items([('criterion', ['gini', 'entropy']), ('max_depth', [2, 3, 4, 5, 6, 7, 8, 9, 10]), ('min_samples_split', [2, 3, 4, 5, 6, 7, 8, 9, 10])]) 3</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;">def</span> print_vec(x, y, z):</span>
<span id="cb22-2">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"[</span><span class="sc" style="color: #5E5E5E;">{</span>x<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> </span><span class="ch" style="color: #20794D;">\n</span><span class="sc" style="color: #5E5E5E;">{</span>y<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> </span><span class="ch" style="color: #20794D;">\n</span><span class="sc" style="color: #5E5E5E;">{</span>z<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]"</span>)</span>
<span id="cb22-3">print_vec(<span class="op" style="color: #5E5E5E;">*</span>hyperparams.items())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[('criterion', ['gini', 'entropy']) 
('max_depth', [2, 3, 4, 5, 6, 7, 8, 9, 10]) 
('min_samples_split', [2, 3, 4, 5, 6, 7, 8, 9, 10])]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">zip</span>(<span class="op" style="color: #5E5E5E;">*</span>hyperparams.items()))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>[('criterion', 'max_depth', 'min_samples_split'),
 (['gini', 'entropy'],
  [2, 3, 4, 5, 6, 7, 8, 9, 10],
  [2, 3, 4, 5, 6, 7, 8, 9, 10])]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">keys, values <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">zip</span>(<span class="op" style="color: #5E5E5E;">*</span>hyperparams.items())</span></code></pre></div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">keys</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>('criterion', 'max_depth', 'min_samples_split')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">values</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>(['gini', 'entropy'],
 [2, 3, 4, 5, 6, 7, 8, 9, 10],
 [2, 3, 4, 5, 6, 7, 8, 9, 10])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;">import</span> itertools</span>
<span id="cb31-2"><span class="bu" style="color: null;">list</span>(itertools.product(<span class="op" style="color: #5E5E5E;">*</span>values))[::<span class="dv" style="color: #AD0000;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>[('gini', 2, 2),
 ('gini', 3, 3),
 ('gini', 4, 4),
 ('gini', 5, 5),
 ('gini', 6, 6),
 ('gini', 7, 7),
 ('gini', 8, 8),
 ('gini', 9, 9),
 ('gini', 10, 10),
 ('entropy', 3, 2),
 ('entropy', 4, 3),
 ('entropy', 5, 4),
 ('entropy', 6, 5),
 ('entropy', 7, 6),
 ('entropy', 8, 7),
 ('entropy', 9, 8),
 ('entropy', 10, 9)]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">v <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(itertools.product(<span class="op" style="color: #5E5E5E;">*</span>values))</span>
<span id="cb33-2"><span class="bu" style="color: null;">print</span>(v)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>('gini', 2, 2)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">print_vec(<span class="op" style="color: #5E5E5E;">*</span><span class="bu" style="color: null;">zip</span>(keys, v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[('criterion', 'gini') 
('max_depth', 2) 
('min_samples_split', 2)]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="kw" style="color: #003B4F;">def</span> print_dict(<span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb37-2">    <span class="bu" style="color: null;">print</span>(kwargs)</span>
<span id="cb37-3"></span>
<span id="cb37-4">print_dict(<span class="op" style="color: #5E5E5E;">**</span>(<span class="bu" style="color: null;">dict</span>(<span class="bu" style="color: null;">zip</span>(keys, v))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'criterion': 'gini', 'max_depth': 2, 'min_samples_split': 2}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">out <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb39-2"><span class="cf" style="color: #003B4F;">for</span> v <span class="kw" style="color: #003B4F;">in</span> itertools.product(<span class="op" style="color: #5E5E5E;">*</span>values):</span>
<span id="cb39-3">    params <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>(<span class="bu" style="color: null;">zip</span>(keys, v))</span>
<span id="cb39-4">    dt<span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier(<span class="op" style="color: #5E5E5E;">**</span>params)</span>
<span id="cb39-5">    dt.fit(train_df[[<span class="st" style="color: #20794D;">'feature1'</span>, <span class="st" style="color: #20794D;">'feature2'</span>, <span class="st" style="color: #20794D;">'feature3'</span>, <span class="st" style="color: #20794D;">'feature4'</span>]], train_df[<span class="st" style="color: #20794D;">'target'</span>])</span>
<span id="cb39-6">    out[(params[<span class="st" style="color: #20794D;">'criterion'</span>], params[<span class="st" style="color: #20794D;">'max_depth'</span>], params[<span class="st" style="color: #20794D;">'min_samples_split'</span>])] <span class="op" style="color: #5E5E5E;">=</span> dt.score(validation_df[[<span class="st" style="color: #20794D;">'feature1'</span>, <span class="st" style="color: #20794D;">'feature2'</span>, <span class="st" style="color: #20794D;">'feature3'</span>, <span class="st" style="color: #20794D;">'feature4'</span>]], validation_df[<span class="st" style="color: #20794D;">'target'</span>])</span>
<span id="cb39-7">    </span></code></pre></div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">pd.Series(out).sort_values(ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>entropy  10  10    0.766667
         7   7     0.766667
         9   8     0.766667
         8   10    0.766667
             9     0.766667
                     ...   
         3   3     0.500000
             4     0.500000
             5     0.500000
gini     10  5     0.500000
             3     0.500000
Length: 162, dtype: float64</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/hyperparameter-1.html</guid>
  <pubDate>Tue, 17 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>DT Regression</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/dt-reg.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span></code></pre></div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"mins-played.csv"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Day</th>
      <th>Outlook</th>
      <th>Temp</th>
      <th>Humidity</th>
      <th>Wind</th>
      <th>Minutes Played</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>D1</td>
      <td>Sunny</td>
      <td>Hot</td>
      <td>High</td>
      <td>Weak</td>
      <td>20</td>
    </tr>
    <tr>
      <th>1</th>
      <td>D2</td>
      <td>Sunny</td>
      <td>Hot</td>
      <td>High</td>
      <td>Strong</td>
      <td>24</td>
    </tr>
    <tr>
      <th>2</th>
      <td>D3</td>
      <td>Overcast</td>
      <td>Hot</td>
      <td>High</td>
      <td>Weak</td>
      <td>40</td>
    </tr>
    <tr>
      <th>3</th>
      <td>D4</td>
      <td>Rain</td>
      <td>Mild</td>
      <td>High</td>
      <td>Weak</td>
      <td>50</td>
    </tr>
    <tr>
      <th>4</th>
      <td>D5</td>
      <td>Rain</td>
      <td>Cool</td>
      <td>Normal</td>
      <td>Weak</td>
      <td>60</td>
    </tr>
    <tr>
      <th>5</th>
      <td>D6</td>
      <td>Rain</td>
      <td>Cool</td>
      <td>Normal</td>
      <td>Strong</td>
      <td>10</td>
    </tr>
    <tr>
      <th>6</th>
      <td>D7</td>
      <td>Overcast</td>
      <td>Cool</td>
      <td>Normal</td>
      <td>Strong</td>
      <td>4</td>
    </tr>
    <tr>
      <th>7</th>
      <td>D8</td>
      <td>Sunny</td>
      <td>Mild</td>
      <td>High</td>
      <td>Weak</td>
      <td>10</td>
    </tr>
    <tr>
      <th>8</th>
      <td>D9</td>
      <td>Sunny</td>
      <td>Cool</td>
      <td>Normal</td>
      <td>Weak</td>
      <td>60</td>
    </tr>
    <tr>
      <th>9</th>
      <td>D10</td>
      <td>Rain</td>
      <td>Mild</td>
      <td>Normal</td>
      <td>Weak</td>
      <td>40</td>
    </tr>
    <tr>
      <th>10</th>
      <td>D11</td>
      <td>Sunny</td>
      <td>Mild</td>
      <td>High</td>
      <td>Strong</td>
      <td>45</td>
    </tr>
    <tr>
      <th>11</th>
      <td>D12</td>
      <td>Overcast</td>
      <td>Mild</td>
      <td>High</td>
      <td>Strong</td>
      <td>40</td>
    </tr>
    <tr>
      <th>12</th>
      <td>D13</td>
      <td>Overcast</td>
      <td>Hot</td>
      <td>Normal</td>
      <td>Weak</td>
      <td>35</td>
    </tr>
    <tr>
      <th>13</th>
      <td>D14</td>
      <td>Rain</td>
      <td>Mild</td>
      <td>High</td>
      <td>Strong</td>
      <td>20</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df[<span class="st" style="color: #20794D;">"Minutes Played"</span>].std()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>18.3111087402348</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;"># np.std(df["Minutes Played"].values)</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df.query(<span class="st" style="color: #20794D;">"Wind=='Weak'"</span>)[<span class="st" style="color: #20794D;">"Minutes Played"</span>].std()<span class="op" style="color: #5E5E5E;">*</span><span class="bu" style="color: null;">len</span>(df.query(<span class="st" style="color: #20794D;">"Wind=='Weak'"</span>))<span class="op" style="color: #5E5E5E;">/</span><span class="bu" style="color: null;">len</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>10.180585192846463</code></pre>
</div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">df.query(<span class="st" style="color: #20794D;">"Wind=='Strong'"</span>)[<span class="st" style="color: #20794D;">"Minutes Played"</span>].std()<span class="op" style="color: #5E5E5E;">*</span><span class="bu" style="color: null;">len</span>(df.query(<span class="st" style="color: #20794D;">"Wind=='Strong'"</span>))<span class="op" style="color: #5E5E5E;">/</span><span class="bu" style="color: null;">len</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>6.933944897151599</code></pre>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">out <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;">for</span> temp <span class="kw" style="color: #003B4F;">in</span> df[<span class="st" style="color: #20794D;">"Temp"</span>].unique():</span>
<span id="cb11-3">    <span class="bu" style="color: null;">print</span>(temp)</span>
<span id="cb11-4">    out[temp] <span class="op" style="color: #5E5E5E;">=</span> df.query(<span class="st" style="color: #20794D;">"Temp==@temp"</span>)[<span class="st" style="color: #20794D;">"Minutes Played"</span>].std()<span class="op" style="color: #5E5E5E;">*</span><span class="bu" style="color: null;">len</span>(df.query(<span class="st" style="color: #20794D;">"Temp==@temp"</span>))<span class="op" style="color: #5E5E5E;">/</span><span class="bu" style="color: null;">len</span>(df)</span>
<span id="cb11-5">    <span class="bu" style="color: null;">print</span>(out[temp])</span>
<span id="cb11-6">    <span class="bu" style="color: null;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hot
2.6636888135137133

Mild
6.696785704762413

Cool
8.770699519880226
</code></pre>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df[<span class="st" style="color: #20794D;">"Minutes Played"</span>].std() <span class="op" style="color: #5E5E5E;">-</span> pd.Series(out).<span class="bu" style="color: null;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>0.17993470207844808</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/dt-reg.html</guid>
  <pubDate>Thu, 12 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Pandas tips</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/pivot-cross.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span></code></pre></div>
</div>
<section id="dataset-creation" class="level3">
<h3 class="anchored" data-anchor-id="dataset-creation">Dataset creation</h3>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Create a DataFrame for whether or not a person plays tennis. </span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"># It has discrete features and 14 rows.</span></span>
<span id="cb2-3"></span>
<span id="cb2-4">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({</span>
<span id="cb2-5">    <span class="st" style="color: #20794D;">'Outlook'</span>: [<span class="st" style="color: #20794D;">'Sunny'</span>, <span class="st" style="color: #20794D;">'Sunny'</span>, <span class="st" style="color: #20794D;">'Overcast'</span>, <span class="st" style="color: #20794D;">'Rain'</span>, <span class="st" style="color: #20794D;">'Rain'</span>, <span class="st" style="color: #20794D;">'Rain'</span>, <span class="st" style="color: #20794D;">'Overcast'</span>, <span class="st" style="color: #20794D;">'Sunny'</span>, <span class="st" style="color: #20794D;">'Sunny'</span>, <span class="st" style="color: #20794D;">'Rain'</span>, <span class="st" style="color: #20794D;">'Sunny'</span>, <span class="st" style="color: #20794D;">'Overcast'</span>, <span class="st" style="color: #20794D;">'Overcast'</span>, <span class="st" style="color: #20794D;">'Rain'</span>],</span>
<span id="cb2-6">    <span class="st" style="color: #20794D;">'Temperature'</span>: [<span class="st" style="color: #20794D;">'Hot'</span>, <span class="st" style="color: #20794D;">'Hot'</span>, <span class="st" style="color: #20794D;">'Hot'</span>, <span class="st" style="color: #20794D;">'Mild'</span>, <span class="st" style="color: #20794D;">'Cool'</span>, <span class="st" style="color: #20794D;">'Cool'</span>, <span class="st" style="color: #20794D;">'Cool'</span>, <span class="st" style="color: #20794D;">'Mild'</span>, <span class="st" style="color: #20794D;">'Cool'</span>, <span class="st" style="color: #20794D;">'Mild'</span>, <span class="st" style="color: #20794D;">'Mild'</span>, <span class="st" style="color: #20794D;">'Mild'</span>, <span class="st" style="color: #20794D;">'Hot'</span>, <span class="st" style="color: #20794D;">'Mild'</span>],</span>
<span id="cb2-7">    <span class="st" style="color: #20794D;">'Humidity'</span>: [<span class="st" style="color: #20794D;">'High'</span>, <span class="st" style="color: #20794D;">'High'</span>, <span class="st" style="color: #20794D;">'High'</span>, <span class="st" style="color: #20794D;">'High'</span>, <span class="st" style="color: #20794D;">'Normal'</span>, <span class="st" style="color: #20794D;">'Normal'</span>, <span class="st" style="color: #20794D;">'Normal'</span>, <span class="st" style="color: #20794D;">'High'</span>, <span class="st" style="color: #20794D;">'Normal'</span>, <span class="st" style="color: #20794D;">'Normal'</span>, <span class="st" style="color: #20794D;">'Normal'</span>, <span class="st" style="color: #20794D;">'High'</span>, <span class="st" style="color: #20794D;">'Normal'</span>, <span class="st" style="color: #20794D;">'High'</span>],</span>
<span id="cb2-8">    <span class="st" style="color: #20794D;">'Wind'</span>: [<span class="st" style="color: #20794D;">'Weak'</span>, <span class="st" style="color: #20794D;">'Strong'</span>, <span class="st" style="color: #20794D;">'Weak'</span>, <span class="st" style="color: #20794D;">'Weak'</span>, <span class="st" style="color: #20794D;">'Weak'</span>, <span class="st" style="color: #20794D;">'Strong'</span>, <span class="st" style="color: #20794D;">'Strong'</span>, <span class="st" style="color: #20794D;">'Weak'</span>, <span class="st" style="color: #20794D;">'Weak'</span>, <span class="st" style="color: #20794D;">'Weak'</span>, <span class="st" style="color: #20794D;">'Strong'</span>, <span class="st" style="color: #20794D;">'Strong'</span>, <span class="st" style="color: #20794D;">'Weak'</span>, <span class="st" style="color: #20794D;">'Strong'</span>],</span>
<span id="cb2-9">    <span class="st" style="color: #20794D;">'PlayTennis'</span>: [<span class="st" style="color: #20794D;">'No'</span>, <span class="st" style="color: #20794D;">'No'</span>, <span class="st" style="color: #20794D;">'Yes'</span>, <span class="st" style="color: #20794D;">'Yes'</span>, <span class="st" style="color: #20794D;">'Yes'</span>, <span class="st" style="color: #20794D;">'No'</span>, <span class="st" style="color: #20794D;">'Yes'</span>, <span class="st" style="color: #20794D;">'No'</span>, <span class="st" style="color: #20794D;">'Yes'</span>, <span class="st" style="color: #20794D;">'Yes'</span>, <span class="st" style="color: #20794D;">'Yes'</span>, <span class="st" style="color: #20794D;">'Yes'</span>, <span class="st" style="color: #20794D;">'Yes'</span>, <span class="st" style="color: #20794D;">'No'</span>]</span>
<span id="cb2-10">})</span></code></pre></div>
</div>
</section>
<section id="counting-values-of-outcome-variable-useful-for-calculating-entropy" class="level3">
<h3 class="anchored" data-anchor-id="counting-values-of-outcome-variable-useful-for-calculating-entropy">Counting values of outcome variable (useful for calculating entropy)</h3>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">ser <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'PlayTennis'</span>].value_counts()</span>
<span id="cb3-2">ser</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>Yes    9
No     5
Name: PlayTennis, dtype: int64</code></pre>
</div>
</div>
</section>
<section id="using-cross-tab-to-quickly-capture-the-relationship-between-two-variables" class="level3">
<h3 class="anchored" data-anchor-id="using-cross-tab-to-quickly-capture-the-relationship-between-two-variables">Using cross tab to quickly capture the relationship between two variables</h3>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df_out <span class="op" style="color: #5E5E5E;">=</span> pd.crosstab(df[<span class="st" style="color: #20794D;">'Outlook'</span>], df[<span class="st" style="color: #20794D;">'PlayTennis'</span>])</span>
<span id="cb5-2">df_out</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>PlayTennis</th>
      <th>No</th>
      <th>Yes</th>
    </tr>
    <tr>
      <th>Outlook</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Overcast</th>
      <td>0</td>
      <td>4</td>
    </tr>
    <tr>
      <th>Rain</th>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>Sunny</th>
      <td>3</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df_out.index, df_out.columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>(Index(['Overcast', 'Rain', 'Sunny'], dtype='object', name='Outlook'),
 Index(['No', 'Yes'], dtype='object', name='PlayTennis'))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">e <span class="op" style="color: #5E5E5E;">=</span> df_out.<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb8-2">e</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Outlook
Overcast    4
Rain        5
Sunny       5
dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Find the fraction of each row that is a 'Yes' and 'No' for PlayTennis</span></span>
<span id="cb10-2">df_out[<span class="st" style="color: #20794D;">'Yes'</span>] <span class="op" style="color: #5E5E5E;">=</span> df_out[<span class="st" style="color: #20794D;">'Yes'</span>] <span class="op" style="color: #5E5E5E;">/</span> e</span>
<span id="cb10-3">df_out[<span class="st" style="color: #20794D;">'No'</span>] <span class="op" style="color: #5E5E5E;">=</span> df_out[<span class="st" style="color: #20794D;">'No'</span>] <span class="op" style="color: #5E5E5E;">/</span> e</span>
<span id="cb10-4">df_out</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>PlayTennis</th>
      <th>No</th>
      <th>Yes</th>
    </tr>
    <tr>
      <th>Outlook</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Overcast</th>
      <td>0.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>Rain</th>
      <td>0.4</td>
      <td>0.6</td>
    </tr>
    <tr>
      <th>Sunny</th>
      <td>0.6</td>
      <td>0.4</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="more-efficient-cross-tabulation-using-normalize" class="level3">
<h3 class="anchored" data-anchor-id="more-efficient-cross-tabulation-using-normalize">More efficient cross tabulation (using normalize)</h3>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">pd.crosstab(df[<span class="st" style="color: #20794D;">'Outlook'</span>], df[<span class="st" style="color: #20794D;">'PlayTennis'</span>], normalize<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>PlayTennis</th>
      <th>No</th>
      <th>Yes</th>
    </tr>
    <tr>
      <th>Outlook</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Overcast</th>
      <td>0.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>Rain</th>
      <td>0.4</td>
      <td>0.6</td>
    </tr>
    <tr>
      <th>Sunny</th>
      <td>0.6</td>
      <td>0.4</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="using-pd.groupby" class="level3">
<h3 class="anchored" data-anchor-id="using-pd.groupby">Using pd.groupby()</h3>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df.groupby([<span class="st" style="color: #20794D;">"Outlook"</span>]).groups</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>{'Overcast': [2, 6, 11, 12], 'Rain': [3, 4, 5, 9, 13], 'Sunny': [0, 1, 7, 8, 10]}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">df.groupby([<span class="st" style="color: #20794D;">"Outlook"</span>]).get_group(<span class="st" style="color: #20794D;">"Sunny"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Outlook</th>
      <th>Temperature</th>
      <th>Humidity</th>
      <th>Wind</th>
      <th>PlayTennis</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Sunny</td>
      <td>Hot</td>
      <td>High</td>
      <td>Weak</td>
      <td>No</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Sunny</td>
      <td>Hot</td>
      <td>High</td>
      <td>Strong</td>
      <td>No</td>
    </tr>
    <tr>
      <th>7</th>
      <td>Sunny</td>
      <td>Mild</td>
      <td>High</td>
      <td>Weak</td>
      <td>No</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Sunny</td>
      <td>Cool</td>
      <td>Normal</td>
      <td>Weak</td>
      <td>Yes</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Sunny</td>
      <td>Mild</td>
      <td>Normal</td>
      <td>Strong</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">df.groupby([<span class="st" style="color: #20794D;">"Outlook"</span>]).get_group(<span class="st" style="color: #20794D;">"Sunny"</span>)[<span class="st" style="color: #20794D;">"PlayTennis"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>0      No
1      No
7      No
8     Yes
10    Yes
Name: PlayTennis, dtype: object</code></pre>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">df.groupby([<span class="st" style="color: #20794D;">"Outlook"</span>]).get_group(<span class="st" style="color: #20794D;">"Sunny"</span>)[<span class="st" style="color: #20794D;">"PlayTennis"</span>].value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>No     3
Yes    2
Name: PlayTennis, dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">df.groupby([<span class="st" style="color: #20794D;">"Outlook"</span>, <span class="st" style="color: #20794D;">"PlayTennis"</span>]).groups</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>{('Overcast', 'Yes'): [2, 6, 11, 12], ('Rain', 'No'): [5, 13], ('Rain', 'Yes'): [3, 4, 9], ('Sunny', 'No'): [0, 1, 7], ('Sunny', 'Yes'): [8, 10]}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">df.groupby([<span class="st" style="color: #20794D;">"Outlook"</span>, <span class="st" style="color: #20794D;">"PlayTennis"</span>]).get_group((<span class="st" style="color: #20794D;">"Sunny"</span>, <span class="st" style="color: #20794D;">"Yes"</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Outlook</th>
      <th>Temperature</th>
      <th>Humidity</th>
      <th>Wind</th>
      <th>PlayTennis</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>8</th>
      <td>Sunny</td>
      <td>Cool</td>
      <td>Normal</td>
      <td>Weak</td>
      <td>Yes</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Sunny</td>
      <td>Mild</td>
      <td>Normal</td>
      <td>Strong</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">df.groupby([<span class="st" style="color: #20794D;">"Outlook"</span>, <span class="st" style="color: #20794D;">"PlayTennis"</span>]).size()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>Outlook   PlayTennis
Overcast  Yes           4
Rain      No            2
          Yes           3
Sunny     No            3
          Yes           2
dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">df.groupby([<span class="st" style="color: #20794D;">"Outlook"</span>, <span class="st" style="color: #20794D;">"PlayTennis"</span>]).size().index</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>MultiIndex([('Overcast', 'Yes'),
            (    'Rain',  'No'),
            (    'Rain', 'Yes'),
            (   'Sunny',  'No'),
            (   'Sunny', 'Yes')],
           names=['Outlook', 'PlayTennis'])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df.groupby([<span class="st" style="color: #20794D;">"Outlook"</span>, <span class="st" style="color: #20794D;">"PlayTennis"</span>]).size().unstack()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>PlayTennis</th>
      <th>No</th>
      <th>Yes</th>
    </tr>
    <tr>
      <th>Outlook</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Overcast</th>
      <td>NaN</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>Rain</th>
      <td>2.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>Sunny</th>
      <td>3.0</td>
      <td>2.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">df.groupby([<span class="st" style="color: #20794D;">"Outlook"</span>, <span class="st" style="color: #20794D;">"PlayTennis"</span>]).size().unstack(fill_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>PlayTennis</th>
      <th>No</th>
      <th>Yes</th>
    </tr>
    <tr>
      <th>Outlook</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Overcast</th>
      <td>0</td>
      <td>4</td>
    </tr>
    <tr>
      <th>Rain</th>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>Sunny</th>
      <td>3</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="using-pd.pivot_table" class="level3">
<h3 class="anchored" data-anchor-id="using-pd.pivot_table">Using pd.pivot_table</h3>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">pivot_table <span class="op" style="color: #5E5E5E;">=</span> df.pivot_table(index<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Outlook'</span>, columns<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'PlayTennis'</span>, aggfunc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'size'</span>, fill_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb28-2">pivot_table</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>PlayTennis</th>
      <th>No</th>
      <th>Yes</th>
    </tr>
    <tr>
      <th>Outlook</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Overcast</th>
      <td>0</td>
      <td>4</td>
    </tr>
    <tr>
      <th>Rain</th>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>Sunny</th>
      <td>3</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">df_out.plot(kind<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bar'</span>, stacked<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>&lt;AxesSubplot:xlabel='Outlook'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/pivot-cross_files/figure-html/cell-21-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">df_out.plot(kind<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bar'</span>, stacked<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>&lt;AxesSubplot:xlabel='Outlook'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/pivot-cross_files/figure-html/cell-22-output-2.png" class="img-fluid"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/pivot-cross.html</guid>
  <pubDate>Thu, 12 Jan 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
