<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>ES654</title>
<link>https://github.com/nipunbatra/ml2023/notebooks/index.html</link>
<atom:link href="https://github.com/nipunbatra/ml2023/notebooks/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.475</generator>
<lastBuildDate>Sat, 13 May 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Parametric v/s Non-Parametric</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/parametric-non-parametric.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;">import</span> LinearRegression, LogisticRegression</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> sklearn.neighbors <span class="im" style="color: #00769E;">import</span> KNeighborsClassifier, KNeighborsRegressor</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> sklearn.tree <span class="im" style="color: #00769E;">import</span> DecisionTreeClassifier, DecisionTreeRegressor</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> sklearn.neural_network <span class="im" style="color: #00769E;">import</span> MLPClassifier, MLPRegressor</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<p>Aim:</p>
<p>Given Dataset (X, y), learn a function <code>f</code> that maps <code>X</code> to <code>y</code>, i.e.&nbsp;<code>y = f(X)</code>.</p>
<p>We will consider two cases: - Parametric: <code>f</code> is a function of a fixed number of parameters, e.g.&nbsp;<code>f(x) = ax + b</code> - Non-parametric: <code>f</code> is a function of number of parameters that grows with the size of the dataset.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Dataset for classification. Trivial dataset with 1 point in each class.</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">X <span class="op" style="color: #5E5E5E;">=</span> np.array([[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb2-4">y <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Plot the dataset</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], c<span class="op" style="color: #5E5E5E;">=</span>y, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'viridis'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f772d036640&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/parametric-non-parametric_files/figure-html/cell-4-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Plot the decision boundary of a logistic regression classifier, KNN classifier, decision tree classifier, and a neural network classifier.</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;">def</span> plot_decision_boundary(model, X, y):</span>
<span id="cb5-4">    h <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.02</span></span>
<span id="cb5-5">    x_min, x_max <span class="op" style="color: #5E5E5E;">=</span> X[:, <span class="dv" style="color: #AD0000;">0</span>].<span class="bu" style="color: null;">min</span>() <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">.5</span>, X[:, <span class="dv" style="color: #AD0000;">0</span>].<span class="bu" style="color: null;">max</span>() <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">.5</span></span>
<span id="cb5-6">    y_min, y_max <span class="op" style="color: #5E5E5E;">=</span> X[:, <span class="dv" style="color: #AD0000;">1</span>].<span class="bu" style="color: null;">min</span>() <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">.5</span>, X[:, <span class="dv" style="color: #AD0000;">1</span>].<span class="bu" style="color: null;">max</span>() <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">.5</span></span>
<span id="cb5-7">    xx, yy <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))</span>
<span id="cb5-8">    Z <span class="op" style="color: #5E5E5E;">=</span> model.predict(np.c_[xx.ravel(), yy.ravel()])</span>
<span id="cb5-9">    Z <span class="op" style="color: #5E5E5E;">=</span> Z.reshape(xx.shape)</span>
<span id="cb5-10">    plt.contourf(xx, yy, Z, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'viridis'</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb5-11">    plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], c<span class="op" style="color: #5E5E5E;">=</span>y, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'viridis'</span>)</span>
<span id="cb5-12">    plt.xlim(xx.<span class="bu" style="color: null;">min</span>(), xx.<span class="bu" style="color: null;">max</span>())</span>
<span id="cb5-13">    plt.ylim(yy.<span class="bu" style="color: null;">min</span>(), yy.<span class="bu" style="color: null;">max</span>())</span>
<span id="cb5-14"></span>
<span id="cb5-15">    </span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Instantiate the models</span></span>
<span id="cb6-2"></span>
<span id="cb6-3">lr <span class="op" style="color: #5E5E5E;">=</span> LogisticRegression()</span>
<span id="cb6-4">knn <span class="op" style="color: #5E5E5E;">=</span> KNeighborsClassifier(n_neighbors<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-5">dt <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier()</span>
<span id="cb6-6">nn <span class="op" style="color: #5E5E5E;">=</span> MLPClassifier(hidden_layer_sizes<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>), activation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'logistic'</span>, max_iter<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10000</span>)</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;"># Plot the decision boundaries</span></span>
<span id="cb6-9"></span>
<span id="cb6-10">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="cf" style="color: #003B4F;">for</span> i, model <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>([lr, knn, dt, nn]):</span>
<span id="cb6-13">    plt.subplot(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>, i <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-14">    model.fit(X, y)</span>
<span id="cb6-15">    plot_decision_boundary(model, X, y)</span>
<span id="cb6-16">    plt.title(model.__class__.<span class="va" style="color: #111111;">__name__</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/parametric-non-parametric_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<section id="learnt-functions" class="level2">
<h2 class="anchored" data-anchor-id="learnt-functions">Learnt functions</h2>
<section id="logistic-regression" class="level3">
<h3 class="anchored" data-anchor-id="logistic-regression">Logistic Regression</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">logits <span class="op" style="color: #5E5E5E;">=</span> X <span class="op" style="color: #5E5E5E;">@</span> w <span class="op" style="color: #5E5E5E;">+</span> b</span>
<span id="cb7-2">prob <span class="op" style="color: #5E5E5E;">=</span> sigmoid(logits)</span>
<span id="cb7-3">y_pred <span class="op" style="color: #5E5E5E;">=</span> prob <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span></span></code></pre></div>
</section>
<section id="decision-tree" class="level3">
<h3 class="anchored" data-anchor-id="decision-tree">Decision Tree</h3>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;">from</span> sklearn.tree <span class="im" style="color: #00769E;">import</span> export_graphviz</span>
<span id="cb8-2"><span class="im" style="color: #00769E;">import</span> graphviz</span>
<span id="cb8-3"></span>
<span id="cb8-4">dot_data <span class="op" style="color: #5E5E5E;">=</span> export_graphviz(dt, out_file<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, feature_names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'x1'</span>, <span class="st" style="color: #20794D;">'x2'</span>], class_names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'0'</span>, <span class="st" style="color: #20794D;">'1'</span>], filled<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, rounded<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, special_characters<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb8-5">graph <span class="op" style="color: #5E5E5E;">=</span> graphviz.Source(dot_data)</span>
<span id="cb8-6">graph</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/parametric-non-parametric_files/figure-html/cell-7-output-1.svg" class="img-fluid"></p>
</div>
</div>
</section>
<section id="mlp" class="level3">
<h3 class="anchored" data-anchor-id="mlp">MLP</h3>
<pre><code>logits = nn.predict(X)
probs = sigmoid(logits)
y_pred = probs&gt;0.5</code></pre>
</section>
<section id="knn" class="level3">
<h3 class="anchored" data-anchor-id="knn">KNN</h3>
<pre><code>if X1 &lt; 0.5 and X2 &lt; 0.5:
    y = 0
elif X1 &lt; 0.5 and X2 &gt;= 0.5:
    ...</code></pre>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Sophisticated dataset with 2 classes</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="im" style="color: #00769E;">from</span> sklearn.datasets <span class="im" style="color: #00769E;">import</span> make_blobs</span>
<span id="cb11-4"></span>
<span id="cb11-5">X, y <span class="op" style="color: #5E5E5E;">=</span> make_blobs(n_samples<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, centers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, n_features<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, cluster_std<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;"># Plot the dataset</span></span>
<span id="cb11-8"></span>
<span id="cb11-9">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], c<span class="op" style="color: #5E5E5E;">=</span>y, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'viridis'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f7a011d2d30&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/parametric-non-parametric_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">lr <span class="op" style="color: #5E5E5E;">=</span> LogisticRegression()</span>
<span id="cb13-2">knn <span class="op" style="color: #5E5E5E;">=</span> KNeighborsClassifier(n_neighbors<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb13-3">dt <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier()</span>
<span id="cb13-4">nn <span class="op" style="color: #5E5E5E;">=</span> MLPClassifier(hidden_layer_sizes<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>), activation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'logistic'</span>, max_iter<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10000</span>)</span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;"># Plot the decision boundaries</span></span>
<span id="cb13-7"></span>
<span id="cb13-8">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="cf" style="color: #003B4F;">for</span> i, model <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>([lr, knn, dt, nn]):</span>
<span id="cb13-11">    plt.subplot(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>, i <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb13-12">    model.fit(X, y)</span>
<span id="cb13-13">    plot_decision_boundary(model, X, y)</span>
<span id="cb13-14">    plt.title(model.__class__.<span class="va" style="color: #111111;">__name__</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/parametric-non-parametric_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">dot_data <span class="op" style="color: #5E5E5E;">=</span> export_graphviz(dt, out_file<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, feature_names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'x1'</span>, <span class="st" style="color: #20794D;">'x2'</span>], class_names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'0'</span>, <span class="st" style="color: #20794D;">'1'</span>], filled<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, rounded<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, special_characters<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb14-2">graph <span class="op" style="color: #5E5E5E;">=</span> graphviz.Source(dot_data)</span>
<span id="cb14-3">graph</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/parametric-non-parametric_files/figure-html/cell-10-output-1.svg" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">dt.get_depth(), dt.get_n_leaves()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>(9, 24)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">lr.coef_</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>array([[ 0.19758375, -0.7298237 ]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Now, more noise</span></span>
<span id="cb19-2"></span>
<span id="cb19-3">X, y <span class="op" style="color: #5E5E5E;">=</span> make_blobs(n_samples<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, centers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, n_features<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, cluster_std<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;"># Plot the dataset</span></span>
<span id="cb19-6"></span>
<span id="cb19-7">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], c<span class="op" style="color: #5E5E5E;">=</span>y, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'viridis'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f772abcffa0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/parametric-non-parametric_files/figure-html/cell-13-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">lr <span class="op" style="color: #5E5E5E;">=</span> LogisticRegression()</span>
<span id="cb21-2">knn <span class="op" style="color: #5E5E5E;">=</span> KNeighborsClassifier(n_neighbors<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb21-3">dt <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier()</span>
<span id="cb21-4">nn <span class="op" style="color: #5E5E5E;">=</span> MLPClassifier(hidden_layer_sizes<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>), activation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'logistic'</span>, max_iter<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10000</span>)</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;"># Plot the decision boundaries</span></span>
<span id="cb21-7"></span>
<span id="cb21-8">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb21-9"></span>
<span id="cb21-10"><span class="cf" style="color: #003B4F;">for</span> i, model <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>([lr, knn, dt, nn]):</span>
<span id="cb21-11">    plt.subplot(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>, i <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb21-12">    model.fit(X, y)</span>
<span id="cb21-13">    plot_decision_boundary(model, X, y)</span>
<span id="cb21-14">    plt.title(model.__class__.<span class="va" style="color: #111111;">__name__</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/parametric-non-parametric_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">dot_data <span class="op" style="color: #5E5E5E;">=</span> export_graphviz(dt, out_file<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, feature_names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'x1'</span>, <span class="st" style="color: #20794D;">'x2'</span>], class_names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'0'</span>, <span class="st" style="color: #20794D;">'1'</span>], filled<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, rounded<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, special_characters<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb22-2">graph <span class="op" style="color: #5E5E5E;">=</span> graphviz.Source(dot_data)</span>
<span id="cb22-3">graph</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/parametric-non-parametric_files/figure-html/cell-15-output-1.svg" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">dt.get_depth(), dt.get_n_leaves()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>(11, 36)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">lr.coef_</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>array([[ 0.03933004, -0.10323595]])</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/parametric-non-parametric.html</guid>
  <pubDate>Sat, 13 May 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Curse of Dimensionality</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/curse-dimensionality.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># </span></span>
<span id="cb2-2">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb2-3">np.random.seed(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># Get `n` points in 1d space uniformly distributed from 0 to 1</span></span>
<span id="cb2-5">x <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, n)</span>
<span id="cb2-6">plt.scatter(x, np.zeros(n), c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f189ed50610&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/curse-dimensionality_files/figure-html/cell-3-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Pick a random test point</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">x_test <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;"># Mark the nearest point and farthest point</span></span>
<span id="cb4-7">x_nearest <span class="op" style="color: #5E5E5E;">=</span> x[np.argmin(np.<span class="bu" style="color: null;">abs</span>(x <span class="op" style="color: #5E5E5E;">-</span> x_test))]</span>
<span id="cb4-8">x_farthest <span class="op" style="color: #5E5E5E;">=</span> x[np.argmax(np.<span class="bu" style="color: null;">abs</span>(x <span class="op" style="color: #5E5E5E;">-</span> x_test))]</span>
<span id="cb4-9"></span>
<span id="cb4-10">plt.scatter(x, np.zeros(n), c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb4-11">plt.scatter(x_test, <span class="dv" style="color: #AD0000;">0</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'b'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'*'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'test'</span>)</span>
<span id="cb4-12">plt.scatter(x_nearest, <span class="dv" style="color: #AD0000;">0</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'g'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'nearest'</span>)</span>
<span id="cb4-13">plt.scatter(x_farthest, <span class="dv" style="color: #AD0000;">0</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'farthest'</span>)</span>
<span id="cb4-14">plt.legend()</span>
<span id="cb4-15"></span>
<span id="cb4-16">ratio <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">abs</span>(x_test <span class="op" style="color: #5E5E5E;">-</span> x_nearest) <span class="op" style="color: #5E5E5E;">/</span> np.<span class="bu" style="color: null;">abs</span>(x_test <span class="op" style="color: #5E5E5E;">-</span> x_farthest)</span>
<span id="cb4-17"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Ratio of distances: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(ratio))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Ratio of distances: [0.040316]</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/curse-dimensionality_files/figure-html/cell-4-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Do the above experiment for 1000 times</span></span>
<span id="cb6-2"></span>
<span id="cb6-3">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb6-4">np.random.seed(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb6-5"></span>
<span id="cb6-6">n_exp <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1000</span></span>
<span id="cb6-7">ratios <span class="op" style="color: #5E5E5E;">=</span> np.zeros(n_exp)</span>
<span id="cb6-8"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_exp):</span>
<span id="cb6-9">    x <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, n)</span>
<span id="cb6-10">    x_test <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-11">    x_nearest <span class="op" style="color: #5E5E5E;">=</span> x[np.argmin(np.<span class="bu" style="color: null;">abs</span>(x <span class="op" style="color: #5E5E5E;">-</span> x_test))]</span>
<span id="cb6-12">    x_farthest <span class="op" style="color: #5E5E5E;">=</span> x[np.argmax(np.<span class="bu" style="color: null;">abs</span>(x <span class="op" style="color: #5E5E5E;">-</span> x_test))]</span>
<span id="cb6-13">    ratios[i] <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">abs</span>(x_test <span class="op" style="color: #5E5E5E;">-</span> x_nearest) <span class="op" style="color: #5E5E5E;">/</span> np.<span class="bu" style="color: null;">abs</span>(x_test <span class="op" style="color: #5E5E5E;">-</span> x_farthest)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb7-2">sns.displot(ratios, kde<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x7f18a75d6970&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/curse-dimensionality_files/figure-html/cell-6-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Repeat the experiment in 2d</span></span>
<span id="cb9-2"></span>
<span id="cb9-3">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb9-4">np.random.seed(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb9-5">x <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, (n, <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb9-6">plt.scatter(x[:, <span class="dv" style="color: #AD0000;">0</span>], x[:, <span class="dv" style="color: #AD0000;">1</span>], c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f189ec1a9d0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/curse-dimensionality_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Pick a random test point</span></span>
<span id="cb11-2"></span>
<span id="cb11-3">x_test <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;"># Mark the nearest point and farthest point</span></span>
<span id="cb11-6">x_nearest <span class="op" style="color: #5E5E5E;">=</span> x[np.argmin(np.linalg.norm(x <span class="op" style="color: #5E5E5E;">-</span> x_test, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))]</span>
<span id="cb11-7">x_farthest <span class="op" style="color: #5E5E5E;">=</span> x[np.argmax(np.linalg.norm(x <span class="op" style="color: #5E5E5E;">-</span> x_test, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))]</span>
<span id="cb11-8"></span>
<span id="cb11-9">plt.scatter(x[:, <span class="dv" style="color: #AD0000;">0</span>], x[:, <span class="dv" style="color: #AD0000;">1</span>], c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb11-10">plt.scatter(x_test[<span class="dv" style="color: #AD0000;">0</span>], x_test[<span class="dv" style="color: #AD0000;">1</span>], c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'b'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'*'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'test'</span>)</span>
<span id="cb11-11">plt.scatter(x_nearest[<span class="dv" style="color: #AD0000;">0</span>], x_nearest[<span class="dv" style="color: #AD0000;">1</span>], c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'g'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'nearest'</span>)</span>
<span id="cb11-12">plt.scatter(x_farthest[<span class="dv" style="color: #AD0000;">0</span>], x_farthest[<span class="dv" style="color: #AD0000;">1</span>], c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'farthest'</span>)</span>
<span id="cb11-13">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>&lt;matplotlib.legend.Legend at 0x7f189eb8eb80&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/curse-dimensionality_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># Find the ratio of distances between the nearest and farthest points in 1000 experiments</span></span>
<span id="cb13-2"></span>
<span id="cb13-3">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb13-4">np.random.seed(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb13-5"></span>
<span id="cb13-6">ratios_2d <span class="op" style="color: #5E5E5E;">=</span> np.zeros(n_exp)</span>
<span id="cb13-7"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_exp):</span>
<span id="cb13-8">    x <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, (n, <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb13-9">    x_test <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb13-10">    x_nearest <span class="op" style="color: #5E5E5E;">=</span> x[np.argmin(np.linalg.norm(x <span class="op" style="color: #5E5E5E;">-</span> x_test, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))]</span>
<span id="cb13-11">    x_farthest <span class="op" style="color: #5E5E5E;">=</span> x[np.argmax(np.linalg.norm(x <span class="op" style="color: #5E5E5E;">-</span> x_test, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))]</span>
<span id="cb13-12">    ratios_2d[i] <span class="op" style="color: #5E5E5E;">=</span> np.linalg.norm(x_test <span class="op" style="color: #5E5E5E;">-</span> x_nearest) <span class="op" style="color: #5E5E5E;">/</span> np.linalg.norm(x_test <span class="op" style="color: #5E5E5E;">-</span> x_farthest)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">sns.displot(ratios_2d, kde<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x7f189eb43e80&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/curse-dimensionality_files/figure-html/cell-10-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Now, let's do the same experiment in dimensions varying from 1 to 20</span></span>
<span id="cb16-2"></span>
<span id="cb16-3">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb16-4">np.random.seed(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb16-5">n_dim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">40</span></span>
<span id="cb16-6">ratios_nd <span class="op" style="color: #5E5E5E;">=</span> np.zeros((n_exp, n_dim))</span>
<span id="cb16-7"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_exp):</span>
<span id="cb16-8">    <span class="cf" style="color: #003B4F;">for</span> d <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, n_dim <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb16-9">        x <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, (n, d))</span>
<span id="cb16-10">        x_test <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, d)</span>
<span id="cb16-11">        x_nearest <span class="op" style="color: #5E5E5E;">=</span> x[np.argmin(np.linalg.norm(x <span class="op" style="color: #5E5E5E;">-</span> x_test, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))]</span>
<span id="cb16-12">        x_farthest <span class="op" style="color: #5E5E5E;">=</span> x[np.argmax(np.linalg.norm(x <span class="op" style="color: #5E5E5E;">-</span> x_test, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))]</span>
<span id="cb16-13">        ratios_nd[i, d <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">=</span> np.linalg.norm(x_test <span class="op" style="color: #5E5E5E;">-</span> x_nearest) <span class="op" style="color: #5E5E5E;">/</span> np.linalg.norm(x_test <span class="op" style="color: #5E5E5E;">-</span> x_farthest)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Plot the ratio of distances between the nearest and farthest points in 1000 experiments for each dimension</span></span>
<span id="cb17-2"></span>
<span id="cb17-3">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb17-4">plt.plot(np.arange(<span class="dv" style="color: #AD0000;">1</span>, n_dim <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>), np.mean(ratios_nd, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="st" style="color: #20794D;">'o-'</span>)</span>
<span id="cb17-5">plt.xlabel(<span class="st" style="color: #20794D;">'Dimension'</span>)</span>
<span id="cb17-6">plt.ylabel(<span class="st" style="color: #20794D;">'Ratio of distances'</span>)</span>
<span id="cb17-7">plt.title(<span class="st" style="color: #20794D;">'Ratio of distances between the nearest and farthest points in 1000 experiments for each dimension'</span>)</span>
<span id="cb17-8">plt.ylim(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">1.</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>(0.0, 1.0)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/curse-dimensionality_files/figure-html/cell-12-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Let us now see what happens if we have more points in higher dimensions</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;"># 1d space: 10 points</span></span>
<span id="cb19-3"></span>
<span id="cb19-4">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb19-5">np.random.seed(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb19-6">n_dim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb19-7">ratios_nd_more_points <span class="op" style="color: #5E5E5E;">=</span> np.zeros((n_exp, n_dim))</span>
<span id="cb19-8">num_points <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">50</span>, <span class="dv" style="color: #AD0000;">200</span>, <span class="dv" style="color: #AD0000;">2000</span>]</span>
<span id="cb19-9"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_exp):</span>
<span id="cb19-10">    <span class="cf" style="color: #003B4F;">for</span> d <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, n_dim <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb19-11">        x <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, (num_points[d<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], d))</span>
<span id="cb19-12">        x_test <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, d)</span>
<span id="cb19-13">        x_nearest <span class="op" style="color: #5E5E5E;">=</span> x[np.argmin(np.linalg.norm(x <span class="op" style="color: #5E5E5E;">-</span> x_test, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))]</span>
<span id="cb19-14">        x_farthest <span class="op" style="color: #5E5E5E;">=</span> x[np.argmax(np.linalg.norm(x <span class="op" style="color: #5E5E5E;">-</span> x_test, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))]</span>
<span id="cb19-15">        ratios_nd_more_points[i, d <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">=</span> np.linalg.norm(x_test <span class="op" style="color: #5E5E5E;">-</span> x_nearest) <span class="op" style="color: #5E5E5E;">/</span> np.linalg.norm(x_test <span class="op" style="color: #5E5E5E;">-</span> x_farthest)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># Plot the ratio of distances between the nearest and farthest points in 1000 experiments for each dimension</span></span>
<span id="cb20-2"></span>
<span id="cb20-3">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb20-4">plt.plot(np.arange(<span class="dv" style="color: #AD0000;">1</span>, n_dim <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>), np.mean(ratios_nd_more_points, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="st" style="color: #20794D;">'o-'</span>)</span>
<span id="cb20-5">plt.xlabel(<span class="st" style="color: #20794D;">'Dimension'</span>)</span>
<span id="cb20-6">plt.ylabel(<span class="st" style="color: #20794D;">'Ratio of distances'</span>)</span>
<span id="cb20-7">plt.title(<span class="st" style="color: #20794D;">'Ratio of distances between the nearest and farthest points in 1000 experiments for each dimension'</span>)</span>
<span id="cb20-8">plt.ylim(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>(0.0, 1.0)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/curse-dimensionality_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/curse-dimensionality.html</guid>
  <pubDate>Sun, 16 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Movie Recommendation using KNN and Matrix Factorization</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/movie-recommendation-knn-mf.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Generate some toy user and movie data</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># Number of users</span></span>
<span id="cb2-4">n_users <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># Number of movies</span></span>
<span id="cb2-7">n_movies <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;"># Number of ratings</span></span>
<span id="cb2-10">n_ratings <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1000</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;"># Generate random user ids</span></span>
<span id="cb2-13">user_ids <span class="op" style="color: #5E5E5E;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;">0</span>, n_users, n_ratings)</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;"># Generate random movie ids</span></span>
<span id="cb2-16">movie_ids <span class="op" style="color: #5E5E5E;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;">0</span>, n_movies, n_ratings)</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;"># Generate random ratings</span></span>
<span id="cb2-19">ratings <span class="op" style="color: #5E5E5E;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">6</span>, n_ratings)</span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;"># Create a dataframe with the data</span></span>
<span id="cb2-22">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">'user_id'</span>: user_ids, <span class="st" style="color: #20794D;">'movie_id'</span>: movie_ids, <span class="st" style="color: #20794D;">'rating'</span>: ratings})</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;"># We should not have any duplicate ratings for the same user and movie</span></span>
<span id="cb2-25"><span class="co" style="color: #5E5E5E;"># Drop any rows that have duplicate user_id and movie_id pairs</span></span>
<span id="cb2-26">df <span class="op" style="color: #5E5E5E;">=</span> df.drop_duplicates([<span class="st" style="color: #20794D;">'user_id'</span>, <span class="st" style="color: #20794D;">'movie_id'</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>user_id</th>
      <th>movie_id</th>
      <th>rating</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>66</td>
      <td>7</td>
      <td>2</td>
    </tr>
    <tr>
      <th>1</th>
      <td>54</td>
      <td>7</td>
      <td>4</td>
    </tr>
    <tr>
      <th>2</th>
      <td>38</td>
      <td>5</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>56</td>
      <td>6</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4</td>
      <td>0</td>
      <td>4</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>987</th>
      <td>77</td>
      <td>8</td>
      <td>3</td>
    </tr>
    <tr>
      <th>992</th>
      <td>99</td>
      <td>3</td>
      <td>3</td>
    </tr>
    <tr>
      <th>994</th>
      <td>8</td>
      <td>5</td>
      <td>3</td>
    </tr>
    <tr>
      <th>998</th>
      <td>22</td>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>999</th>
      <td>88</td>
      <td>9</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>642 rows × 3 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Create a user-item matrix</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">A <span class="op" style="color: #5E5E5E;">=</span> df.pivot(index<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'user_id'</span>, columns<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'movie_id'</span>, values<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'rating'</span>)</span>
<span id="cb4-4">A</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>movie_id</th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
    </tr>
    <tr>
      <th>user_id</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3.0</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4.0</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>1.0</td>
      <td>NaN</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4.0</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>95</th>
      <td>1.0</td>
      <td>3.0</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>1.0</td>
      <td>NaN</td>
      <td>5.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>96</th>
      <td>1.0</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>3.0</td>
      <td>2.0</td>
      <td>2.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>97</th>
      <td>3.0</td>
      <td>1.0</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>3.0</td>
      <td>1.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>5.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>98</th>
      <td>5.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>1.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>99</th>
      <td>1.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>2.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>100 rows × 10 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Fill in the missing values with zeros</span></span>
<span id="cb5-2">A <span class="op" style="color: #5E5E5E;">=</span> A.fillna(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4">A</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>movie_id</th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
    </tr>
    <tr>
      <th>user_id</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3.0</td>
      <td>4.0</td>
      <td>0.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4.0</td>
      <td>2.0</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>4.0</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>0.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4.0</td>
      <td>0.0</td>
      <td>4.0</td>
      <td>2.0</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>0.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>4.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>95</th>
      <td>1.0</td>
      <td>3.0</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>3.0</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>5.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>96</th>
      <td>1.0</td>
      <td>2.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>2.0</td>
      <td>2.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>97</th>
      <td>3.0</td>
      <td>1.0</td>
      <td>4.0</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>5.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>98</th>
      <td>5.0</td>
      <td>3.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>99</th>
      <td>1.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>3.0</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
<p>100 rows × 10 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Cosine similarity between U1 and U2</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;"># User 1</span></span>
<span id="cb6-4">u1 <span class="op" style="color: #5E5E5E;">=</span> A.loc[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;"># User 2</span></span>
<span id="cb6-7">u2 <span class="op" style="color: #5E5E5E;">=</span> A.loc[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;"># Compute the dot product</span></span>
<span id="cb6-10">dot <span class="op" style="color: #5E5E5E;">=</span> np.dot(u1, u2)</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;"># Compute the L2 norm</span></span>
<span id="cb6-13">norm_u1 <span class="op" style="color: #5E5E5E;">=</span> np.linalg.norm(u1)</span>
<span id="cb6-14">norm_u2 <span class="op" style="color: #5E5E5E;">=</span> np.linalg.norm(u2)</span>
<span id="cb6-15"></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;"># Compute the cosine similarity</span></span>
<span id="cb6-17">cos_sim <span class="op" style="color: #5E5E5E;">=</span> dot <span class="op" style="color: #5E5E5E;">/</span> (norm_u1 <span class="op" style="color: #5E5E5E;">*</span> norm_u2)</span>
<span id="cb6-18">cos_sim</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>0.7174278379758501</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Calculate the cosine similarity between users</span></span>
<span id="cb8-2"><span class="im" style="color: #00769E;">from</span> sklearn.metrics.pairwise <span class="im" style="color: #00769E;">import</span> cosine_similarity</span>
<span id="cb8-3"></span>
<span id="cb8-4">sim_matrix <span class="op" style="color: #5E5E5E;">=</span> cosine_similarity(A)</span>
<span id="cb8-5"></span>
<span id="cb8-6">pd.DataFrame(sim_matrix)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
      <th>...</th>
      <th>90</th>
      <th>91</th>
      <th>92</th>
      <th>93</th>
      <th>94</th>
      <th>95</th>
      <th>96</th>
      <th>97</th>
      <th>98</th>
      <th>99</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.000000</td>
      <td>0.717428</td>
      <td>0.663734</td>
      <td>0.565794</td>
      <td>0.547289</td>
      <td>0.742468</td>
      <td>0.539472</td>
      <td>0.599021</td>
      <td>0.748964</td>
      <td>0.523832</td>
      <td>...</td>
      <td>0.876593</td>
      <td>0.593722</td>
      <td>0.615664</td>
      <td>0.722496</td>
      <td>0.783190</td>
      <td>0.657754</td>
      <td>0.665375</td>
      <td>0.446627</td>
      <td>0.774667</td>
      <td>0.703313</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.717428</td>
      <td>1.000000</td>
      <td>0.650769</td>
      <td>0.591169</td>
      <td>0.559964</td>
      <td>0.585314</td>
      <td>0.300491</td>
      <td>0.255039</td>
      <td>0.693395</td>
      <td>0.500193</td>
      <td>...</td>
      <td>0.609392</td>
      <td>0.313893</td>
      <td>0.510454</td>
      <td>0.550459</td>
      <td>0.624622</td>
      <td>0.493197</td>
      <td>0.644346</td>
      <td>0.476288</td>
      <td>0.802740</td>
      <td>0.781611</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.663734</td>
      <td>0.650769</td>
      <td>1.000000</td>
      <td>0.758954</td>
      <td>0.406780</td>
      <td>0.372046</td>
      <td>0.416654</td>
      <td>0.270593</td>
      <td>0.746685</td>
      <td>0.560180</td>
      <td>...</td>
      <td>0.519274</td>
      <td>0.322243</td>
      <td>0.772529</td>
      <td>0.253842</td>
      <td>0.712485</td>
      <td>0.257761</td>
      <td>0.322830</td>
      <td>0.283373</td>
      <td>0.441886</td>
      <td>0.459929</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.565794</td>
      <td>0.591169</td>
      <td>0.758954</td>
      <td>1.000000</td>
      <td>0.549030</td>
      <td>0.540128</td>
      <td>0.671775</td>
      <td>0.572892</td>
      <td>0.611794</td>
      <td>0.489225</td>
      <td>...</td>
      <td>0.424052</td>
      <td>0.586110</td>
      <td>0.456327</td>
      <td>0.506719</td>
      <td>0.715831</td>
      <td>0.210494</td>
      <td>0.506585</td>
      <td>0.492312</td>
      <td>0.551652</td>
      <td>0.424052</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.547289</td>
      <td>0.559964</td>
      <td>0.406780</td>
      <td>0.549030</td>
      <td>1.000000</td>
      <td>0.354329</td>
      <td>0.304478</td>
      <td>0.541185</td>
      <td>0.821353</td>
      <td>0.202287</td>
      <td>...</td>
      <td>0.667638</td>
      <td>0.527306</td>
      <td>0.339913</td>
      <td>0.435159</td>
      <td>0.582943</td>
      <td>0.478699</td>
      <td>0.417780</td>
      <td>0.450063</td>
      <td>0.502836</td>
      <td>0.741820</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>95</th>
      <td>0.657754</td>
      <td>0.493197</td>
      <td>0.257761</td>
      <td>0.210494</td>
      <td>0.478699</td>
      <td>0.519615</td>
      <td>0.452602</td>
      <td>0.571548</td>
      <td>0.551553</td>
      <td>0.405674</td>
      <td>...</td>
      <td>0.564076</td>
      <td>0.556890</td>
      <td>0.604211</td>
      <td>0.682793</td>
      <td>0.661382</td>
      <td>1.000000</td>
      <td>0.412568</td>
      <td>0.796715</td>
      <td>0.678637</td>
      <td>0.693008</td>
    </tr>
    <tr>
      <th>96</th>
      <td>0.665375</td>
      <td>0.644346</td>
      <td>0.322830</td>
      <td>0.506585</td>
      <td>0.417780</td>
      <td>0.853538</td>
      <td>0.359095</td>
      <td>0.538977</td>
      <td>0.351369</td>
      <td>0.191776</td>
      <td>...</td>
      <td>0.498686</td>
      <td>0.640033</td>
      <td>0.190421</td>
      <td>0.690704</td>
      <td>0.682163</td>
      <td>0.412568</td>
      <td>1.000000</td>
      <td>0.280141</td>
      <td>0.734105</td>
      <td>0.581800</td>
    </tr>
    <tr>
      <th>97</th>
      <td>0.446627</td>
      <td>0.476288</td>
      <td>0.283373</td>
      <td>0.492312</td>
      <td>0.450063</td>
      <td>0.400743</td>
      <td>0.709211</td>
      <td>0.532239</td>
      <td>0.469979</td>
      <td>0.566223</td>
      <td>...</td>
      <td>0.262641</td>
      <td>0.446564</td>
      <td>0.501441</td>
      <td>0.689500</td>
      <td>0.637007</td>
      <td>0.796715</td>
      <td>0.280141</td>
      <td>1.000000</td>
      <td>0.659366</td>
      <td>0.481508</td>
    </tr>
    <tr>
      <th>98</th>
      <td>0.774667</td>
      <td>0.802740</td>
      <td>0.441886</td>
      <td>0.551652</td>
      <td>0.502836</td>
      <td>0.844146</td>
      <td>0.446610</td>
      <td>0.473016</td>
      <td>0.617575</td>
      <td>0.335738</td>
      <td>...</td>
      <td>0.546861</td>
      <td>0.500390</td>
      <td>0.305585</td>
      <td>0.673754</td>
      <td>0.687116</td>
      <td>0.678637</td>
      <td>0.734105</td>
      <td>0.659366</td>
      <td>1.000000</td>
      <td>0.600213</td>
    </tr>
    <tr>
      <th>99</th>
      <td>0.703313</td>
      <td>0.781611</td>
      <td>0.459929</td>
      <td>0.424052</td>
      <td>0.741820</td>
      <td>0.527274</td>
      <td>0.294579</td>
      <td>0.578997</td>
      <td>0.732042</td>
      <td>0.435869</td>
      <td>...</td>
      <td>0.818182</td>
      <td>0.615435</td>
      <td>0.581559</td>
      <td>0.645439</td>
      <td>0.623673</td>
      <td>0.693008</td>
      <td>0.581800</td>
      <td>0.481508</td>
      <td>0.600213</td>
      <td>1.000000</td>
    </tr>
  </tbody>
</table>
<p>100 rows × 100 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb9-2"></span>
<span id="cb9-3">sns.heatmap(sim_matrix, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Greys'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>&lt;AxesSubplot:&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/movie-recommendation-knn-mf_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Find the most similar users to user u </span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;">def</span> k_nearest_neighbors(A, u, k):</span>
<span id="cb11-4">    <span class="co" style="color: #5E5E5E;">"""Find the k nearest neighbors for user u"""</span></span>
<span id="cb11-5">    <span class="co" style="color: #5E5E5E;"># Find the index of the user in the matrix</span></span>
<span id="cb11-6">    u_index <span class="op" style="color: #5E5E5E;">=</span> A.index.get_loc(u)</span>
<span id="cb11-7">    </span>
<span id="cb11-8">    <span class="co" style="color: #5E5E5E;"># Compute the similarity between the user and all other users</span></span>
<span id="cb11-9">    sim_matrix <span class="op" style="color: #5E5E5E;">=</span> cosine_similarity(A)</span>
<span id="cb11-10"></span>
<span id="cb11-11">    <span class="co" style="color: #5E5E5E;"># Find the k most similar users</span></span>
<span id="cb11-12">    k_nearest <span class="op" style="color: #5E5E5E;">=</span> np.argsort(sim_matrix[u_index])[::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">1</span>:k<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb11-13">    </span>
<span id="cb11-14">    <span class="co" style="color: #5E5E5E;"># Return the user ids</span></span>
<span id="cb11-15">    <span class="cf" style="color: #003B4F;">return</span> A.index[k_nearest]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">k_nearest_neighbors(A, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Int64Index([28, 46, 90, 32, 87], dtype='int64', name='user_id')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Show matrix of movie ratings for u and k nearest neighbors</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;">def</span> show_neighbors(A, u, k):</span>
<span id="cb14-4">    <span class="co" style="color: #5E5E5E;">"""Show the movie ratings for user u and k nearest neighbors"""</span></span>
<span id="cb14-5">    <span class="co" style="color: #5E5E5E;"># Get the user ids of the k nearest neighbors</span></span>
<span id="cb14-6">    neighbors <span class="op" style="color: #5E5E5E;">=</span> k_nearest_neighbors(A, u, k)</span>
<span id="cb14-7">    </span>
<span id="cb14-8">    <span class="co" style="color: #5E5E5E;"># Get the movie ratings for user u and the k nearest neighbors</span></span>
<span id="cb14-9">    df <span class="op" style="color: #5E5E5E;">=</span> A.loc[[u] <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">list</span>(neighbors)]</span>
<span id="cb14-10">    </span>
<span id="cb14-11">    <span class="co" style="color: #5E5E5E;"># Return the dataframe</span></span>
<span id="cb14-12">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">show_neighbors(A, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>movie_id</th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
    </tr>
    <tr>
      <th>user_id</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3.0</td>
      <td>4.0</td>
      <td>0.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>28</th>
      <td>5.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>2.0</td>
      <td>1.0</td>
      <td>4.0</td>
      <td>0.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>46</th>
      <td>3.0</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>4.0</td>
      <td>2.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>90</th>
      <td>1.0</td>
      <td>5.0</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>4.0</td>
      <td>0.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>32</th>
      <td>3.0</td>
      <td>2.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>0.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>87</th>
      <td>1.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>2.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Rating for user u for movie 0 is: (4.0 + 3.0) / 2 = 3.5 (Discard 0s)</span></span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;">def</span> predict_rating(A, u, m, k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>):</span>
<span id="cb16-4">    <span class="co" style="color: #5E5E5E;">"""Predict the rating for user u for movie m"""</span></span>
<span id="cb16-5">    <span class="co" style="color: #5E5E5E;"># Get the user ids of the k nearest neighbors</span></span>
<span id="cb16-6">    neighbors <span class="op" style="color: #5E5E5E;">=</span> k_nearest_neighbors(A, u, k)</span>
<span id="cb16-7">    </span>
<span id="cb16-8">    <span class="co" style="color: #5E5E5E;"># Get the movie ratings for user u and the k nearest neighbors</span></span>
<span id="cb16-9">    df <span class="op" style="color: #5E5E5E;">=</span> A.loc[[u] <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">list</span>(neighbors)]</span>
<span id="cb16-10">    </span>
<span id="cb16-11">    <span class="co" style="color: #5E5E5E;"># Get the ratings for movie m</span></span>
<span id="cb16-12">    ratings <span class="op" style="color: #5E5E5E;">=</span> df[m]</span>
<span id="cb16-13">    </span>
<span id="cb16-14">    <span class="co" style="color: #5E5E5E;"># Calculate the mean of the ratings</span></span>
<span id="cb16-15">    mean <span class="op" style="color: #5E5E5E;">=</span> ratings[<span class="dv" style="color: #AD0000;">1</span>:][ratings <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>].mean()</span>
<span id="cb16-16">    </span>
<span id="cb16-17">    <span class="co" style="color: #5E5E5E;"># Return the mean</span></span>
<span id="cb16-18">    <span class="cf" style="color: #003B4F;">return</span> mean</span></code></pre></div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">predict_rating(A, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>2.6666666666666665</code></pre>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Now working with real data</span></span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;"># Load the data</span></span>
<span id="cb19-4"></span>
<span id="cb19-5">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_excel(<span class="st" style="color: #20794D;">"mov-rec.xlsx"</span>)</span>
<span id="cb19-6">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Timestamp</th>
      <th>Your name</th>
      <th>Sholay</th>
      <th>Swades (We The People)</th>
      <th>The Matrix (I)</th>
      <th>Interstellar</th>
      <th>Dangal</th>
      <th>Taare Zameen Par</th>
      <th>Shawshank Redemption</th>
      <th>The Dark Knight</th>
      <th>Notting Hill</th>
      <th>Uri: The Surgical Strike</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2023-04-11 10:58:44.990</td>
      <td>Nipun</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2023-04-11 10:59:49.617</td>
      <td>Gautam Vashishtha</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2023-04-11 11:12:44.033</td>
      <td>Eshan Gujarathi</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2023-04-11 11:13:48.674</td>
      <td>Sai Krishna Avula</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2023-04-11 11:13:55.658</td>
      <td>Ankit Yadav</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># Discard the timestamp column</span></span>
<span id="cb20-2"></span>
<span id="cb20-3">df <span class="op" style="color: #5E5E5E;">=</span> df.drop(<span class="st" style="color: #20794D;">'Timestamp'</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb20-4"></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;"># Make the "Your Name" column the index</span></span>
<span id="cb20-6"></span>
<span id="cb20-7">df <span class="op" style="color: #5E5E5E;">=</span> df.set_index(<span class="st" style="color: #20794D;">'Your name'</span>)</span>
<span id="cb20-8">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Sholay</th>
      <th>Swades (We The People)</th>
      <th>The Matrix (I)</th>
      <th>Interstellar</th>
      <th>Dangal</th>
      <th>Taare Zameen Par</th>
      <th>Shawshank Redemption</th>
      <th>The Dark Knight</th>
      <th>Notting Hill</th>
      <th>Uri: The Surgical Strike</th>
    </tr>
    <tr>
      <th>Your name</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Nipun</th>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Gautam Vashishtha</th>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>Eshan Gujarathi</th>
      <td>4.0</td>
      <td>NaN</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>Sai Krishna Avula</th>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>Ankit Yadav</th>
      <td>3.0</td>
      <td>3.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>Dhruv</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Saatvik Rao</th>
      <td>4.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>2.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Zeel B Patel</th>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Neel</th>
      <td>4.0</td>
      <td>NaN</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>Sachin Jalan</th>
      <td>4.0</td>
      <td>NaN</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>Ayush Shrivastava</th>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>....</th>
      <td>4.0</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>Hari Hara Sudhan</th>
      <td>4.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Etikikota Hrushikesh</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>Chirag</th>
      <td>5.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>2.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Aaryan Darad</th>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>Hetvi Patel</th>
      <td>4.0</td>
      <td>3.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Kalash Kankaria</th>
      <td>4.0</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>Rachit Verma</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>shriraj</th>
      <td>3.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>2.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Bhavini Korthi</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Hitarth Gandhi</th>
      <td>3.0</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>Radhika Joglekar</th>
      <td>3.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Medhansh Singh</th>
      <td>4.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Arun Mani</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>Satyam</th>
      <td>3.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Karan Kumar</th>
      <td>4.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>R Yeeshu Dhurandhar</th>
      <td>5.0</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>Satyam Gupta</th>
      <td>5.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>rushali</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>shridhar</th>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>Tanvi Jain</th>
      <td>4.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Manish Prabhubhai Salvi</th>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Varun Barala</th>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>Kevin Shah</th>
      <td>3.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Inderjeet</th>
      <td>4.0</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>Gangaram Siddam</th>
      <td>4.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Aditi</th>
      <td>4.0</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>5.0</td>
      <td>1.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>Madhuri Awachar</th>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Anupam</th>
      <td>5.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Jinay</th>
      <td>3.0</td>
      <td>1.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>Shrutimoy</th>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>Aadesh Desai</th>
      <td>4.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Dhairya</th>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>Rahul C</th>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">df.index</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>Index(['Nipun', 'Gautam Vashishtha', 'Eshan Gujarathi', 'Sai Krishna Avula',
       'Ankit Yadav ', 'Dhruv', 'Saatvik Rao ', 'Zeel B Patel', 'Neel ',
       'Sachin Jalan ', 'Ayush Shrivastava', '....', 'Hari Hara Sudhan',
       'Etikikota Hrushikesh', 'Chirag', 'Aaryan Darad', 'Hetvi Patel',
       'Kalash Kankaria', 'Rachit Verma', 'shriraj', 'Bhavini Korthi ',
       'Hitarth Gandhi ', 'Radhika Joglekar ', 'Medhansh Singh', 'Arun Mani',
       'Satyam ', 'Karan Kumar ', 'R Yeeshu Dhurandhar', 'Satyam Gupta',
       'rushali', 'shridhar', 'Tanvi Jain ', 'Manish Prabhubhai Salvi ',
       'Varun Barala', 'Kevin Shah ', 'Inderjeet', 'Gangaram Siddam ', 'Aditi',
       'Madhuri Awachar', 'Anupam', 'Jinay', 'Shrutimoy', 'Aadesh Desai',
       'Dhairya', 'Rahul C'],
      dtype='object', name='Your name')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># Get index for user and movie</span></span>
<span id="cb23-2">user <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'Rahul C'</span></span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="bu" style="color: null;">print</span>(user <span class="kw" style="color: #003B4F;">in</span> df.index)</span>
<span id="cb23-5"></span>
<span id="cb23-6"><span class="co" style="color: #5E5E5E;"># Get the movie ratings for user</span></span>
<span id="cb23-7">user_ratings <span class="op" style="color: #5E5E5E;">=</span> df.loc[user]</span>
<span id="cb23-8">user_ratings</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>True</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>Sholay                      3.0
Swades (We The People)      3.0
The Matrix (I)              4.0
Interstellar                4.0
Dangal                      4.0
Taare Zameen Par            4.0
Shawshank Redemption        4.0
The Dark Knight             5.0
Notting Hill                NaN
Uri: The Surgical Strike    NaN
Name: Rahul C, dtype: float64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df_copy <span class="op" style="color: #5E5E5E;">=</span> df.copy()</span>
<span id="cb26-2">df_copy.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb26-3">show_neighbors(df_copy, user, <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Sholay</th>
      <th>Swades (We The People)</th>
      <th>The Matrix (I)</th>
      <th>Interstellar</th>
      <th>Dangal</th>
      <th>Taare Zameen Par</th>
      <th>Shawshank Redemption</th>
      <th>The Dark Knight</th>
      <th>Notting Hill</th>
      <th>Uri: The Surgical Strike</th>
    </tr>
    <tr>
      <th>Your name</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Rahul C</th>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>Shrutimoy</th>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>0.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>Hitarth Gandhi</th>
      <td>3.0</td>
      <td>0.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>R Yeeshu Dhurandhar</th>
      <td>5.0</td>
      <td>0.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>shridhar</th>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>Sachin Jalan</th>
      <td>4.0</td>
      <td>0.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>0.0</td>
      <td>3.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">df.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Sholay</th>
      <th>Swades (We The People)</th>
      <th>The Matrix (I)</th>
      <th>Interstellar</th>
      <th>Dangal</th>
      <th>Taare Zameen Par</th>
      <th>Shawshank Redemption</th>
      <th>The Dark Knight</th>
      <th>Notting Hill</th>
      <th>Uri: The Surgical Strike</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>39.000000</td>
      <td>32.000000</td>
      <td>38.000000</td>
      <td>43.000000</td>
      <td>45.000000</td>
      <td>44.000000</td>
      <td>35.000000</td>
      <td>40.000000</td>
      <td>21.000000</td>
      <td>39.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>4.102564</td>
      <td>3.718750</td>
      <td>4.131579</td>
      <td>4.581395</td>
      <td>3.644444</td>
      <td>3.977273</td>
      <td>4.400000</td>
      <td>4.250000</td>
      <td>3.476190</td>
      <td>4.230769</td>
    </tr>
    <tr>
      <th>std</th>
      <td>0.753758</td>
      <td>0.958304</td>
      <td>0.991070</td>
      <td>0.793802</td>
      <td>1.003529</td>
      <td>1.067242</td>
      <td>0.976187</td>
      <td>1.080123</td>
      <td>0.813575</td>
      <td>0.902089</td>
    </tr>
    <tr>
      <th>min</th>
      <td>3.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>2.000000</td>
      <td>2.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>4.000000</td>
      <td>3.000000</td>
      <td>4.000000</td>
      <td>4.000000</td>
      <td>3.000000</td>
      <td>3.000000</td>
      <td>4.000000</td>
      <td>4.000000</td>
      <td>3.000000</td>
      <td>4.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>4.000000</td>
      <td>4.000000</td>
      <td>4.000000</td>
      <td>5.000000</td>
      <td>4.000000</td>
      <td>4.000000</td>
      <td>5.000000</td>
      <td>5.000000</td>
      <td>3.000000</td>
      <td>4.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>5.000000</td>
      <td>4.000000</td>
      <td>5.000000</td>
      <td>5.000000</td>
      <td>4.000000</td>
      <td>5.000000</td>
      <td>5.000000</td>
      <td>5.000000</td>
      <td>4.000000</td>
      <td>5.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>5.000000</td>
      <td>5.000000</td>
      <td>5.000000</td>
      <td>5.000000</td>
      <td>5.000000</td>
      <td>5.000000</td>
      <td>5.000000</td>
      <td>5.000000</td>
      <td>5.000000</td>
      <td>5.000000</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># Predict the rating for user u for movie m</span></span>
<span id="cb28-2"></span>
<span id="cb28-3">predict_rating(df_copy, user, <span class="st" style="color: #20794D;">'The Dark Knight'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>4.8</code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">predict_rating(df_copy, user, <span class="st" style="color: #20794D;">'Sholay'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>4.4</code></pre>
</div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;"># Generic Matrix Factorization (without missing values)</span></span>
<span id="cb32-2"></span>
<span id="cb32-3"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb32-4"><span class="im" style="color: #00769E;">import</span> torch.nn <span class="im" style="color: #00769E;">as</span> nn</span>
<span id="cb32-5"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb32-6"><span class="im" style="color: #00769E;">import</span> torch.optim <span class="im" style="color: #00769E;">as</span> optim</span>
<span id="cb32-7"></span>
<span id="cb32-8"></span>
<span id="cb32-9"><span class="co" style="color: #5E5E5E;"># A is a matrix of size (n_users, n_movies) randomly generated values between 1 and 5</span></span>
<span id="cb32-10">A <span class="op" style="color: #5E5E5E;">=</span> torch.randint(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">6</span>, (n_users, n_movies), dtype<span class="op" style="color: #5E5E5E;">=</span>torch.<span class="bu" style="color: null;">float</span>)</span>
<span id="cb32-11">A</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>tensor([[1., 5., 4., 3., 4., 3., 1., 3., 3., 4.],
        [3., 3., 4., 4., 4., 2., 5., 2., 2., 4.],
        [2., 5., 5., 3., 3., 1., 4., 5., 2., 5.],
        [4., 2., 1., 5., 1., 5., 1., 1., 5., 1.],
        [4., 3., 5., 3., 4., 1., 2., 4., 1., 5.],
        [1., 2., 2., 1., 2., 4., 1., 1., 3., 3.],
        [4., 2., 2., 3., 5., 3., 3., 2., 5., 2.],
        [2., 2., 1., 1., 2., 4., 5., 1., 4., 3.],
        [1., 3., 2., 1., 3., 4., 1., 5., 5., 1.],
        [4., 4., 2., 4., 1., 4., 2., 1., 4., 4.],
        [1., 3., 1., 2., 3., 1., 3., 2., 4., 4.],
        [5., 3., 5., 1., 4., 5., 4., 2., 1., 5.],
        [5., 1., 5., 3., 4., 4., 4., 2., 2., 2.],
        [1., 1., 2., 3., 5., 4., 3., 1., 1., 1.],
        [3., 2., 5., 4., 3., 5., 2., 4., 4., 3.],
        [2., 2., 4., 1., 2., 3., 2., 4., 3., 5.],
        [4., 2., 4., 5., 2., 2., 1., 2., 1., 1.],
        [4., 3., 2., 1., 1., 1., 5., 2., 1., 1.],
        [2., 1., 2., 1., 1., 1., 5., 5., 1., 4.],
        [1., 3., 5., 1., 5., 5., 5., 5., 2., 2.],
        [1., 2., 2., 5., 1., 1., 5., 4., 2., 5.],
        [5., 1., 2., 2., 1., 5., 2., 3., 5., 2.],
        [2., 2., 1., 5., 5., 5., 5., 3., 4., 3.],
        [1., 1., 4., 1., 2., 5., 5., 5., 2., 1.],
        [5., 3., 3., 1., 2., 3., 3., 2., 2., 3.],
        [2., 4., 5., 1., 2., 3., 5., 3., 1., 5.],
        [2., 1., 1., 1., 2., 2., 5., 5., 2., 1.],
        [3., 1., 1., 3., 3., 3., 2., 1., 3., 2.],
        [4., 4., 4., 5., 1., 3., 4., 3., 2., 2.],
        [4., 4., 4., 5., 2., 5., 2., 1., 4., 3.],
        [3., 3., 5., 1., 4., 3., 3., 3., 3., 2.],
        [2., 4., 2., 3., 4., 2., 4., 3., 3., 3.],
        [5., 4., 1., 5., 4., 3., 5., 1., 3., 4.],
        [3., 5., 3., 2., 4., 2., 5., 1., 2., 5.],
        [2., 5., 4., 1., 1., 5., 1., 5., 2., 4.],
        [1., 3., 3., 4., 4., 5., 2., 5., 3., 5.],
        [3., 3., 5., 3., 4., 1., 3., 1., 1., 3.],
        [2., 4., 1., 3., 5., 1., 5., 2., 4., 1.],
        [5., 2., 2., 3., 1., 4., 5., 5., 4., 2.],
        [5., 3., 5., 1., 5., 4., 3., 1., 1., 3.],
        [4., 2., 2., 2., 2., 1., 2., 1., 1., 3.],
        [2., 2., 1., 4., 1., 4., 5., 2., 5., 1.],
        [3., 4., 2., 1., 3., 1., 2., 5., 3., 5.],
        [1., 3., 3., 5., 3., 2., 1., 2., 5., 1.],
        [3., 4., 2., 4., 2., 3., 4., 1., 1., 1.],
        [1., 1., 5., 1., 3., 2., 5., 5., 5., 4.],
        [4., 4., 4., 4., 4., 3., 1., 4., 1., 1.],
        [3., 4., 5., 4., 1., 5., 2., 3., 1., 3.],
        [5., 2., 5., 5., 2., 4., 5., 4., 4., 5.],
        [3., 5., 5., 4., 1., 5., 1., 2., 5., 1.],
        [2., 4., 3., 5., 4., 5., 2., 5., 3., 3.],
        [3., 2., 3., 1., 1., 4., 1., 1., 2., 1.],
        [4., 1., 2., 4., 4., 3., 2., 2., 2., 4.],
        [2., 2., 3., 2., 3., 2., 2., 5., 4., 3.],
        [4., 2., 3., 4., 4., 1., 1., 4., 2., 3.],
        [2., 2., 3., 2., 2., 1., 4., 3., 5., 4.],
        [5., 5., 5., 4., 2., 1., 3., 1., 3., 3.],
        [2., 4., 5., 1., 2., 2., 5., 3., 3., 1.],
        [1., 4., 3., 2., 3., 5., 3., 2., 4., 4.],
        [1., 3., 2., 1., 2., 3., 2., 2., 5., 2.],
        [4., 5., 5., 3., 1., 2., 1., 3., 4., 4.],
        [4., 2., 3., 2., 3., 4., 5., 1., 4., 3.],
        [3., 2., 1., 3., 2., 2., 5., 5., 5., 1.],
        [2., 5., 5., 2., 3., 5., 3., 4., 3., 2.],
        [1., 2., 2., 4., 4., 5., 5., 2., 5., 1.],
        [4., 4., 1., 5., 2., 4., 4., 2., 4., 2.],
        [4., 1., 5., 3., 1., 4., 5., 2., 2., 2.],
        [3., 2., 2., 1., 1., 1., 2., 4., 2., 2.],
        [1., 1., 3., 2., 2., 4., 3., 3., 2., 2.],
        [2., 4., 3., 1., 1., 2., 4., 2., 5., 2.],
        [1., 4., 3., 5., 4., 2., 4., 2., 2., 5.],
        [4., 4., 5., 5., 4., 3., 4., 1., 4., 5.],
        [5., 2., 2., 1., 4., 4., 3., 5., 5., 5.],
        [3., 1., 3., 1., 2., 5., 5., 4., 3., 1.],
        [5., 5., 5., 3., 5., 3., 3., 3., 3., 3.],
        [5., 3., 3., 3., 4., 3., 5., 4., 5., 1.],
        [5., 5., 3., 5., 4., 1., 2., 1., 3., 2.],
        [5., 3., 4., 1., 5., 2., 4., 4., 2., 1.],
        [1., 2., 1., 2., 1., 3., 4., 1., 2., 1.],
        [5., 3., 3., 1., 5., 1., 4., 5., 5., 1.],
        [2., 2., 5., 2., 3., 5., 1., 5., 4., 2.],
        [3., 3., 1., 2., 5., 5., 4., 4., 4., 5.],
        [5., 3., 5., 3., 5., 5., 3., 4., 1., 4.],
        [5., 3., 2., 5., 1., 2., 4., 3., 1., 4.],
        [5., 2., 5., 2., 4., 3., 2., 2., 4., 5.],
        [2., 3., 5., 2., 4., 5., 3., 1., 4., 3.],
        [3., 3., 1., 4., 5., 2., 1., 3., 4., 4.],
        [5., 2., 3., 4., 2., 2., 5., 4., 2., 1.],
        [3., 1., 1., 2., 5., 1., 5., 1., 5., 3.],
        [3., 5., 1., 5., 3., 4., 5., 5., 4., 3.],
        [2., 4., 1., 5., 4., 1., 4., 5., 1., 4.],
        [5., 5., 4., 1., 2., 2., 2., 5., 1., 3.],
        [5., 2., 3., 3., 4., 3., 3., 4., 3., 2.],
        [1., 5., 4., 4., 5., 3., 4., 2., 4., 1.],
        [2., 4., 1., 1., 4., 2., 1., 1., 3., 4.],
        [4., 4., 2., 3., 2., 2., 3., 5., 4., 1.],
        [5., 4., 3., 4., 5., 4., 5., 1., 5., 5.],
        [1., 1., 1., 1., 4., 4., 5., 2., 4., 2.],
        [2., 4., 1., 2., 4., 3., 5., 1., 4., 4.],
        [2., 5., 2., 1., 3., 5., 5., 4., 1., 4.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">A.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>torch.Size([100, 10])</code></pre>
</div>
</div>
<p>Let us decompose A as WH. W is of shape (n, k) and H is of shape (k, n). We can write the above equation as: A = WH</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># Randomly initialize A and B</span></span>
<span id="cb36-2"></span>
<span id="cb36-3">W <span class="op" style="color: #5E5E5E;">=</span> torch.randn(n_users, <span class="dv" style="color: #AD0000;">2</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb36-4">H <span class="op" style="color: #5E5E5E;">=</span> torch.randn(<span class="dv" style="color: #AD0000;">2</span>, n_movies, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb36-5"></span>
<span id="cb36-6"><span class="co" style="color: #5E5E5E;"># Compute the loss</span></span>
<span id="cb36-7"></span>
<span id="cb36-8">loss <span class="op" style="color: #5E5E5E;">=</span> torch.norm(torch.mm(W, H) <span class="op" style="color: #5E5E5E;">-</span> A)</span>
<span id="cb36-9">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>tensor(110.7991, grad_fn=&lt;LinalgVectorNormBackward0&gt;)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">pd.DataFrame(torch.mm(W, H).detach().numpy())</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>-1.733831</td>
      <td>2.962563</td>
      <td>-0.009936</td>
      <td>-0.591927</td>
      <td>2.442282</td>
      <td>-0.533001</td>
      <td>-0.500535</td>
      <td>-0.777075</td>
      <td>-0.427938</td>
      <td>-0.050505</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-1.605388</td>
      <td>2.875087</td>
      <td>0.171515</td>
      <td>-0.770741</td>
      <td>2.594427</td>
      <td>-0.652586</td>
      <td>-0.512620</td>
      <td>-0.953935</td>
      <td>-0.329276</td>
      <td>-0.023146</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.159360</td>
      <td>-0.289060</td>
      <td>-0.022038</td>
      <td>0.082685</td>
      <td>-0.266777</td>
      <td>0.069192</td>
      <td>0.052250</td>
      <td>0.101196</td>
      <td>0.030828</td>
      <td>0.001642</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-3.637741</td>
      <td>4.346515</td>
      <td>-2.580031</td>
      <td>1.911339</td>
      <td>0.407374</td>
      <td>1.134387</td>
      <td>-0.353923</td>
      <td>1.689442</td>
      <td>-1.846117</td>
      <td>-0.440421</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1.706123</td>
      <td>-2.207651</td>
      <td>0.978520</td>
      <td>-0.611154</td>
      <td>-0.617788</td>
      <td>-0.328235</td>
      <td>0.228982</td>
      <td>-0.492014</td>
      <td>0.780051</td>
      <td>0.176302</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>95</th>
      <td>1.362280</td>
      <td>-2.751892</td>
      <td>-0.572962</td>
      <td>1.180665</td>
      <td>-2.989312</td>
      <td>0.929992</td>
      <td>0.551276</td>
      <td>1.363935</td>
      <td>0.121039</td>
      <td>-0.036218</td>
    </tr>
    <tr>
      <th>96</th>
      <td>1.432943</td>
      <td>-1.514237</td>
      <td>1.287248</td>
      <td>-1.086741</td>
      <td>0.338909</td>
      <td>-0.685343</td>
      <td>0.065700</td>
      <td>-1.016967</td>
      <td>0.827599</td>
      <td>0.208897</td>
    </tr>
    <tr>
      <th>97</th>
      <td>0.381086</td>
      <td>0.345669</td>
      <td>1.366953</td>
      <td>-1.551476</td>
      <td>1.978570</td>
      <td>-1.084161</td>
      <td>-0.261282</td>
      <td>-1.599606</td>
      <td>0.599750</td>
      <td>0.189461</td>
    </tr>
    <tr>
      <th>98</th>
      <td>-3.364117</td>
      <td>6.450801</td>
      <td>0.942667</td>
      <td>-2.333749</td>
      <td>6.511645</td>
      <td>-1.880903</td>
      <td>-1.232884</td>
      <td>-2.755594</td>
      <td>-0.473888</td>
      <td>0.027722</td>
    </tr>
    <tr>
      <th>99</th>
      <td>0.877697</td>
      <td>-1.631227</td>
      <td>-0.175042</td>
      <td>0.521516</td>
      <td>-1.568212</td>
      <td>0.428319</td>
      <td>0.302370</td>
      <td>0.626961</td>
      <td>0.149908</td>
      <td>0.002033</td>
    </tr>
  </tbody>
</table>
<p>100 rows × 10 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">pd.DataFrame(A)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>1.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>2.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4.0</td>
      <td>2.0</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>4.0</td>
      <td>1.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>95</th>
      <td>4.0</td>
      <td>4.0</td>
      <td>2.0</td>
      <td>3.0</td>
      <td>2.0</td>
      <td>2.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>96</th>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>97</th>
      <td>1.0</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>4.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>98</th>
      <td>2.0</td>
      <td>4.0</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>1.0</td>
      <td>4.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>99</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>1.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>1.0</td>
      <td>4.0</td>
    </tr>
  </tbody>
</table>
<p>100 rows × 10 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;"># Optimizer</span></span>
<span id="cb40-2"></span>
<span id="cb40-3">optimizer <span class="op" style="color: #5E5E5E;">=</span> optim.Adam([W, H], lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>)</span>
<span id="cb40-4"></span>
<span id="cb40-5"><span class="co" style="color: #5E5E5E;"># Train the model</span></span>
<span id="cb40-6"></span>
<span id="cb40-7"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1000</span>):</span>
<span id="cb40-8">    <span class="co" style="color: #5E5E5E;"># Compute the loss</span></span>
<span id="cb40-9">    loss <span class="op" style="color: #5E5E5E;">=</span> torch.norm(torch.mm(W, H) <span class="op" style="color: #5E5E5E;">-</span> A)</span>
<span id="cb40-10">    </span>
<span id="cb40-11">    <span class="co" style="color: #5E5E5E;"># Zero the gradients</span></span>
<span id="cb40-12">    optimizer.zero_grad()</span>
<span id="cb40-13">    </span>
<span id="cb40-14">    <span class="co" style="color: #5E5E5E;"># Backpropagate</span></span>
<span id="cb40-15">    loss.backward()</span>
<span id="cb40-16">    </span>
<span id="cb40-17">    <span class="co" style="color: #5E5E5E;"># Update the parameters</span></span>
<span id="cb40-18">    optimizer.step()</span>
<span id="cb40-19">    </span>
<span id="cb40-20">    <span class="co" style="color: #5E5E5E;"># Print the loss</span></span>
<span id="cb40-21">    <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">10</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb40-22">        <span class="bu" style="color: null;">print</span>(loss.item())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>110.79912567138672
108.5261001586914
106.6722412109375
104.86959075927734
102.57525634765625
99.17333984375
94.17224884033203
87.41124725341797
79.23120880126953
70.51470184326172
62.338897705078125
55.442466735839844
50.24897003173828
46.78135681152344
44.567237854003906
43.125022888183594
42.18255615234375
41.56866455078125
41.16780471801758
40.899253845214844
40.70838928222656
40.56161117553711
40.439727783203125
40.33248519897461
40.23463821411133
40.143455505371094
40.05741500854492
39.9755744934082
39.89726638793945
39.82197952270508
39.749305725097656
39.678890228271484
39.610443115234375
39.54371643066406
39.478515625
39.4146842956543
39.35213088989258
39.290809631347656
39.23072052001953
39.17192077636719
39.114505767822266
39.058589935302734
39.00433349609375
38.95188903808594
38.90142059326172
38.85308837890625
38.8070182800293
38.76333999633789
38.722137451171875
38.6834716796875
38.64735412597656
38.61379623413086
38.5827522277832
38.554161071777344
38.527931213378906
38.503971099853516
38.482154846191406
38.46236038208008
38.444454193115234
38.42829132080078
38.41374588012695
38.40068435668945
38.38897705078125
38.378501892089844
38.36914825439453
38.36080551147461
38.35336685180664
38.34674835205078
38.34086608886719
38.33564376831055
38.330997467041016
38.326881408691406
38.3232307434082
38.31999206542969
38.31712341308594
38.314579010009766
38.31232833862305
38.310325622558594
38.308555603027344
38.30698013305664
38.30558776855469
38.30434799194336
38.30324935913086
38.30227279663086
38.301395416259766
38.300621032714844
38.2999267578125
38.29930114746094
38.29874801635742
38.298248291015625
38.29779815673828
38.297393798828125
38.297027587890625
38.29669189453125
38.29639434814453
38.296119689941406
38.295867919921875
38.29563903808594
38.29542922973633
38.29523468017578</code></pre>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">pd.DataFrame(torch.mm(W, H).detach().numpy()).head(<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3.622862</td>
      <td>3.536414</td>
      <td>3.945925</td>
      <td>2.985436</td>
      <td>2.999869</td>
      <td>2.749094</td>
      <td>2.605484</td>
      <td>2.758482</td>
      <td>2.209353</td>
      <td>3.361388</td>
    </tr>
    <tr>
      <th>1</th>
      <td>3.622746</td>
      <td>3.547434</td>
      <td>3.798462</td>
      <td>3.133817</td>
      <td>3.271342</td>
      <td>3.176287</td>
      <td>3.221505</td>
      <td>3.073355</td>
      <td>2.856927</td>
      <td>3.383140</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">pd.DataFrame(A).head(<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>1.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>2.0</td>
      <td>4.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="kw" style="color: #003B4F;">def</span> factorize(A, k):</span>
<span id="cb44-2">    <span class="co" style="color: #5E5E5E;">"""Factorize the matrix A into W and H</span></span>
<span id="cb44-3"><span class="co" style="color: #5E5E5E;">    A: input matrix of size (n_users, n_movies)</span></span>
<span id="cb44-4"><span class="co" style="color: #5E5E5E;">    k: number of latent features</span></span>
<span id="cb44-5"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb44-6"><span class="co" style="color: #5E5E5E;">    Returns W and H</span></span>
<span id="cb44-7"><span class="co" style="color: #5E5E5E;">    W: matrix of size (n_users, k)</span></span>
<span id="cb44-8"><span class="co" style="color: #5E5E5E;">    H: matrix of size (k, n_movies)</span></span>
<span id="cb44-9"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb44-10">    <span class="co" style="color: #5E5E5E;"># Randomly initialize W and H</span></span>
<span id="cb44-11">    W <span class="op" style="color: #5E5E5E;">=</span> torch.randn(A.shape[<span class="dv" style="color: #AD0000;">0</span>], k, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb44-12">    H <span class="op" style="color: #5E5E5E;">=</span> torch.randn(k, A.shape[<span class="dv" style="color: #AD0000;">1</span>], requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb44-13">    </span>
<span id="cb44-14">    <span class="co" style="color: #5E5E5E;"># Optimizer</span></span>
<span id="cb44-15">    optimizer <span class="op" style="color: #5E5E5E;">=</span> optim.Adam([W, H], lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>)</span>
<span id="cb44-16">    </span>
<span id="cb44-17">    <span class="co" style="color: #5E5E5E;"># Train the model</span></span>
<span id="cb44-18">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1000</span>):</span>
<span id="cb44-19">        <span class="co" style="color: #5E5E5E;"># Compute the loss</span></span>
<span id="cb44-20">        loss <span class="op" style="color: #5E5E5E;">=</span> torch.norm(torch.mm(W, H) <span class="op" style="color: #5E5E5E;">-</span> A)</span>
<span id="cb44-21">        </span>
<span id="cb44-22">        <span class="co" style="color: #5E5E5E;"># Zero the gradients</span></span>
<span id="cb44-23">        optimizer.zero_grad()</span>
<span id="cb44-24">        </span>
<span id="cb44-25">        <span class="co" style="color: #5E5E5E;"># Backpropagate</span></span>
<span id="cb44-26">        loss.backward()</span>
<span id="cb44-27">        </span>
<span id="cb44-28">        <span class="co" style="color: #5E5E5E;"># Update the parameters</span></span>
<span id="cb44-29">        optimizer.step()</span>
<span id="cb44-30">        </span>
<span id="cb44-31">    <span class="cf" style="color: #003B4F;">return</span> W, H, loss</span></code></pre></div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="cf" style="color: #003B4F;">for</span> k <span class="kw" style="color: #003B4F;">in</span> [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">11</span>]:</span>
<span id="cb45-2">    W, H, loss <span class="op" style="color: #5E5E5E;">=</span> factorize(A, k)</span>
<span id="cb45-3">    <span class="bu" style="color: null;">print</span>(k, loss.item())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 42.103797912597656
2 38.35541534423828
3 34.45906448364258
4 30.72266387939453
5 27.430004119873047
6 23.318540573120117
9 9.963604927062988
10 0.16205351054668427
11 0.18895108997821808</code></pre>
</div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">pd.DataFrame(torch.mm(W,H).detach().numpy()).head(<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.014621</td>
      <td>5.012642</td>
      <td>4.012176</td>
      <td>3.013239</td>
      <td>4.012656</td>
      <td>3.010292</td>
      <td>1.012815</td>
      <td>3.011410</td>
      <td>3.015494</td>
      <td>4.012996</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2.987797</td>
      <td>2.986945</td>
      <td>3.989305</td>
      <td>3.987498</td>
      <td>3.988829</td>
      <td>1.989375</td>
      <td>4.989910</td>
      <td>1.987138</td>
      <td>1.986990</td>
      <td>3.987026</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">pd.DataFrame(A).head(<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>1.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>2.0</td>
      <td>4.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;"># With missing values</span></span>
<span id="cb49-2"></span>
<span id="cb49-3"><span class="co" style="color: #5E5E5E;"># Randomly replace some entries with NaN</span></span>
<span id="cb49-4"></span>
<span id="cb49-5">A <span class="op" style="color: #5E5E5E;">=</span> torch.randint(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">6</span>, (n_users, n_movies), dtype<span class="op" style="color: #5E5E5E;">=</span>torch.<span class="bu" style="color: null;">float</span>)</span>
<span id="cb49-6">A[torch.rand(A.shape) <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">0.5</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">float</span>(<span class="st" style="color: #20794D;">'nan'</span>)</span>
<span id="cb49-7">A</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>tensor([[nan, 5., 5., nan, 1., 1., 4., 2., nan, 4.],
        [nan, 2., 2., 1., nan, nan, nan, nan, 3., nan],
        [nan, nan, 5., 1., nan, nan, 2., nan, nan, nan],
        [nan, nan, nan, 1., 4., 2., nan, 2., nan, 4.],
        [nan, nan, 2., nan, 3., 1., nan, nan, 4., 4.],
        [nan, 2., 5., nan, 2., nan, 1., nan, 3., nan],
        [nan, nan, nan, nan, 2., 1., nan, 3., nan, 5.],
        [nan, 4., nan, 1., 5., nan, 4., 5., 4., nan],
        [nan, nan, 2., 5., nan, nan, 5., nan, nan, 2.],
        [nan, nan, 3., 2., nan, 1., 1., 4., 5., nan],
        [nan, nan, 5., nan, nan, nan, 2., 2., nan, 3.],
        [nan, 5., 4., 2., nan, nan, nan, 1., 4., 3.],
        [nan, nan, 1., nan, 4., 4., nan, nan, 3., nan],
        [nan, 1., nan, nan, 3., nan, nan, nan, nan, 5.],
        [4., nan, 2., nan, nan, nan, nan, nan, 4., 3.],
        [4., nan, 3., nan, 3., nan, 4., 1., 1., nan],
        [5., nan, 3., nan, 3., nan, nan, 1., nan, nan],
        [2., 5., nan, 5., 3., 4., 3., 3., 5., 5.],
        [3., 3., nan, nan, nan, nan, nan, nan, 4., nan],
        [1., nan, 1., 3., 4., 1., nan, nan, 2., nan],
        [nan, nan, 5., nan, nan, nan, 2., nan, 1., nan],
        [3., 3., nan, nan, 2., 2., 3., 4., 4., nan],
        [2., nan, nan, 2., nan, nan, nan, nan, nan, 4.],
        [nan, 2., nan, 4., 5., 5., nan, 3., 5., nan],
        [2., 2., 2., 4., nan, 4., nan, 1., nan, nan],
        [5., 4., 5., 1., nan, 3., 5., 5., 1., 4.],
        [2., nan, nan, 2., nan, nan, nan, nan, nan, nan],
        [nan, 1., 5., nan, nan, nan, 2., 2., nan, nan],
        [2., 3., 4., nan, nan, nan, 1., 4., 4., nan],
        [2., nan, 1., 4., 1., 1., nan, 5., nan, 1.],
        [5., nan, 3., 1., 5., nan, nan, nan, 2., nan],
        [nan, 3., 4., nan, nan, 3., nan, 5., 5., nan],
        [4., 3., 2., 3., nan, nan, nan, nan, 1., nan],
        [1., 1., nan, 5., 1., 5., nan, nan, 5., nan],
        [4., 5., nan, nan, nan, 3., nan, 2., 5., 5.],
        [nan, 5., 5., nan, nan, nan, nan, 4., nan, nan],
        [5., nan, 4., 2., 3., 3., nan, nan, 2., 1.],
        [nan, nan, nan, nan, 5., nan, 2., 2., 4., nan],
        [3., 5., 1., 5., 3., nan, 5., nan, 2., 4.],
        [nan, 2., 4., nan, 1., 4., nan, 5., nan, 3.],
        [5., 5., 2., 5., nan, 4., nan, 2., nan, 3.],
        [5., nan, nan, 5., 1., 5., nan, nan, 3., 3.],
        [nan, 4., 2., 5., nan, 2., 3., nan, nan, 1.],
        [nan, nan, 4., 5., 5., nan, nan, 4., nan, 2.],
        [nan, nan, nan, nan, nan, nan, nan, 1., 3., nan],
        [3., 3., 1., 1., 1., 4., nan, nan, nan, 2.],
        [nan, nan, nan, 4., 5., nan, nan, 3., nan, nan],
        [5., nan, 5., 2., 4., nan, nan, nan, 5., nan],
        [nan, 1., 1., nan, 3., 1., nan, 1., nan, 1.],
        [nan, nan, 1., 2., nan, 3., nan, 2., 2., 4.],
        [nan, nan, 5., 1., 3., 2., 2., nan, 1., nan],
        [nan, 2., 2., nan, 4., nan, nan, nan, 3., nan],
        [nan, nan, nan, nan, 5., 4., nan, 3., nan, nan],
        [nan, 2., nan, nan, nan, nan, nan, 3., nan, nan],
        [nan, 2., 5., 2., nan, 3., 4., nan, 1., 2.],
        [1., nan, 1., nan, nan, 3., 4., 2., nan, 1.],
        [nan, 4., 4., 1., nan, nan, 5., nan, nan, 2.],
        [nan, nan, 3., nan, nan, 4., 1., nan, 3., nan],
        [nan, 1., nan, 3., 2., 3., nan, 2., nan, 4.],
        [2., 3., 3., nan, 1., 4., 3., nan, nan, 1.],
        [5., nan, 3., 1., 1., nan, 4., nan, 3., nan],
        [5., nan, nan, nan, nan, nan, 4., nan, nan, nan],
        [2., nan, nan, 2., nan, nan, 2., 3., nan, 4.],
        [3., nan, 4., 5., nan, nan, nan, 1., nan, 3.],
        [3., 3., 1., nan, 2., 5., 5., nan, 2., nan],
        [1., 1., 3., 1., nan, nan, 4., 3., 4., 5.],
        [4., nan, nan, 5., 2., nan, 1., nan, nan, nan],
        [nan, nan, 2., nan, 5., nan, 2., 1., nan, 4.],
        [nan, 5., nan, 4., 3., 2., 2., 1., nan, 4.],
        [nan, nan, 1., nan, nan, nan, 2., nan, nan, nan],
        [1., nan, nan, 4., 5., 3., nan, 2., nan, nan],
        [2., nan, 5., 1., 3., nan, 5., nan, nan, nan],
        [3., 5., nan, nan, nan, 5., 2., nan, nan, 2.],
        [nan, 2., 5., nan, nan, nan, 2., nan, 1., 2.],
        [nan, 3., 2., nan, nan, 4., nan, 2., nan, 5.],
        [nan, 4., 5., 2., 5., nan, nan, nan, nan, 5.],
        [3., 1., 5., 3., nan, nan, nan, 3., nan, 4.],
        [nan, 5., nan, 5., nan, 5., 1., 1., 3., 1.],
        [2., nan, nan, nan, 5., nan, nan, 4., nan, 4.],
        [nan, 3., 4., 2., nan, 2., nan, 2., nan, nan],
        [nan, 5., nan, 2., 2., 4., 5., 5., nan, nan],
        [nan, nan, nan, nan, nan, 5., nan, nan, 5., 4.],
        [nan, nan, nan, nan, nan, 2., 2., 2., 2., 4.],
        [nan, nan, nan, 2., 5., 3., 3., nan, nan, nan],
        [1., 2., 4., 2., nan, 2., 5., 4., nan, 5.],
        [4., nan, nan, 5., 4., nan, 5., 1., 3., nan],
        [4., nan, 1., 4., nan, nan, 2., nan, 4., 3.],
        [4., 2., 1., 3., nan, nan, 1., nan, nan, 1.],
        [nan, 1., 3., 1., 2., nan, 3., nan, 5., nan],
        [nan, 1., 1., nan, 1., 1., nan, 4., nan, nan],
        [nan, nan, nan, nan, 1., 5., nan, 5., 3., nan],
        [3., 4., nan, 4., 3., nan, 2., 1., nan, nan],
        [1., 1., nan, 2., nan, nan, nan, 2., 4., 1.],
        [nan, 4., 2., nan, 3., nan, 2., 1., nan, 2.],
        [2., nan, 5., nan, 3., nan, 5., 1., nan, nan],
        [3., 3., nan, nan, 3., 3., nan, 4., 2., nan],
        [2., nan, 5., nan, 5., 3., nan, nan, 5., nan],
        [nan, nan, nan, nan, 5., nan, nan, nan, nan, 5.],
        [4., nan, nan, 1., 4., 5., 1., nan, 2., 4.],
        [1., nan, nan, nan, 2., nan, 4., nan, nan, nan]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">W, H, loss <span class="op" style="color: #5E5E5E;">=</span> factorize(A, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb51-2">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>tensor(nan, grad_fn=&lt;LinalgVectorNormBackward0&gt;)</code></pre>
</div>
</div>
<p>As expected, the above function does not work. Our current loss function does not handle missing values.</p>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">mask <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">~</span>torch.isnan(A)</span>
<span id="cb53-2">mask</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>tensor([[False,  True,  True, False,  True,  True,  True,  True, False,  True],
        [False,  True,  True,  True, False, False, False, False,  True, False],
        [False, False,  True,  True, False, False,  True, False, False, False],
        [False, False, False,  True,  True,  True, False,  True, False,  True],
        [False, False,  True, False,  True,  True, False, False,  True,  True],
        [False,  True,  True, False,  True, False,  True, False,  True, False],
        [False, False, False, False,  True,  True, False,  True, False,  True],
        [False,  True, False,  True,  True, False,  True,  True,  True, False],
        [False, False,  True,  True, False, False,  True, False, False,  True],
        [False, False,  True,  True, False,  True,  True,  True,  True, False],
        [False, False,  True, False, False, False,  True,  True, False,  True],
        [False,  True,  True,  True, False, False, False,  True,  True,  True],
        [False, False,  True, False,  True,  True, False, False,  True, False],
        [False,  True, False, False,  True, False, False, False, False,  True],
        [ True, False,  True, False, False, False, False, False,  True,  True],
        [ True, False,  True, False,  True, False,  True,  True,  True, False],
        [ True, False,  True, False,  True, False, False,  True, False, False],
        [ True,  True, False,  True,  True,  True,  True,  True,  True,  True],
        [ True,  True, False, False, False, False, False, False,  True, False],
        [ True, False,  True,  True,  True,  True, False, False,  True, False],
        [False, False,  True, False, False, False,  True, False,  True, False],
        [ True,  True, False, False,  True,  True,  True,  True,  True, False],
        [ True, False, False,  True, False, False, False, False, False,  True],
        [False,  True, False,  True,  True,  True, False,  True,  True, False],
        [ True,  True,  True,  True, False,  True, False,  True, False, False],
        [ True,  True,  True,  True, False,  True,  True,  True,  True,  True],
        [ True, False, False,  True, False, False, False, False, False, False],
        [False,  True,  True, False, False, False,  True,  True, False, False],
        [ True,  True,  True, False, False, False,  True,  True,  True, False],
        [ True, False,  True,  True,  True,  True, False,  True, False,  True],
        [ True, False,  True,  True,  True, False, False, False,  True, False],
        [False,  True,  True, False, False,  True, False,  True,  True, False],
        [ True,  True,  True,  True, False, False, False, False,  True, False],
        [ True,  True, False,  True,  True,  True, False, False,  True, False],
        [ True,  True, False, False, False,  True, False,  True,  True,  True],
        [False,  True,  True, False, False, False, False,  True, False, False],
        [ True, False,  True,  True,  True,  True, False, False,  True,  True],
        [False, False, False, False,  True, False,  True,  True,  True, False],
        [ True,  True,  True,  True,  True, False,  True, False,  True,  True],
        [False,  True,  True, False,  True,  True, False,  True, False,  True],
        [ True,  True,  True,  True, False,  True, False,  True, False,  True],
        [ True, False, False,  True,  True,  True, False, False,  True,  True],
        [False,  True,  True,  True, False,  True,  True, False, False,  True],
        [False, False,  True,  True,  True, False, False,  True, False,  True],
        [False, False, False, False, False, False, False,  True,  True, False],
        [ True,  True,  True,  True,  True,  True, False, False, False,  True],
        [False, False, False,  True,  True, False, False,  True, False, False],
        [ True, False,  True,  True,  True, False, False, False,  True, False],
        [False,  True,  True, False,  True,  True, False,  True, False,  True],
        [False, False,  True,  True, False,  True, False,  True,  True,  True],
        [False, False,  True,  True,  True,  True,  True, False,  True, False],
        [False,  True,  True, False,  True, False, False, False,  True, False],
        [False, False, False, False,  True,  True, False,  True, False, False],
        [False,  True, False, False, False, False, False,  True, False, False],
        [False,  True,  True,  True, False,  True,  True, False,  True,  True],
        [ True, False,  True, False, False,  True,  True,  True, False,  True],
        [False,  True,  True,  True, False, False,  True, False, False,  True],
        [False, False,  True, False, False,  True,  True, False,  True, False],
        [False,  True, False,  True,  True,  True, False,  True, False,  True],
        [ True,  True,  True, False,  True,  True,  True, False, False,  True],
        [ True, False,  True,  True,  True, False,  True, False,  True, False],
        [ True, False, False, False, False, False,  True, False, False, False],
        [ True, False, False,  True, False, False,  True,  True, False,  True],
        [ True, False,  True,  True, False, False, False,  True, False,  True],
        [ True,  True,  True, False,  True,  True,  True, False,  True, False],
        [ True,  True,  True,  True, False, False,  True,  True,  True,  True],
        [ True, False, False,  True,  True, False,  True, False, False, False],
        [False, False,  True, False,  True, False,  True,  True, False,  True],
        [False,  True, False,  True,  True,  True,  True,  True, False,  True],
        [False, False,  True, False, False, False,  True, False, False, False],
        [ True, False, False,  True,  True,  True, False,  True, False, False],
        [ True, False,  True,  True,  True, False,  True, False, False, False],
        [ True,  True, False, False, False,  True,  True, False, False,  True],
        [False,  True,  True, False, False, False,  True, False,  True,  True],
        [False,  True,  True, False, False,  True, False,  True, False,  True],
        [False,  True,  True,  True,  True, False, False, False, False,  True],
        [ True,  True,  True,  True, False, False, False,  True, False,  True],
        [False,  True, False,  True, False,  True,  True,  True,  True,  True],
        [ True, False, False, False,  True, False, False,  True, False,  True],
        [False,  True,  True,  True, False,  True, False,  True, False, False],
        [False,  True, False,  True,  True,  True,  True,  True, False, False],
        [False, False, False, False, False,  True, False, False,  True,  True],
        [False, False, False, False, False,  True,  True,  True,  True,  True],
        [False, False, False,  True,  True,  True,  True, False, False, False],
        [ True,  True,  True,  True, False,  True,  True,  True, False,  True],
        [ True, False, False,  True,  True, False,  True,  True,  True, False],
        [ True, False,  True,  True, False, False,  True, False,  True,  True],
        [ True,  True,  True,  True, False, False,  True, False, False,  True],
        [False,  True,  True,  True,  True, False,  True, False,  True, False],
        [False,  True,  True, False,  True,  True, False,  True, False, False],
        [False, False, False, False,  True,  True, False,  True,  True, False],
        [ True,  True, False,  True,  True, False,  True,  True, False, False],
        [ True,  True, False,  True, False, False, False,  True,  True,  True],
        [False,  True,  True, False,  True, False,  True,  True, False,  True],
        [ True, False,  True, False,  True, False,  True,  True, False, False],
        [ True,  True, False, False,  True,  True, False,  True,  True, False],
        [ True, False,  True, False,  True,  True, False, False,  True, False],
        [False, False, False, False,  True, False, False, False, False,  True],
        [ True, False, False,  True,  True,  True,  True, False,  True,  True],
        [ True, False, False, False,  True, False,  True, False, False, False]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">mask.<span class="bu" style="color: null;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>tensor(517)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">W <span class="op" style="color: #5E5E5E;">=</span> torch.randn(A.shape[<span class="dv" style="color: #AD0000;">0</span>], k, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb57-2">H <span class="op" style="color: #5E5E5E;">=</span> torch.randn(k, A.shape[<span class="dv" style="color: #AD0000;">1</span>],  requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb57-3"></span>
<span id="cb57-4">diff_matrix <span class="op" style="color: #5E5E5E;">=</span> torch.mm(W, H)<span class="op" style="color: #5E5E5E;">-</span>A</span>
<span id="cb57-5">diff_matrix.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>torch.Size([100, 10])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;"># Mask the matrix</span></span>
<span id="cb59-2">diff_matrix[mask].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>torch.Size([517])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;"># Modify the loss function to ignore NaN values</span></span>
<span id="cb61-2"></span>
<span id="cb61-3"><span class="kw" style="color: #003B4F;">def</span> factorize(A, k):</span>
<span id="cb61-4">    <span class="co" style="color: #5E5E5E;">"""Factorize the matrix D into A and B"""</span></span>
<span id="cb61-5">    <span class="co" style="color: #5E5E5E;"># Randomly initialize A and B</span></span>
<span id="cb61-6">    W <span class="op" style="color: #5E5E5E;">=</span> torch.randn(A.shape[<span class="dv" style="color: #AD0000;">0</span>], k, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb61-7">    H <span class="op" style="color: #5E5E5E;">=</span> torch.randn(k, A.shape[<span class="dv" style="color: #AD0000;">1</span>], requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb61-8">    <span class="co" style="color: #5E5E5E;"># Optimizer</span></span>
<span id="cb61-9">    optimizer <span class="op" style="color: #5E5E5E;">=</span> optim.Adam([W, H], lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>)</span>
<span id="cb61-10">    </span>
<span id="cb61-11">    <span class="co" style="color: #5E5E5E;"># Train the model</span></span>
<span id="cb61-12">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1000</span>):</span>
<span id="cb61-13">        <span class="co" style="color: #5E5E5E;"># Compute the loss</span></span>
<span id="cb61-14">        diff_matrix <span class="op" style="color: #5E5E5E;">=</span> torch.mm(W, H) <span class="op" style="color: #5E5E5E;">-</span> A</span>
<span id="cb61-15">        diff_vector <span class="op" style="color: #5E5E5E;">=</span> diff_matrix[mask]</span>
<span id="cb61-16">        loss <span class="op" style="color: #5E5E5E;">=</span> torch.norm(diff_vector)</span>
<span id="cb61-17">        </span>
<span id="cb61-18">        <span class="co" style="color: #5E5E5E;"># Zero the gradients</span></span>
<span id="cb61-19">        optimizer.zero_grad()</span>
<span id="cb61-20">        </span>
<span id="cb61-21">        <span class="co" style="color: #5E5E5E;"># Backpropagate</span></span>
<span id="cb61-22">        loss.backward()</span>
<span id="cb61-23">        </span>
<span id="cb61-24">        <span class="co" style="color: #5E5E5E;"># Update the parameters</span></span>
<span id="cb61-25">        optimizer.step()</span>
<span id="cb61-26">        </span>
<span id="cb61-27">    <span class="cf" style="color: #003B4F;">return</span> W, H, loss</span></code></pre></div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">W, H, loss <span class="op" style="color: #5E5E5E;">=</span> factorize(A, <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb62-2">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>tensor(7.1147, grad_fn=&lt;LinalgVectorNormBackward0&gt;)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">torch.mm(W, H)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>tensor([[-3.7026e+00,  5.1163e+00,  4.9660e+00, -5.8455e-01,  1.0200e+00,
          9.1470e-01,  3.8727e+00,  2.2007e+00,  1.3782e+01,  3.9267e+00],
        [ 6.4588e-02,  2.0002e+00,  1.9979e+00,  1.0001e+00,  3.6942e+00,
          1.1512e+00,  3.8181e+00,  3.5421e+00,  3.0014e+00,  5.0035e+00],
        [-3.3540e-01, -1.0050e+00,  5.0000e+00,  1.0010e+00,  1.7959e-01,
          8.6454e-01,  1.9994e+00,  2.9560e+00,  1.0767e+01, -3.4057e-01],
        [ 2.6321e+00,  3.5523e+00,  2.1706e+00,  9.9769e-01,  3.9995e+00,
          2.0030e+00,  2.8652e+00,  2.0006e+00,  3.5503e-02,  3.9991e+00],
        [ 5.3195e-02, -1.3399e+00,  1.9455e+00,  2.2700e+00,  3.0539e+00,
          1.0086e+00,  3.8842e+00,  5.1128e+00,  4.0248e+00,  3.9763e+00],
        [ 5.5045e+00,  2.0044e+00,  4.9388e+00,  1.6216e+00,  2.0865e+00,
          2.8957e+00,  9.2770e-01,  8.8714e-01,  3.0420e+00, -9.2438e-01],
        [ 6.1366e-01, -1.3394e+00, -6.3292e+00,  4.0202e+00,  2.0028e+00,
          1.0014e+00,  2.1030e+00,  3.0001e+00, -1.0639e+01,  4.9979e+00],
        [ 1.6036e+00,  3.6518e+00,  3.7664e+00,  1.2319e+00,  5.1780e+00,
          2.1295e+00,  4.7475e+00,  4.0635e+00,  4.0645e+00,  5.9223e+00],
        [-4.1593e+00, -1.1450e+01,  2.0064e+00,  5.0104e+00,  1.7877e-01,
         -6.8356e-01,  4.9576e+00,  1.0525e+01,  1.2403e+01,  2.0250e+00],
        [ 1.7769e+00, -4.9137e+00,  3.1228e+00,  2.2575e+00,  5.8793e-01,
          6.6961e-01,  1.2031e+00,  3.7871e+00,  4.9702e+00, -1.4083e+00],
        [ 9.1273e+00,  1.4212e+00,  5.0018e+00, -1.0804e+00,  8.9608e+00,
          1.6892e+00,  2.0130e+00,  1.9936e+00, -7.2410e+00,  2.9931e+00],
        [ 3.2326e+00,  5.2245e+00,  3.8534e+00,  1.8050e+00,  2.7570e+00,
          3.2246e+00,  2.7488e+00,  1.4501e+00,  3.9743e+00,  2.7026e+00],
        [ 9.2220e-01,  6.5451e+00,  9.9373e-01,  4.2199e+00,  4.0030e+00,
          4.0019e+00,  5.8552e+00,  4.3514e+00,  3.0028e+00,  8.0414e+00],
        [-2.3552e+00,  1.0013e+00,  9.6726e-01, -4.6631e-01,  3.0005e+00,
         -4.1134e-01,  3.3274e+00,  3.0678e+00,  3.0946e+00,  4.9978e+00],
        [ 4.0009e+00,  5.9036e+00,  1.9983e+00,  6.0610e+00,  1.0184e+00,
          5.6167e+00,  3.5338e+00,  2.5504e+00,  4.0003e+00,  3.0002e+00],
        [ 4.1839e+00,  9.1531e+00,  2.5008e+00,  3.1248e+00,  3.4309e+00,
          4.8701e+00,  3.6236e+00,  9.7109e-01,  1.3077e+00,  4.9725e+00],
        [ 5.0034e+00, -2.6358e+00,  2.9996e+00, -3.1773e-01,  2.9981e+00,
          3.3085e-01, -3.0125e-01,  1.0002e+00, -2.6015e+00, -1.5107e+00],
        [ 2.1562e+00,  5.1078e+00,  2.3091e+00,  4.3035e+00,  2.3000e+00,
          4.1470e+00,  4.2497e+00,  3.3351e+00,  4.7425e+00,  4.5406e+00],
        [ 2.9999e+00,  2.9999e+00,  3.0624e+00,  4.4992e+00,  4.5262e+00,
          3.8824e+00,  5.4591e+00,  5.5541e+00,  4.0005e+00,  5.9015e+00],
        [ 8.1177e-01, -2.9699e+00,  1.2606e+00,  3.0946e+00,  3.9370e+00,
          1.0488e+00,  4.3280e+00,  6.3317e+00,  1.8619e+00,  4.5940e+00],
        [ 2.1477e+00,  2.4168e+00,  5.0014e+00, -3.6888e+00,  5.9741e+00,
         -5.6343e-01,  1.9977e+00,  9.9599e-01,  1.0008e+00,  3.2156e+00],
        [ 2.5660e+00,  2.4872e+00,  2.9711e+00,  3.0048e+00,  2.5035e+00,
          2.9551e+00,  3.2466e+00,  3.1642e+00,  4.0380e+00,  2.8930e+00],
        [ 2.0003e+00,  1.1864e+01, -1.4367e+00,  1.9999e+00,  4.6078e-01,
          4.1701e+00,  1.3254e+00, -3.0082e+00, -2.7641e+00,  3.9993e+00],
        [ 1.0449e+01,  2.0032e+00,  8.9659e+00,  3.6977e+00,  4.8085e+00,
          5.2882e+00,  2.4920e+00,  3.2403e+00,  4.9395e+00, -8.7002e-01],
        [ 2.0717e+00,  2.1115e+00,  2.0717e+00,  4.2801e+00, -2.0380e+00,
          3.5172e+00,  9.3884e-01,  9.7155e-01,  6.2354e+00, -1.3328e+00],
        [ 5.2955e+00,  3.4266e+00,  5.1299e+00,  1.4202e+00,  6.8671e+00,
          2.9375e+00,  4.3992e+00,  3.9995e+00,  1.2817e+00,  5.0996e+00],
        [ 2.0001e+00,  1.4791e+00,  2.3388e+00,  2.0000e+00, -6.6995e-01,
          2.1166e+00,  4.5259e-01,  3.8568e-01,  4.1443e+00, -1.1447e+00],
        [ 2.9065e+00,  1.0088e+00,  5.0003e+00, -4.4267e-01,  3.6696e+00,
          1.0351e+00,  1.9735e+00,  2.0205e+00,  3.8361e+00,  1.3199e+00],
        [ 2.3390e+00,  2.3721e+00,  3.7185e+00,  1.3874e+00,  2.8777e+00,
          2.1103e+00,  2.7381e+00,  2.4701e+00,  4.1805e+00,  2.4318e+00],
        [ 1.7971e+00, -4.8495e+00,  9.1239e-01,  3.9631e+00,  1.2733e+00,
          1.2781e+00,  2.2735e+00,  5.0206e+00,  1.8186e+00,  7.7334e-01],
        [ 4.4556e+00,  1.2257e+01,  3.8113e+00,  1.3722e+00,  4.8218e+00,
          4.8774e+00,  3.8956e+00, -1.3451e-01,  1.5725e+00,  6.1126e+00],
        [ 2.3871e+00,  3.0010e+00,  3.9991e+00,  2.8334e+00,  4.8395e+00,
          2.9996e+00,  5.1329e+00,  5.0009e+00,  5.0012e+00,  5.6052e+00],
        [ 3.9920e+00,  3.0004e+00,  2.0131e+00,  3.0049e+00,  1.3189e+00,
          3.2595e+00,  1.5054e+00,  1.0929e+00,  9.9195e-01,  8.6129e-01],
        [ 1.3517e+00,  1.3225e+00,  1.2075e+00,  5.6267e+00,  9.9029e-01,
          3.6713e+00,  4.0205e+00,  4.6894e+00,  5.0908e+00,  3.3918e+00],
        [ 3.9141e+00,  5.4294e+00,  6.3565e+00,  3.9410e-02,  5.9122e+00,
          2.6582e+00,  4.0295e+00,  2.6446e+00,  4.8764e+00,  4.5279e+00],
        [ 5.9703e+00,  5.0000e+00,  5.0006e+00,  5.4552e+00,  3.4764e+00,
          5.7107e+00,  4.4197e+00,  3.9984e+00,  5.4614e+00,  3.3112e+00],
        [ 4.9808e+00,  2.5274e+00,  4.0592e+00,  2.0167e+00,  2.9650e+00,
          2.9926e+00,  1.9145e+00,  1.7219e+00,  1.9706e+00,  1.0164e+00],
        [ 3.3675e+00,  7.9931e-01,  6.4143e+00, -1.9437e+00,  5.0061e+00,
          3.9840e-01,  1.9918e+00,  2.0016e+00,  4.0036e+00,  1.4088e+00],
        [ 3.1524e+00,  4.8411e+00,  1.3102e+00,  5.0749e+00,  2.6352e+00,
          4.5228e+00,  4.2075e+00,  3.4787e+00,  2.0158e+00,  4.7858e+00],
        [ 1.1647e+00,  2.0442e+00,  3.9774e+00,  5.2040e+00,  1.0064e+00,
          3.9541e+00,  4.5550e+00,  5.0695e+00,  1.0370e+01,  2.9545e+00],
        [ 4.9155e+00,  4.8887e+00,  1.8611e+00,  4.5726e+00,  2.4214e+00,
          4.6615e+00,  2.9405e+00,  2.1223e+00,  4.9785e-01,  2.9426e+00],
        [ 4.6095e+00,  7.0277e+00,  2.3640e+00,  4.9826e+00,  1.3639e+00,
          5.4668e+00,  2.9430e+00,  1.3600e+00,  2.9275e+00,  2.6572e+00],
        [-9.4300e+00,  3.9400e+00,  1.8115e+00,  4.6790e+00, -7.7135e+00,
          2.3401e+00,  3.3902e+00,  2.5588e+00,  2.3759e+01,  7.8572e-01],
        [ 8.8489e+00,  1.3677e+00,  4.0011e+00,  4.9984e+00,  5.0002e+00,
          4.8811e+00,  3.1127e+00,  4.0020e+00, -1.6249e+00,  1.9996e+00],
        [-5.3638e+00, -1.6611e+01, -1.2622e+00, -2.9465e+00, -5.3122e+00,
         -6.6081e+00, -4.5960e+00,  1.0021e+00,  3.0004e+00, -8.7048e+00],
        [ 2.9505e+00,  3.4944e+00,  1.0966e+00,  2.0104e+00,  1.4645e+00,
          2.5452e+00,  1.3437e+00,  4.9608e-01, -3.2980e-01,  1.5523e+00],
        [ 8.8610e+00,  3.4098e+00,  5.4534e+00,  4.0010e+00,  5.0039e+00,
          5.0527e+00,  2.9819e+00,  2.9969e+00,  4.8445e-01,  1.7580e+00],
        [ 4.7645e+00,  7.2438e+00,  5.3527e+00,  2.1598e+00,  3.9257e+00,
          4.3363e+00,  3.5150e+00,  1.6544e+00,  4.8212e+00,  3.4858e+00],
        [ 3.6301e+00,  8.2968e-01,  1.0952e+00,  5.1852e-01,  2.9273e+00,
          1.1501e+00,  7.9266e-01,  7.6517e-01, -3.4503e+00,  1.2149e+00],
        [ 1.2349e+00,  4.7494e+00,  1.1553e+00,  2.2902e+00,  2.1858e+00,
          2.6806e+00,  3.0526e+00,  1.8136e+00,  1.9800e+00,  4.0943e+00],
        [ 5.4207e+00,  4.6174e-01,  4.6315e+00,  1.0934e+00,  3.5323e+00,
          2.1171e+00,  1.4216e+00,  1.9254e+00,  1.2497e+00,  1.5768e-01],
        [ 8.0981e-01,  1.9982e+00,  1.9823e+00,  2.3342e+00,  4.0156e+00,
          1.9755e+00,  4.5111e+00,  4.4963e+00,  3.0107e+00,  5.5846e+00],
        [ 3.4230e+00,  6.7811e+00,  1.3001e+00,  3.2712e+00,  5.0004e+00,
          4.0008e+00,  4.7148e+00,  2.9985e+00, -8.9564e-01,  6.9733e+00],
        [ 4.3992e+00,  1.9999e+00,  1.7722e+00,  3.3742e+00,  3.4675e+00,
          3.1595e+00,  2.8761e+00,  3.0001e+00, -8.2256e-01,  3.0558e+00],
        [ 6.3852e+00,  1.8676e+00,  5.1417e+00,  2.1083e+00,  5.4183e+00,
          3.1672e+00,  3.1282e+00,  3.3945e+00,  1.0754e+00,  2.5551e+00],
        [ 8.1366e-01,  2.6100e+00,  1.2431e+00,  4.6053e+00, -7.3305e-01,
          3.4299e+00,  2.5706e+00,  2.4739e+00,  5.9303e+00,  1.5624e+00],
        [-1.5185e+01,  3.9601e+00,  4.1178e+00,  1.1159e+00, -7.8194e+00,
         -2.6153e-01,  4.5528e+00,  3.2349e+00,  3.2557e+01,  2.2662e+00],
        [ 4.1539e+00,  6.2482e+00,  3.0004e+00,  2.5108e+00,  4.1870e-01,
          4.0017e+00,  9.9885e-01, -7.3851e-01,  2.9998e+00,  1.7461e-01],
        [ 2.4292e+00,  1.3324e+00, -2.4186e+00,  3.4744e+00,  2.2288e+00,
          2.2009e+00,  2.0940e+00,  2.1399e+00, -5.7555e+00,  3.6885e+00],
        [ 2.2950e+00,  2.9436e+00,  3.1712e+00,  4.1268e+00,  5.4157e-01,
          3.7216e+00,  2.8408e+00,  2.7181e+00,  6.7460e+00,  1.4747e+00],
        [ 5.0664e+00,  4.5652e+01,  2.7328e+00,  1.0374e+00,  1.2891e+00,
          1.3143e+01,  3.7184e+00, -1.3608e+01,  3.1697e+00,  1.1363e+01],
        [ 5.0006e+00,  6.9239e+00,  9.1918e-01,  7.2628e+00,  1.5445e+00,
          6.5242e+00,  4.0004e+00,  2.7856e+00,  1.5080e+00,  4.0918e+00],
        [ 2.0015e+00, -1.7211e+00, -2.6718e+00,  1.9970e+00,  3.6355e+00,
          4.8944e-01,  2.0002e+00,  3.0038e+00, -7.9397e+00,  3.9988e+00],
        [ 2.9915e+00,  1.0068e+01,  4.0126e+00,  5.0140e+00,  2.1576e-01,
          6.2162e+00,  3.6692e+00,  9.8564e-01,  9.0477e+00,  2.9998e+00],
        [ 3.1704e+00,  3.0173e+00,  6.3333e-01,  6.8363e+00,  2.2725e+00,
          4.9317e+00,  4.7652e+00,  5.0099e+00,  2.2206e+00,  4.9007e+00],
        [ 7.5330e-01,  1.4262e+00,  3.0599e+00,  8.5747e-01,  4.0712e+00,
          1.1776e+00,  3.8169e+00,  3.8298e+00,  3.8094e+00,  4.5052e+00],
        [ 4.0428e+00, -2.0650e+01,  2.4385e+00,  4.9425e+00,  1.9279e+00,
         -1.5739e+00,  1.0876e+00,  1.0297e+01,  9.8782e-01, -4.4288e+00],
        [ 1.0773e+00,  2.2150e+00,  2.0096e+00, -2.4710e+00,  4.9950e+00,
         -5.0779e-01,  1.9650e+00,  1.0100e+00, -1.8899e+00,  4.0205e+00],
        [ 3.4996e+00,  4.5594e+00, -2.5208e+00,  3.3402e+00,  2.6908e+00,
          3.0928e+00,  2.0393e+00,  8.1359e-01, -7.3751e+00,  4.3822e+00],
        [-4.8442e+00,  3.4518e+00,  9.9972e-01, -1.2881e+00, -3.5755e-01,
         -5.3701e-01,  1.9997e+00,  4.9337e-01,  7.5069e+00,  3.0513e+00],
        [ 1.0026e+00,  7.6105e+00, -7.1104e+00,  3.9509e+00,  4.9733e+00,
          3.0444e+00,  4.5575e+00,  2.0356e+00, -1.3359e+01,  1.0958e+01],
        [ 1.9708e+00,  2.2459e+01,  5.0115e+00,  1.0357e+00,  3.0386e+00,
          7.0322e+00,  4.9501e+00, -3.0939e+00,  8.5776e+00,  8.3022e+00],
        [ 3.0000e+00,  5.0024e+00, -1.4123e+00,  6.3346e+00, -9.3349e-01,
          4.9944e+00,  2.0182e+00,  1.1012e+00, -1.8768e-01,  1.9884e+00],
        [ 4.4226e+00,  2.0069e+00,  5.0098e+00, -8.1680e-01,  5.0611e+00,
          1.2995e+00,  1.9966e+00,  1.6425e+00,  9.9608e-01,  1.9906e+00],
        [ 1.1858e+01,  3.1806e+00,  1.9399e+00,  2.0242e+00,  9.7272e+00,
          3.8295e+00,  2.5867e+00,  2.2628e+00, -1.4185e+01,  4.8150e+00],
        [ 3.0139e+00,  4.0015e+00,  4.9996e+00,  2.0000e+00,  5.0004e+00,
          3.0423e+00,  4.6969e+00,  4.0977e+00,  5.4217e+00,  4.9981e+00],
        [ 3.1070e+00,  1.5608e+00,  4.4961e+00,  2.4194e+00,  3.9092e+00,
          2.6510e+00,  3.8237e+00,  4.1656e+00,  5.0091e+00,  3.2677e+00],
        [ 3.6123e+00,  5.0130e+00,  1.2513e+00,  5.0780e+00, -6.2890e-01,
          4.7738e+00,  1.7050e+00,  7.5555e-01,  2.9369e+00,  7.0034e-01],
        [ 1.9988e+00, -1.0755e+00,  2.1010e+00,  4.8154e-01,  5.0034e+00,
          4.1238e-01,  3.1198e+00,  4.0017e+00, -6.4504e-01,  3.9979e+00],
        [-2.4511e+00,  3.0049e+00,  4.0049e+00,  2.0168e+00, -1.7567e+00,
          1.9773e+00,  2.5612e+00,  1.9963e+00,  1.3746e+01,  7.7954e-01],
        [ 1.2900e+00,  4.8906e+00,  1.2285e+01,  2.0178e+00,  2.0017e+00,
          4.0381e+00,  5.2765e+00,  4.7427e+00,  2.3263e+01,  1.4459e+00],
        [ 3.4409e+00,  1.6323e+00,  2.1447e+00,  7.1434e+00,  2.1349e+00,
          4.9995e+00,  4.9455e+00,  5.8905e+00,  5.0000e+00,  4.0006e+00],
        [-8.3402e+00,  1.6671e+00, -9.7906e+00,  7.5550e+00, -7.1860e+00,
          1.9594e+00,  2.1880e+00,  1.9448e+00,  1.9841e+00,  3.9175e+00],
        [ 6.1855e+00,  1.0277e+00,  6.0344e+00,  2.0010e+00,  5.0009e+00,
          2.9985e+00,  3.0008e+00,  3.6213e+00,  3.0914e+00,  1.7165e+00],
        [ 9.9264e-01,  2.2125e+00,  3.9075e+00,  1.8425e+00,  4.0571e+00,
          2.0497e+00,  4.5854e+00,  4.5379e+00,  6.0676e+00,  4.9087e+00],
        [ 4.1464e+00,  1.4062e+01,  2.4284e+00,  4.7693e+00,  3.6919e+00,
          6.9404e+00,  5.3224e+00,  1.0755e+00,  2.9501e+00,  7.6420e+00],
        [ 3.7800e+00,  1.9199e+01,  1.3223e+00,  4.2259e+00, -1.6001e+00,
          7.9395e+00,  1.7065e+00, -4.9606e+00,  3.8810e+00,  3.1246e+00],
        [ 4.0234e+00,  2.0156e+00,  9.3090e-01,  2.9352e+00,  1.4458e+00,
          2.8364e+00,  1.1944e+00,  1.0778e+00, -1.3489e+00,  8.8513e-01],
        [ 2.9993e-01,  1.0106e+00,  2.8743e+00,  1.0596e+00,  2.1897e+00,
          1.1528e+00,  2.7986e+00,  2.9140e+00,  5.0939e+00,  2.6367e+00],
        [-2.7522e+00,  1.0011e+00,  9.9939e-01,  2.1638e+00,  9.9803e-01,
          9.9864e-01,  3.8559e+00,  4.0029e+00,  6.9205e+00,  4.3317e+00],
        [ 4.8687e+00, -1.5672e-01,  1.6703e+00,  7.5356e+00,  9.9502e-01,
          4.9990e+00,  3.3880e+00,  5.0098e+00,  2.9938e+00,  1.4576e+00],
        [ 3.0192e+00,  3.9819e+00, -5.9198e+00,  3.9832e+00,  2.9753e+00,
          2.7502e+00,  2.0750e+00,  9.5908e-01, -1.2959e+01,  5.9251e+00],
        [ 1.0148e+00,  9.7130e-01,  1.9768e+00,  2.0122e+00,  6.6718e-01,
          1.7201e+00,  1.7755e+00,  1.9466e+00,  4.0138e+00,  1.0400e+00],
        [ 5.3930e+00,  4.0298e+00,  2.0109e+00,  2.7548e+00,  2.9962e+00,
          3.5641e+00,  1.8677e+00,  1.0778e+00, -1.7539e+00,  2.0255e+00],
        [ 1.9953e+00,  1.2843e+01,  5.0056e+00,  2.5516e+00,  2.9983e+00,
          5.4422e+00,  5.0090e+00,  9.8768e-01,  8.9960e+00,  6.2394e+00],
        [ 2.8324e+00,  2.8434e+00,  1.9018e+00,  3.8000e+00,  3.1922e+00,
          3.3458e+00,  3.8883e+00,  3.7678e+00,  2.0126e+00,  4.2686e+00],
        [ 2.0652e+00,  8.7485e+00,  4.9003e+00, -7.1472e-02,  5.0456e+00,
          2.9448e+00,  4.2957e+00,  1.4602e+00,  5.0622e+00,  6.0046e+00],
        [ 1.2368e+00, -8.0124e-01,  4.5406e-01,  5.8132e-01,  5.0025e+00,
          1.8401e-01,  3.2316e+00,  3.9075e+00, -2.7376e+00,  4.9980e+00],
        [ 4.4707e+00,  1.3100e+01,  3.8913e+00,  5.0670e-01,  3.1494e+00,
          4.7096e+00,  2.2617e+00, -2.3287e+00,  1.8589e+00,  3.9039e+00],
        [ 9.9929e-01,  1.5253e+01,  2.1834e-03,  2.6820e+00,  2.0005e+00,
          5.3245e+00,  3.9995e+00, -1.3442e+00,  1.4326e+00,  7.5636e+00]],
       grad_fn=&lt;MmBackward0&gt;)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;"># Now use matrix factorization to predict the ratings</span></span>
<span id="cb66-2"></span>
<span id="cb66-3"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb66-4"><span class="im" style="color: #00769E;">import</span> torch.nn <span class="im" style="color: #00769E;">as</span> nn</span>
<span id="cb66-5"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb66-6"></span>
<span id="cb66-7"><span class="co" style="color: #5E5E5E;"># Create a class for the model</span></span>
<span id="cb66-8"></span>
<span id="cb66-9"><span class="kw" style="color: #003B4F;">class</span> MatrixFactorization(nn.Module):</span>
<span id="cb66-10">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, n_users, n_movies, n_factors<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>):</span>
<span id="cb66-11">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb66-12">        <span class="va" style="color: #111111;">self</span>.user_factors <span class="op" style="color: #5E5E5E;">=</span> nn.Embedding(n_users, n_factors)</span>
<span id="cb66-13">        <span class="va" style="color: #111111;">self</span>.movie_factors <span class="op" style="color: #5E5E5E;">=</span> nn.Embedding(n_movies, n_factors)</span>
<span id="cb66-14"></span>
<span id="cb66-15">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, user, movie):</span>
<span id="cb66-16">        <span class="cf" style="color: #003B4F;">return</span> (<span class="va" style="color: #111111;">self</span>.user_factors(user) <span class="op" style="color: #5E5E5E;">*</span> <span class="va" style="color: #111111;">self</span>.movie_factors(movie)).<span class="bu" style="color: null;">sum</span>(<span class="dv" style="color: #AD0000;">1</span>)      </span></code></pre></div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">model <span class="op" style="color: #5E5E5E;">=</span> MatrixFactorization(n_users, n_movies, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb67-2">model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>MatrixFactorization(
  (user_factors): Embedding(100, 2)
  (movie_factors): Embedding(10, 2)
)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">model(torch.tensor([<span class="dv" style="color: #AD0000;">0</span>]), torch.tensor([<span class="dv" style="color: #AD0000;">2</span>]))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>tensor([-0.0271], grad_fn=&lt;SumBackward1&gt;)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">A[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>tensor(5.)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="bu" style="color: null;">type</span>(A)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>torch.Tensor</code></pre>
</div>
</div>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">mask <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">~</span>torch.isnan(A)</span>
<span id="cb75-2"></span>
<span id="cb75-3"><span class="co" style="color: #5E5E5E;"># Get the indices of the non-NaN values</span></span>
<span id="cb75-4">i, j <span class="op" style="color: #5E5E5E;">=</span> torch.where(mask)</span>
<span id="cb75-5"></span>
<span id="cb75-6"><span class="co" style="color: #5E5E5E;"># Get the values of the non-NaN values</span></span>
<span id="cb75-7">v <span class="op" style="color: #5E5E5E;">=</span> A[mask]</span>
<span id="cb75-8"></span>
<span id="cb75-9"><span class="co" style="color: #5E5E5E;"># Store in PyTorch tensors</span></span>
<span id="cb75-10">users <span class="op" style="color: #5E5E5E;">=</span> i.to(torch.int64)</span>
<span id="cb75-11">movies <span class="op" style="color: #5E5E5E;">=</span> j.to(torch.int64)</span>
<span id="cb75-12">ratings <span class="op" style="color: #5E5E5E;">=</span> v.to(torch.float32)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">pd.DataFrame({<span class="st" style="color: #20794D;">'user'</span>: users, <span class="st" style="color: #20794D;">'movie'</span>: movies, <span class="st" style="color: #20794D;">'rating'</span>: ratings})</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>user</th>
      <th>movie</th>
      <th>rating</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>1</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0</td>
      <td>2</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>4</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>5</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0</td>
      <td>6</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>512</th>
      <td>98</td>
      <td>8</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>513</th>
      <td>98</td>
      <td>9</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>514</th>
      <td>99</td>
      <td>0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>515</th>
      <td>99</td>
      <td>4</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>516</th>
      <td>99</td>
      <td>6</td>
      <td>4.0</td>
    </tr>
  </tbody>
</table>
<p>517 rows × 3 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="co" style="color: #5E5E5E;"># Fit the Matrix Factorization model</span></span>
<span id="cb77-2">model <span class="op" style="color: #5E5E5E;">=</span> MatrixFactorization(n_users, n_movies, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb77-3">optimizer <span class="op" style="color: #5E5E5E;">=</span> optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>)</span>
<span id="cb77-4"></span>
<span id="cb77-5"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1000</span>):</span>
<span id="cb77-6">    <span class="co" style="color: #5E5E5E;"># Compute the loss</span></span>
<span id="cb77-7">    pred <span class="op" style="color: #5E5E5E;">=</span> model(users, movies)</span>
<span id="cb77-8">    loss <span class="op" style="color: #5E5E5E;">=</span> F.mse_loss(pred, ratings)</span>
<span id="cb77-9">    </span>
<span id="cb77-10">    <span class="co" style="color: #5E5E5E;"># Zero the gradients</span></span>
<span id="cb77-11">    optimizer.zero_grad()</span>
<span id="cb77-12">    </span>
<span id="cb77-13">    <span class="co" style="color: #5E5E5E;"># Backpropagate</span></span>
<span id="cb77-14">    loss.backward()</span>
<span id="cb77-15">    </span>
<span id="cb77-16">    <span class="co" style="color: #5E5E5E;"># Update the parameters</span></span>
<span id="cb77-17">    optimizer.step()</span>
<span id="cb77-18">    </span>
<span id="cb77-19">    <span class="co" style="color: #5E5E5E;"># Print the loss</span></span>
<span id="cb77-20">    <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb77-21">        <span class="bu" style="color: null;">print</span>(loss.item())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>14.604362487792969
4.332712650299072
1.0960761308670044
0.6966323852539062
0.5388827919960022
0.45243579149246216
0.4012693464756012
0.3728969395160675
0.35568001866340637
0.34289655089378357</code></pre>
</div>
</div>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">model(users, movies)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>tensor([3.5693, 4.5338, 2.6934, 1.8316, 4.8915, 2.0194, 2.7778, 1.8601, 2.1124,
        1.1378, 2.9079, 5.0470, 0.9911, 1.9791, 1.0050, 3.9618, 2.0085, 2.0034,
        4.0113, 1.9218, 2.9801, 1.0432, 3.8993, 4.1292, 1.9357, 3.8285, 3.5266,
        1.3640, 2.3989, 2.4166, 0.8559, 3.3685, 4.4493, 3.4018, 1.4722, 4.8378,
        4.6684, 4.4473, 4.3097, 2.0022, 5.0147, 5.0113, 1.9599, 2.8305, 1.4493,
        1.6750, 0.9520, 3.8460, 5.1279, 4.7453, 2.1484, 1.8009, 3.2104, 4.2068,
        4.5473, 2.9229, 1.1817, 3.1108, 3.2157, 1.2238, 3.6272, 3.9029, 3.2554,
        0.9945, 3.0062, 5.0030, 4.1144, 1.6314, 3.7945, 3.3091, 4.0727, 3.6212,
        2.4359, 3.5707, 1.2826, 0.9663, 4.9973, 3.0163, 2.9916, 1.0014, 3.1734,
        3.8712, 4.3364, 3.7119, 4.5313, 2.3875, 4.0274, 4.7121, 4.3851, 2.8072,
        3.2066, 3.9684, 0.9307, 1.4160, 2.7484, 2.8771, 1.2753, 2.5825, 4.9857,
        2.0109, 1.0080, 2.2618, 2.7936, 2.5859, 3.0972, 3.1443, 3.8655, 3.2023,
        2.0061, 1.9866, 4.0068, 2.7861, 4.2803, 4.5452, 3.8177, 2.9951, 5.6040,
        1.9013, 2.4498, 1.9155, 4.3239, 3.2993, 1.1275, 4.1460, 4.3619, 4.5913,
        1.1365, 3.0865, 6.0992, 3.9207, 1.8325, 3.8526, 2.0000, 2.0000, 1.0255,
        5.0484, 1.9858, 1.9716, 2.0854, 2.7726, 3.5053, 1.7365, 3.2607, 4.7006,
        1.8830, 0.3378, 2.6222, 0.6491, 3.1144, 3.8404, 2.0632, 4.3311, 4.6138,
        1.6119, 3.0444, 2.4498, 2.7860, 4.0832, 3.2681, 5.0069, 4.8745, 3.6048,
        3.5065, 1.8871, 2.9108, 0.9982, 0.6787, 1.4787, 5.6890, 1.5117, 4.0205,
        4.6624, 4.1051, 4.5437, 3.5410, 1.8761, 4.6653, 5.2577, 5.0311, 4.9531,
        4.0022, 4.7229, 4.0406, 2.5056, 3.2014, 2.9312, 1.3051, 1.3258, 4.9233,
        2.0871, 1.8761, 4.1304, 3.9279, 4.5547, 1.6639, 4.3163, 1.8149, 4.7431,
        3.4398, 3.5483, 3.2541, 2.8282, 1.5230, 2.8214, 4.9214, 3.5371, 4.4522,
        4.7928, 2.4932, 4.8619, 4.7693, 2.3121, 2.3021, 4.6609, 4.7478, 1.7768,
        5.3910, 2.8929, 2.4920, 4.1654, 1.8382, 3.4456, 3.7108, 2.3989, 1.0480,
        4.2870, 5.2730, 3.8976, 3.2956, 3.1010, 0.9666, 3.0227, 2.9491, 3.2218,
        1.4033, 1.7050, 0.5457, 3.1223, 2.1794, 3.9939, 5.0190, 2.9944, 4.5670,
        5.4131, 2.4720, 4.0239, 4.5689, 0.9386, 1.1827, 2.1553, 1.4232, 0.4127,
        1.7502, 1.5601, 2.0953, 2.3530, 2.7085, 2.7157, 2.7900, 4.6793, 1.1711,
        3.4493, 1.7701, 2.1576, 0.8294, 1.9908, 2.1975, 3.6396, 3.1952, 4.9882,
        4.0091, 2.9998, 1.9985, 3.0063, 3.7149, 4.2018, 1.1992, 2.2550, 3.5132,
        1.3794, 2.4434, 2.0220, 0.6691, 1.9927, 3.4666, 2.8342, 1.0393, 4.1834,
        4.0819, 0.8652, 4.8585, 2.0225, 2.9662, 3.9794, 1.0412, 3.0180, 1.0117,
        3.1728, 2.6027, 2.5184, 2.5120, 3.3483, 3.0602, 3.2139, 1.9144, 1.4899,
        2.8253, 2.9160, 1.6410, 3.8484, 2.9637, 2.1272, 2.0490, 4.4915, 1.6853,
        5.0641, 3.9315, 1.8812, 2.1028, 2.1203, 2.8898, 4.0215, 3.3032, 3.6131,
        4.8380, 0.7513, 3.4182, 3.0527, 3.6200, 1.3040, 1.1657, 4.2705, 4.8569,
        2.7037, 0.9142, 1.5261, 3.3970, 0.6980, 3.1131, 3.8348, 3.4478, 4.9488,
        4.0077, 4.9673, 2.0816, 0.9995, 3.4965, 3.2899, 1.0624, 1.4977, 4.3810,
        4.2225, 3.1540, 4.0191, 3.4060, 2.0160, 1.2814, 2.9608, 1.1513, 1.9530,
        0.9872, 3.9914, 4.9865, 3.0477, 1.9701, 2.5473, 4.6173, 0.5252, 3.4813,
        4.7750, 3.5971, 4.1422, 5.2524, 2.0691, 2.0039, 2.1420, 5.0156, 1.8481,
        0.7781, 2.2183, 2.6443, 2.2889, 4.3373, 2.2449, 4.5594, 3.8624, 5.2333,
        2.1537, 4.7373, 5.0298, 2.1322, 2.7047, 4.2308, 2.4907, 2.3259, 4.7678,
        5.0266, 5.2597, 4.7697, 0.9911, 1.0440, 2.7818, 1.1585, 2.1967, 4.4422,
        3.4151, 4.8498, 2.8759, 4.0001, 1.8111, 2.3611, 1.9162, 4.3893, 2.4916,
        2.0815, 3.9944, 5.5013, 4.6856, 4.9904, 4.9865, 4.0133, 1.7178, 2.2895,
        1.9270, 2.6042, 3.5529, 2.0969, 4.9558, 2.9138, 3.0347, 1.6650, 2.2754,
        3.7474, 0.9570, 2.3175, 4.1652, 4.4857, 5.1715, 5.4181, 3.7923, 4.0080,
        3.5960, 2.1456, 2.9088, 3.2796, 1.2589, 4.6664, 2.3447, 3.6577, 2.8478,
        2.8383, 2.9852, 0.9179, 3.0814, 1.2291, 0.7621, 0.8185, 2.3877, 1.1364,
        2.8636, 3.2811, 4.5790, 0.7829, 1.2192, 0.8060, 1.2341, 3.9681, 1.1422,
        4.9521, 5.1383, 2.8294, 3.6377, 3.8734, 3.5638, 2.9749, 1.5051, 1.4258,
        0.5846, 1.0630, 2.7671, 1.7912, 2.8734, 1.8916, 3.9858, 2.5439, 2.6786,
        1.6704, 1.3576, 1.7701, 2.0514, 5.1632, 2.6842, 4.8280, 1.1577, 2.9727,
        3.3256, 2.7693, 2.6430, 4.0140, 2.2755, 2.1973, 4.6792, 5.3522, 2.8058,
        4.9664, 5.2983, 4.7749, 3.8326, 2.4944, 4.2989, 2.8784, 2.0605, 2.8428,
        3.1081, 1.0411, 1.9078, 3.9594], grad_fn=&lt;SumBackward1&gt;)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1"><span class="co" style="color: #5E5E5E;"># Now, let's predict the ratings for our df dataframe</span></span>
<span id="cb81-2"></span>
<span id="cb81-3">A <span class="op" style="color: #5E5E5E;">=</span> torch.from_numpy(df.values)</span>
<span id="cb81-4">A.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>torch.Size([45, 10])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1">mask <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">~</span>torch.isnan(A)</span>
<span id="cb83-2"></span>
<span id="cb83-3"><span class="co" style="color: #5E5E5E;"># Get the indices of the non-NaN values</span></span>
<span id="cb83-4">i, j <span class="op" style="color: #5E5E5E;">=</span> torch.where(mask)</span>
<span id="cb83-5"></span>
<span id="cb83-6"><span class="co" style="color: #5E5E5E;"># Get the values of the non-NaN values</span></span>
<span id="cb83-7">v <span class="op" style="color: #5E5E5E;">=</span> A[mask]</span>
<span id="cb83-8"></span>
<span id="cb83-9"><span class="co" style="color: #5E5E5E;"># Store in PyTorch tensors</span></span>
<span id="cb83-10">users <span class="op" style="color: #5E5E5E;">=</span> i.to(torch.int64)</span>
<span id="cb83-11">movies <span class="op" style="color: #5E5E5E;">=</span> j.to(torch.int64)</span>
<span id="cb83-12">ratings <span class="op" style="color: #5E5E5E;">=</span> v.to(torch.float32)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">pd.DataFrame({<span class="st" style="color: #20794D;">'user'</span>: users, <span class="st" style="color: #20794D;">'movie'</span>: movies, <span class="st" style="color: #20794D;">'rating'</span>: ratings})</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>user</th>
      <th>movie</th>
      <th>rating</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0</td>
      <td>1</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>2</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>3</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0</td>
      <td>4</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>371</th>
      <td>44</td>
      <td>3</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>372</th>
      <td>44</td>
      <td>4</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>373</th>
      <td>44</td>
      <td>5</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>374</th>
      <td>44</td>
      <td>6</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>375</th>
      <td>44</td>
      <td>7</td>
      <td>5.0</td>
    </tr>
  </tbody>
</table>
<p>376 rows × 3 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1"><span class="co" style="color: #5E5E5E;"># Fit the Matrix Factorization model</span></span>
<span id="cb85-2">n_users <span class="op" style="color: #5E5E5E;">=</span> A.shape[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb85-3">n_movies <span class="op" style="color: #5E5E5E;">=</span> A.shape[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb85-4">model <span class="op" style="color: #5E5E5E;">=</span> MatrixFactorization(n_users, n_movies, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb85-5">optimizer <span class="op" style="color: #5E5E5E;">=</span> optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>)</span>
<span id="cb85-6"></span>
<span id="cb85-7"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1000</span>):</span>
<span id="cb85-8">    <span class="co" style="color: #5E5E5E;"># Compute the loss</span></span>
<span id="cb85-9">    pred <span class="op" style="color: #5E5E5E;">=</span> model(users, movies)</span>
<span id="cb85-10">    loss <span class="op" style="color: #5E5E5E;">=</span> F.mse_loss(pred, ratings)</span>
<span id="cb85-11">    </span>
<span id="cb85-12">    <span class="co" style="color: #5E5E5E;"># Zero the gradients</span></span>
<span id="cb85-13">    optimizer.zero_grad()</span>
<span id="cb85-14">    </span>
<span id="cb85-15">    <span class="co" style="color: #5E5E5E;"># Backpropagate</span></span>
<span id="cb85-16">    loss.backward()</span>
<span id="cb85-17">    </span>
<span id="cb85-18">    <span class="co" style="color: #5E5E5E;"># Update the parameters</span></span>
<span id="cb85-19">    optimizer.step()</span>
<span id="cb85-20">    </span>
<span id="cb85-21">    <span class="co" style="color: #5E5E5E;"># Print the loss</span></span>
<span id="cb85-22">    <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb85-23">        <span class="bu" style="color: null;">print</span>(loss.item())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>19.889324188232422
3.1148574352264404
0.6727441549301147
0.5543633103370667
0.5081750750541687
0.4629250764846802
0.4147825837135315
0.36878159642219543
0.32987719774246216
0.29975879192352295</code></pre>
</div>
</div>
<div class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1"><span class="co" style="color: #5E5E5E;"># Now, let us predict the ratings for any user and movie from df for which we already have the ratings</span></span>
<span id="cb87-2"></span>
<span id="cb87-3">username <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'Dhruv'</span></span>
<span id="cb87-4">movie <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'The Dark Knight'</span></span>
<span id="cb87-5"></span>
<span id="cb87-6"><span class="co" style="color: #5E5E5E;"># Get the user and movie indices</span></span>
<span id="cb87-7">user_idx <span class="op" style="color: #5E5E5E;">=</span> df.index.get_loc(username)</span>
<span id="cb87-8">movie_idx <span class="op" style="color: #5E5E5E;">=</span> df.columns.get_loc(movie)</span>
<span id="cb87-9"></span>
<span id="cb87-10"><span class="co" style="color: #5E5E5E;"># Predict the rating</span></span>
<span id="cb87-11">pred <span class="op" style="color: #5E5E5E;">=</span> model(torch.tensor([user_idx]), torch.tensor([movie_idx]))</span>
<span id="cb87-12">pred.item(), df.loc[username, movie]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<pre><code>(5.259384632110596, 5.0)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1">df.loc[username]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>Sholay                      NaN
Swades (We The People)      NaN
The Matrix (I)              5.0
Interstellar                5.0
Dangal                      3.0
Taare Zameen Par            NaN
Shawshank Redemption        5.0
The Dark Knight             5.0
Notting Hill                4.0
Uri: The Surgical Strike    5.0
Name: Dhruv, dtype: float64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1"><span class="co" style="color: #5E5E5E;"># Now, let us predict the ratings for any user and movie from df for which we do not have the ratings</span></span>
<span id="cb91-2"></span>
<span id="cb91-3">username <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'Dhruv'</span></span>
<span id="cb91-4">movie <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'Sholay'</span></span>
<span id="cb91-5"></span>
<span id="cb91-6"><span class="co" style="color: #5E5E5E;"># Get the user and movie indices</span></span>
<span id="cb91-7">user_idx <span class="op" style="color: #5E5E5E;">=</span> df.index.get_loc(username)</span>
<span id="cb91-8">movie_idx <span class="op" style="color: #5E5E5E;">=</span> df.columns.get_loc(movie)</span>
<span id="cb91-9"></span>
<span id="cb91-10"><span class="co" style="color: #5E5E5E;"># Predict the rating</span></span>
<span id="cb91-11">pred <span class="op" style="color: #5E5E5E;">=</span> model(torch.tensor([user_idx]), torch.tensor([movie_idx]))</span>
<span id="cb91-12">pred, df.loc[username, movie]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<pre><code>(tensor([3.7885], grad_fn=&lt;SumBackward1&gt;), nan)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1"><span class="co" style="color: #5E5E5E;"># Complete the matrix</span></span>
<span id="cb93-2"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb93-3">    completed_matrix <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(model.user_factors.weight <span class="op" style="color: #5E5E5E;">@</span> model.movie_factors.weight.t(), index<span class="op" style="color: #5E5E5E;">=</span>df.index, columns<span class="op" style="color: #5E5E5E;">=</span>df.columns)</span>
<span id="cb93-4">    <span class="co" style="color: #5E5E5E;"># round to nearest integer</span></span>
<span id="cb93-5">    completed_matrix <span class="op" style="color: #5E5E5E;">=</span> completed_matrix.<span class="bu" style="color: null;">round</span>()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">completed_matrix.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Sholay</th>
      <th>Swades (We The People)</th>
      <th>The Matrix (I)</th>
      <th>Interstellar</th>
      <th>Dangal</th>
      <th>Taare Zameen Par</th>
      <th>Shawshank Redemption</th>
      <th>The Dark Knight</th>
      <th>Notting Hill</th>
      <th>Uri: The Surgical Strike</th>
    </tr>
    <tr>
      <th>Your name</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Nipun</th>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Gautam Vashishtha</th>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>2.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>Eshan Gujarathi</th>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>Sai Krishna Avula</th>
      <td>4.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>6.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>Ankit Yadav</th>
      <td>3.0</td>
      <td>2.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Sholay</th>
      <th>Swades (We The People)</th>
      <th>The Matrix (I)</th>
      <th>Interstellar</th>
      <th>Dangal</th>
      <th>Taare Zameen Par</th>
      <th>Shawshank Redemption</th>
      <th>The Dark Knight</th>
      <th>Notting Hill</th>
      <th>Uri: The Surgical Strike</th>
    </tr>
    <tr>
      <th>Your name</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Nipun</th>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>Gautam Vashishtha</th>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>Eshan Gujarathi</th>
      <td>4.0</td>
      <td>NaN</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>Sai Krishna Avula</th>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>Ankit Yadav</th>
      <td>3.0</td>
      <td>3.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>4.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/movie-recommendation-knn-mf.html</guid>
  <pubDate>Fri, 14 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Autodiff</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/autodiff-helper.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> torch.nn <span class="im" style="color: #00769E;">as</span> nn</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> torch.optim <span class="im" style="color: #00769E;">as</span> optim</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> torch.utils.data <span class="im" style="color: #00769E;">import</span> DataLoader, TensorDataset</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># Set random seed for reproducibility</span></span>
<span id="cb1-16">torch.manual_seed(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;"># Torch version</span></span>
<span id="cb1-19">torch.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>'2.0.0+cu118'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">theta_0 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">1.0</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-2">theta_1 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">1.0</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-3">theta_2 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">2.0</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-4"></span>
<span id="cb3-5">x1 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">1.0</span>)</span>
<span id="cb3-6">x2 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">2.0</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8">f1 <span class="op" style="color: #5E5E5E;">=</span> theta_1<span class="op" style="color: #5E5E5E;">*</span>x1</span>
<span id="cb3-9">f2 <span class="op" style="color: #5E5E5E;">=</span> theta_2<span class="op" style="color: #5E5E5E;">*</span>x2</span>
<span id="cb3-10"></span>
<span id="cb3-11">f3 <span class="op" style="color: #5E5E5E;">=</span> f1 <span class="op" style="color: #5E5E5E;">+</span> f2</span>
<span id="cb3-12"></span>
<span id="cb3-13">f4 <span class="op" style="color: #5E5E5E;">=</span> f3 <span class="op" style="color: #5E5E5E;">+</span> theta_0</span>
<span id="cb3-14"></span>
<span id="cb3-15">f5 <span class="op" style="color: #5E5E5E;">=</span> f4<span class="op" style="color: #5E5E5E;">*-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-16"></span>
<span id="cb3-17">f6 <span class="op" style="color: #5E5E5E;">=</span> torch.exp(f5)</span>
<span id="cb3-18"></span>
<span id="cb3-19">f7 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> f6</span>
<span id="cb3-20"></span>
<span id="cb3-21">f8 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">/</span>f7</span>
<span id="cb3-22"></span>
<span id="cb3-23">f9 <span class="op" style="color: #5E5E5E;">=</span> torch.log(f8)</span>
<span id="cb3-24"></span>
<span id="cb3-25">L <span class="op" style="color: #5E5E5E;">=</span> f9<span class="op" style="color: #5E5E5E;">*-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-26"></span>
<span id="cb3-27">all_nodes <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"theta_0"</span>: theta_0, <span class="st" style="color: #20794D;">"theta_1"</span>: theta_1, <span class="st" style="color: #20794D;">"theta_2"</span>: theta_2,  </span>
<span id="cb3-28">             <span class="st" style="color: #20794D;">"f1"</span>: f1, <span class="st" style="color: #20794D;">"f2"</span>: f2, <span class="st" style="color: #20794D;">"f3"</span>: f3, <span class="st" style="color: #20794D;">"f4"</span>: f4, <span class="st" style="color: #20794D;">"f5"</span>: f5, <span class="st" style="color: #20794D;">"f6"</span>: f6, <span class="st" style="color: #20794D;">"f7"</span>: f7, <span class="st" style="color: #20794D;">"f8"</span>: f8, <span class="st" style="color: #20794D;">"f9"</span>: f9, <span class="st" style="color: #20794D;">"L"</span>: L}</span>
<span id="cb3-29"></span>
<span id="cb3-30"><span class="co" style="color: #5E5E5E;"># Retain grad for all nodes</span></span>
<span id="cb3-31"><span class="cf" style="color: #003B4F;">for</span> node <span class="kw" style="color: #003B4F;">in</span> all_nodes.values():</span>
<span id="cb3-32">    node.retain_grad()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Print out the function evaluation for all nodes along with name of the node</span></span>
<span id="cb4-2"><span class="cf" style="color: #003B4F;">for</span> name, node <span class="kw" style="color: #003B4F;">in</span> all_nodes.items():</span>
<span id="cb4-3">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: </span><span class="sc" style="color: #5E5E5E;">{</span>node<span class="sc" style="color: #5E5E5E;">.</span>item()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>theta_0: 1.0
theta_1: 1.0
theta_2: 2.0
f1: 1.0
f2: 4.0
f3: 5.0
f4: 6.0
f5: -6.0
f6: 0.0024787522852420807
f7: 1.0024787187576294
f8: 0.9975274205207825
f9: -0.0024756414350122213
L: 0.0024756414350122213</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">L.backward()</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;"># Print out the gradient for all nodes along with name of the node</span></span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;">for</span> name, node <span class="kw" style="color: #003B4F;">in</span> all_nodes.items():</span>
<span id="cb6-5">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: </span><span class="sc" style="color: #5E5E5E;">{</span>node<span class="sc" style="color: #5E5E5E;">.</span>grad<span class="sc" style="color: #5E5E5E;">.</span>item()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>theta_0: -0.00247262348420918
theta_1: -0.00247262348420918
theta_2: -0.00494524696841836
f1: -0.00247262348420918
f2: -0.00247262348420918
f3: -0.00247262348420918
f4: -0.00247262348420918
f5: 0.00247262348420918
f6: 0.9975274801254272
f7: 0.9975274801254272
f8: -1.0024787187576294
f9: -1.0
L: 1.0</code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">/</span>(f7<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>))<span class="op" style="color: #5E5E5E;">*-</span><span class="fl" style="color: #AD0000;">1.00247</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>tensor(0.9975, grad_fn=&lt;MulBackward0&gt;)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">torch.exp(f5)<span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">0.9975</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>tensor(0.0025, grad_fn=&lt;MulBackward0&gt;)</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/autodiff-helper.html</guid>
  <pubDate>Tue, 04 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>1d CNN</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/1d-cnn.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> torch.nn <span class="im" style="color: #00769E;">as</span> nn</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> torch.optim <span class="im" style="color: #00769E;">as</span> optim</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> torch.utils.data <span class="im" style="color: #00769E;">import</span> DataLoader, TensorDataset</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># Set random seed for reproducibility</span></span>
<span id="cb1-16">torch.manual_seed(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;"># Torch version</span></span>
<span id="cb1-19">torch.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>'2.0.0+cu118'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Simple 1d dataset</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">y <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb3-4">x <span class="op" style="color: #5E5E5E;">=</span> torch.arange(<span class="dv" style="color: #AD0000;">0</span>, <span class="bu" style="color: null;">len</span>(y))</span>
<span id="cb3-5"></span>
<span id="cb3-6">plt.plot(x, y, <span class="st" style="color: #20794D;">'o-'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/1d-cnn_files/figure-html/cell-3-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Filter 1 (detect silence)</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb4-4">    f1 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv1d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, padding<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-5">    f1.weight.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([[[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]]])</span>
<span id="cb4-6">    f1.bias.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb4-7">    y1 <span class="op" style="color: #5E5E5E;">=</span> F.relu(f1(y.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>))).view(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9">plt.plot(x, y, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'original'</span>)</span>
<span id="cb4-10">plt.plot(x, y1, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'filtered f1 (silence)'</span>)</span>
<span id="cb4-11">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>&lt;matplotlib.legend.Legend at 0x7efecfcccb80&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/1d-cnn_files/figure-html/cell-4-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Filter 2 (detect falling edge)</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb6-4">    f2 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv1d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, padding<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-5">    f2.weight.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([[[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]]])</span>
<span id="cb6-6">    f2.bias.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb6-7">    y2 <span class="op" style="color: #5E5E5E;">=</span> F.relu(f2(y.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>))).view(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-8"></span>
<span id="cb6-9">plt.plot(x, y, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'original'</span>)</span>
<span id="cb6-10">plt.plot(x, y2, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'filtered f2 (falling edge)'</span>)</span>
<span id="cb6-11">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>&lt;matplotlib.legend.Legend at 0x7efecfbc7250&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/1d-cnn_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Filter 3 (detect rising edge)</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb8-4">    f3 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv1d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, padding<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb8-5">    f3.weight.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([[[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>]]])</span>
<span id="cb8-6">    f3.bias.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb8-7">    y3 <span class="op" style="color: #5E5E5E;">=</span> F.relu(f3(y.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>))).view(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9">plt.plot(x, y, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'original'</span>)</span>
<span id="cb8-10">plt.plot(x, y3, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'filtered f3 (rising edge)'</span>)</span>
<span id="cb8-11">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>&lt;matplotlib.legend.Legend at 0x7efecfbb88e0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/1d-cnn_files/figure-html/cell-6-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Filter 4 (detect high amplitude)</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb10-4">    f4 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv1d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, padding<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb10-5">    f4.weight.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([[[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>]]])</span>
<span id="cb10-6">    f4.bias.data <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor([<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb10-7">    y4 <span class="op" style="color: #5E5E5E;">=</span> F.relu(f4(y.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>))).view(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb10-8"></span>
<span id="cb10-9">plt.plot(x, y, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'original'</span>) </span>
<span id="cb10-10">plt.plot(x, y4, <span class="st" style="color: #20794D;">'o-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'filtered f4 (high amplitude)'</span>)</span>
<span id="cb10-11">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>&lt;matplotlib.legend.Legend at 0x7efecfb2dfd0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/1d-cnn_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/1d-cnn.html</guid>
  <pubDate>Tue, 04 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>KNN LSH</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/knn-lsh.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Generate some data</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">X <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;">3000</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># Plot the data</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f321da32c10&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/knn-lsh_files/figure-html/cell-3-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Naive KNN</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">def</span> naive_knn_for_loop(X, x_test, k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>):</span>
<span id="cb4-4">    dists <span class="op" style="color: #5E5E5E;">=</span> np.zeros(X.shape[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(X.shape[<span class="dv" style="color: #AD0000;">0</span>]): <span class="co" style="color: #5E5E5E;"># N iterations (N = number of data points)</span></span>
<span id="cb4-6">        dists[i] <span class="op" style="color: #5E5E5E;">=</span> np.dot(X[i] <span class="op" style="color: #5E5E5E;">-</span> x_test, X[i] <span class="op" style="color: #5E5E5E;">-</span> x_test) <span class="co" style="color: #5E5E5E;"># Time complexity: O(D)</span></span>
<span id="cb4-7">    </span>
<span id="cb4-8">    <span class="co" style="color: #5E5E5E;"># Time complexity to create the distance array: O(N*D)</span></span>
<span id="cb4-9"></span>
<span id="cb4-10">    <span class="co" style="color: #5E5E5E;"># Now, we need to find the k smallest distances</span></span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;">return</span> np.argpartition(dists, k)[:k] <span class="co" style="color: #5E5E5E;"># Time complexity: O(Nk) or O(N) depending on the implementation</span></span>
<span id="cb4-12">  </span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">naive_knn_for_loop(X, np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>]))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([2529,  958,  804])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">X[naive_knn_for_loop(X, np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>]))]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>array([[-0.02103967,  0.02703294],
       [ 0.0092843 ,  0.02548091],
       [-0.03094897,  0.01750535]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="op" style="color: #5E5E5E;">%</span>timeit naive_knn_for_loop(X, np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>12.3 ms ± 47.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Implement using numpy</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;">def</span> naive_knn_numpy(X, x_test, k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>):</span>
<span id="cb11-4">    dists <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">sum</span>((X <span class="op" style="color: #5E5E5E;">-</span> x_test)<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb11-5">    <span class="co" style="color: #5E5E5E;">#return np.partition(dists, k)[:k]</span></span>
<span id="cb11-6">    sorted_dists <span class="op" style="color: #5E5E5E;">=</span> np.argsort(dists)</span>
<span id="cb11-7">    <span class="cf" style="color: #003B4F;">return</span> sorted_dists[:k]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">naive_knn_numpy(X, np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>]))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>array([ 958, 2529,  804])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="op" style="color: #5E5E5E;">%</span>timeit naive_knn_numpy(X, np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>240 µs ± 631 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Implement using numpy</span></span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;">def</span> naive_knn_numpy(X, x_test, k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>):</span>
<span id="cb16-4">    dists <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">sum</span>((X <span class="op" style="color: #5E5E5E;">-</span> x_test)<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb16-5">    <span class="cf" style="color: #003B4F;">return</span> np.argpartition(dists, k)[:k]</span>
<span id="cb16-6">    <span class="co" style="color: #5E5E5E;">#sorted_dists = np.argsort(dists)</span></span>
<span id="cb16-7">    <span class="co" style="color: #5E5E5E;">#return sorted_dists[:k]</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="op" style="color: #5E5E5E;">%</span>timeit naive_knn_numpy(X, np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>84.6 µs ± 607 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Show LSH implementation step by step</span></span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;"># Creating a random separating hyperplane</span></span>
<span id="cb19-4"></span>
<span id="cb19-5">w <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb19-6">b <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;">1</span>)<span class="op" style="color: #5E5E5E;">/</span><span class="fl" style="color: #AD0000;">4.0</span></span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;"># Plot the separating hyperplane</span></span>
<span id="cb19-9"></span>
<span id="cb19-10">x <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb19-11">y <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span>(w[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> x <span class="op" style="color: #5E5E5E;">+</span> b) <span class="op" style="color: #5E5E5E;">/</span> w[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb19-12"></span>
<span id="cb19-13">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb19-14">plt.plot(x, y, <span class="st" style="color: #20794D;">'r'</span>, linewidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb19-15"></span>
<span id="cb19-16"><span class="co" style="color: #5E5E5E;"># Color the points based on which side of the hyperplane they are on</span></span>
<span id="cb19-17"></span>
<span id="cb19-18">colors <span class="op" style="color: #5E5E5E;">=</span> X[:, <span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">*</span>w[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">+</span> X[:, <span class="dv" style="color: #AD0000;">1</span>]<span class="op" style="color: #5E5E5E;">*</span>w[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">+</span> b <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb19-19"></span>
<span id="cb19-20">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>, c<span class="op" style="color: #5E5E5E;">=</span>colors)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f31106b4ac0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/knn-lsh_files/figure-html/cell-13-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Create three random hyperplanes and color the points based on which side of the hyperplane they are on. </span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;"># there should be 2^3 = 8 different colors</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;"># each separating hyperplane corresponds to a bit in the hash</span></span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="bu" style="color: null;">hash</span> <span class="op" style="color: #5E5E5E;">=</span> np.zeros((X.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="dv" style="color: #AD0000;">3</span>)).astype(<span class="bu" style="color: null;">int</span>)</span>
<span id="cb21-6">ws <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb21-7">bs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;"># Cost for creating the hash table: O(N*H*D) </span></span>
<span id="cb21-9"><span class="cf" style="color: #003B4F;">for</span> H <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">3</span>): <span class="co" style="color: #5E5E5E;"># H = number of hyperplanes</span></span>
<span id="cb21-10">    w <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb21-11">    b <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;">1</span>)<span class="op" style="color: #5E5E5E;">/</span><span class="fl" style="color: #AD0000;">4.0</span></span>
<span id="cb21-12">    ws.append(w)</span>
<span id="cb21-13">    bs.append(b)</span>
<span id="cb21-14">    <span class="bu" style="color: null;">hash</span>[:, H] <span class="op" style="color: #5E5E5E;">=</span> X[:, <span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">*</span>w[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">+</span> X[:, <span class="dv" style="color: #AD0000;">1</span>]<span class="op" style="color: #5E5E5E;">*</span>w[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">+</span> b <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="co" style="color: #5E5E5E;"># D computations per iteration</span></span>
<span id="cb21-15"></span>
<span id="cb21-16"><span class="co" style="color: #5E5E5E;"># Convert the hash to a decimal number</span></span>
<span id="cb21-17"></span>
<span id="cb21-18">hash_dec <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">sum</span>(<span class="bu" style="color: null;">hash</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">**</span>np.arange(<span class="dv" style="color: #AD0000;">3</span>)[::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb21-19"></span>
<span id="cb21-20"><span class="co" style="color: #5E5E5E;"># Plot the hash</span></span>
<span id="cb21-21"></span>
<span id="cb21-22">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">hash</span>)</span>
<span id="cb21-23"></span>
<span id="cb21-24"><span class="co" style="color: #5E5E5E;"># Plot the hash with the separating hyperplanes</span></span>
<span id="cb21-25"></span>
<span id="cb21-26">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>, c<span class="op" style="color: #5E5E5E;">=</span>hash_dec)</span>
<span id="cb21-27"><span class="cf" style="color: #003B4F;">for</span> w, b <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(ws, bs):</span>
<span id="cb21-28">    <span class="bu" style="color: null;">print</span>(w, b)</span>
<span id="cb21-29">    x <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb21-30">    y <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span>(w[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> x <span class="op" style="color: #5E5E5E;">+</span> b) <span class="op" style="color: #5E5E5E;">/</span> w[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb21-31">    plt.plot(x, y, <span class="st" style="color: #20794D;">'r'</span>)</span>
<span id="cb21-32"></span>
<span id="cb21-33"><span class="co" style="color: #5E5E5E;"># Mark the test point</span></span>
<span id="cb21-34"></span>
<span id="cb21-35">x_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb21-36">plt.scatter(x_test[<span class="dv" style="color: #AD0000;">0</span>], x_test[<span class="dv" style="color: #AD0000;">1</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[-1.78798897 -1.3408181 ] [-0.08094113]
[ 0.9447324  -2.47059549] [0.09350769]
[0.20531227 0.97521902] [-0.22471283]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f31105bf280&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/knn-lsh_files/figure-html/cell-14-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(<span class="bu" style="color: null;">hash</span>)</span>
<span id="cb24-2">df.columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'h1'</span>, <span class="st" style="color: #20794D;">'h2'</span>, <span class="st" style="color: #20794D;">'h3'</span>]</span>
<span id="cb24-3">df[<span class="st" style="color: #20794D;">'hash_dec'</span>] <span class="op" style="color: #5E5E5E;">=</span> hash_dec</span>
<span id="cb24-4">df[<span class="st" style="color: #20794D;">'x'</span>] <span class="op" style="color: #5E5E5E;">=</span> X[:, <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb24-5">df[<span class="st" style="color: #20794D;">'y'</span>] <span class="op" style="color: #5E5E5E;">=</span> X[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb24-6"></span>
<span id="cb24-7">df.head(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>h1</th>
      <th>h2</th>
      <th>h3</th>
      <th>hash_dec</th>
      <th>x</th>
      <th>y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>6</td>
      <td>-1.289013</td>
      <td>-0.497073</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>6</td>
      <td>0.721631</td>
      <td>-1.923390</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>6</td>
      <td>0.042595</td>
      <td>-0.177549</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>6</td>
      <td>0.148706</td>
      <td>-0.452442</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>6</td>
      <td>-0.047372</td>
      <td>-0.431685</td>
    </tr>
    <tr>
      <th>5</th>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>6</td>
      <td>-0.478764</td>
      <td>-0.304759</td>
    </tr>
    <tr>
      <th>6</th>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>2</td>
      <td>0.812057</td>
      <td>-0.574337</td>
    </tr>
    <tr>
      <th>7</th>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>5</td>
      <td>-1.493164</td>
      <td>1.209339</td>
    </tr>
    <tr>
      <th>8</th>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>2</td>
      <td>0.820065</td>
      <td>-0.575965</td>
    </tr>
    <tr>
      <th>9</th>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>1.045276</td>
      <td>1.143788</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"></span>
<span id="cb25-2">pd.DataFrame(<span class="bu" style="color: null;">hash</span>).value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>0  1  2
1  1  0    846
0  0  1    827
   1  0    491
1  0  0    346
      1    243
0  1  1    210
   0  0     37
dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Predict the K nearest neighbors using LSH</span></span>
<span id="cb27-2"></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;"># Compute the hash for the test point</span></span>
<span id="cb27-4"></span>
<span id="cb27-5">x_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb27-6">hash_test <span class="op" style="color: #5E5E5E;">=</span> x_test[<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">*</span>ws[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">+</span> x_test[<span class="dv" style="color: #AD0000;">1</span>]<span class="op" style="color: #5E5E5E;">*</span>ws[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">+</span> bs[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb27-7"></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;">#convert to decimal</span></span>
<span id="cb27-9">hash_test_dec <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">sum</span>(hash_test <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">**</span>np.arange(<span class="dv" style="color: #AD0000;">3</span>)[::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb27-10"></span>
<span id="cb27-11">hash_test_dec</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>0</code></pre>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Find subset of points with the same hash</span></span>
<span id="cb29-2"></span>
<span id="cb29-3">X_subset <span class="op" style="color: #5E5E5E;">=</span> X[hash_dec <span class="op" style="color: #5E5E5E;">==</span> hash_test_dec]</span>
<span id="cb29-4">X_subset.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>(37, 2)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Now, we can use the naive KNN implementation to find the K nearest neighbors</span></span>
<span id="cb31-2"></span>
<span id="cb31-3">ix <span class="op" style="color: #5E5E5E;">=</span> naive_knn_numpy(X_subset, x_test, k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb31-4">X_subset[ix]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>array([[-0.04090763,  0.07013394],
       [-0.00419256,  0.08614131],
       [-0.05284791,  0.06786371]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="op" style="color: #5E5E5E;">%</span>timeit naive_knn_numpy(X_subset, x_test, k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>10.5 µs ± 31.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;"># Using FAISS from Facebook</span></span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="im" style="color: #00769E;">import</span> faiss</span>
<span id="cb35-4"></span>
<span id="cb35-5"><span class="co" style="color: #5E5E5E;"># Create an index</span></span>
<span id="cb35-6">index <span class="op" style="color: #5E5E5E;">=</span> faiss.IndexFlatL2(<span class="dv" style="color: #AD0000;">2</span>)   <span class="co" style="color: #5E5E5E;"># build the index</span></span>
<span id="cb35-7"></span>
<span id="cb35-8"><span class="co" style="color: #5E5E5E;"># Add the data to the index</span></span>
<span id="cb35-9">index.add(X.astype(np.float32))                  <span class="co" style="color: #5E5E5E;"># add vectors to the index</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># Search for the K nearest neighbors</span></span>
<span id="cb36-2">D, I <span class="op" style="color: #5E5E5E;">=</span> index.search(x_test.astype(np.float32).reshape(<span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>), k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)     <span class="co" style="color: #5E5E5E;"># actual search</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">D</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>array([[0.00073547, 0.00117345, 0.00126428]], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">I</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>array([[ 958, 2529,  804]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">X[I[<span class="dv" style="color: #AD0000;">0</span>]]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>array([[ 0.0092843 ,  0.02548091],
       [-0.02103967,  0.02703294],
       [-0.03094897,  0.01750535]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="op" style="color: #5E5E5E;">%</span>timeit index.search(x_test.astype(np.float32).reshape(<span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>), k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>50.9 µs ± 212 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;"># Now, run on GPU</span></span>
<span id="cb45-2"></span>
<span id="cb45-3">res <span class="op" style="color: #5E5E5E;">=</span> faiss.StandardGpuResources()  <span class="co" style="color: #5E5E5E;"># use a single GPU</span></span>
<span id="cb45-4"></span>
<span id="cb45-5"><span class="co" style="color: #5E5E5E;"># Create an index</span></span>
<span id="cb45-6">index <span class="op" style="color: #5E5E5E;">=</span> faiss.IndexFlatL2(<span class="dv" style="color: #AD0000;">2</span>)   <span class="co" style="color: #5E5E5E;"># build the index</span></span>
<span id="cb45-7"></span>
<span id="cb45-8">gpu_index_flat <span class="op" style="color: #5E5E5E;">=</span> faiss.index_cpu_to_gpu(res, <span class="dv" style="color: #AD0000;">0</span>, index)</span>
<span id="cb45-9"></span>
<span id="cb45-10"><span class="co" style="color: #5E5E5E;"># Add the data to the index</span></span>
<span id="cb45-11">gpu_index_flat.add(X.astype(np.float32))                  <span class="co" style="color: #5E5E5E;"># add vectors to the index</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="op" style="color: #5E5E5E;">%</span>timeit gpu_index_flat.search(x_test.astype(np.float32).reshape(<span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>), k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>79.8 µs ± 674 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;"># The above is slow because</span></span>
<span id="cb48-2"><span class="co" style="color: #5E5E5E;"># 1. We are copying the data to the GPU</span></span>
<span id="cb48-3"><span class="co" style="color: #5E5E5E;"># 2. We are copying the data back to the CPU</span></span>
<span id="cb48-4"><span class="co" style="color: #5E5E5E;"># 3. Not enough data and low dimensional data</span></span></code></pre></div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/knn-lsh.html</guid>
  <pubDate>Tue, 04 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>CNN</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/cnn.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> torch.nn <span class="im" style="color: #00769E;">as</span> nn</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> torch.optim <span class="im" style="color: #00769E;">as</span> optim</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> torch.utils.data <span class="im" style="color: #00769E;">import</span> DataLoader, TensorDataset</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># Set random seed for reproducibility</span></span>
<span id="cb1-16">torch.manual_seed(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;"># Torch version</span></span>
<span id="cb1-19">torch.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>'2.0.0+cu118'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># MNIST dataset</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="im" style="color: #00769E;">from</span> torchvision <span class="im" style="color: #00769E;">import</span> datasets, transforms</span>
<span id="cb3-4"><span class="im" style="color: #00769E;">import</span> torchvision</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># Split MNIST into train, validation, and test sets</span></span>
<span id="cb3-7">train_data <span class="op" style="color: #5E5E5E;">=</span> datasets.MNIST(root<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'data'</span>, train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, download<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, transform<span class="op" style="color: #5E5E5E;">=</span>transforms.ToTensor())</span>
<span id="cb3-8">test_data <span class="op" style="color: #5E5E5E;">=</span> datasets.MNIST(root<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'data'</span>, train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, download<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, transform<span class="op" style="color: #5E5E5E;">=</span>transforms.ToTensor())</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;"># Split train_data into train and validation sets</span></span>
<span id="cb3-11">val_data <span class="op" style="color: #5E5E5E;">=</span> torch.utils.data.Subset(train_data, <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">50000</span>, <span class="dv" style="color: #AD0000;">51000</span>))</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;"># Reduce the size of the training set to 5,000</span></span>
<span id="cb3-14">train_data <span class="op" style="color: #5E5E5E;">=</span> torch.utils.data.Subset(train_data, <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">5000</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Create data loaders</span></span>
<span id="cb4-2">batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">64</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">train_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(train_data, batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb4-5">val_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(val_data, batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb4-6">test_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(test_data, batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">img, target <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(train_loader))</span>
<span id="cb5-2"><span class="bu" style="color: null;">print</span>(img.shape)</span>
<span id="cb5-3"><span class="bu" style="color: null;">print</span>(target.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([64, 1, 28, 28])
torch.Size([64])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">plt.imshow(img[<span class="dv" style="color: #AD0000;">0</span>].numpy().squeeze(), cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray_r'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">img[<span class="dv" style="color: #AD0000;">0</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>torch.Size([1, 28, 28])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Create a simple LeNet like CNN</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;">class</span> LeNet5(nn.Module):</span>
<span id="cb10-4">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb10-5">        <span class="bu" style="color: null;">super</span>(LeNet5, <span class="va" style="color: #111111;">self</span>).<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb10-6">        <span class="co" style="color: #5E5E5E;"># 1 input image channel, 6 output channels, 5x5 square convolution</span></span>
<span id="cb10-7">        <span class="va" style="color: #111111;">self</span>.conv1 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">5</span>) </span>
<span id="cb10-8">        <span class="co" style="color: #5E5E5E;"># 6 input image channel, 16 output channels, 5x5 square convolution</span></span>
<span id="cb10-9">        <span class="va" style="color: #111111;">self</span>.conv2 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb10-10">        <span class="va" style="color: #111111;">self</span>.fc1 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">16</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">4</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">120</span>)</span>
<span id="cb10-11">        <span class="va" style="color: #111111;">self</span>.fc2 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">120</span>, <span class="dv" style="color: #AD0000;">84</span>)</span>
<span id="cb10-12">        <span class="va" style="color: #111111;">self</span>.fc3 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">84</span>, <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb10-13">        </span>
<span id="cb10-14">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb10-15">        x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.conv1(x) <span class="co" style="color: #5E5E5E;"># 28x28x1 -&gt; 24x24x6</span></span>
<span id="cb10-16">        x <span class="op" style="color: #5E5E5E;">=</span> F.max_pool2d(F.relu(x), <span class="dv" style="color: #AD0000;">2</span>) <span class="co" style="color: #5E5E5E;"># 24x24x6 -&gt; 12x12x6</span></span>
<span id="cb10-17">        x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.conv2(x) <span class="co" style="color: #5E5E5E;"># 12x12x6 -&gt; 8x8x16</span></span>
<span id="cb10-18">        x <span class="op" style="color: #5E5E5E;">=</span> F.max_pool2d(F.relu(x), <span class="dv" style="color: #AD0000;">2</span>) <span class="co" style="color: #5E5E5E;"># 8x8x16 -&gt; 4x4x16</span></span>
<span id="cb10-19">        x <span class="op" style="color: #5E5E5E;">=</span> x.view(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="va" style="color: #111111;">self</span>.num_flat_features(x)) <span class="co" style="color: #5E5E5E;"># 4x4x16 -&gt; 256</span></span>
<span id="cb10-20">        x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fc1(x) <span class="co" style="color: #5E5E5E;"># 256 -&gt; 120</span></span>
<span id="cb10-21">        x <span class="op" style="color: #5E5E5E;">=</span> F.relu(x)</span>
<span id="cb10-22">        x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fc2(x) <span class="co" style="color: #5E5E5E;"># 120 -&gt; 84</span></span>
<span id="cb10-23">        x <span class="op" style="color: #5E5E5E;">=</span> F.relu(x)</span>
<span id="cb10-24">        x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fc3(x) <span class="co" style="color: #5E5E5E;"># 84 -&gt; 10</span></span>
<span id="cb10-25">        <span class="cf" style="color: #003B4F;">return</span> x</span>
<span id="cb10-26">    </span>
<span id="cb10-27">    <span class="kw" style="color: #003B4F;">def</span> num_flat_features(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb10-28">        size <span class="op" style="color: #5E5E5E;">=</span> x.size()[<span class="dv" style="color: #AD0000;">1</span>:]</span>
<span id="cb10-29">        num_features <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb10-30">        <span class="cf" style="color: #003B4F;">for</span> s <span class="kw" style="color: #003B4F;">in</span> size:</span>
<span id="cb10-31">            num_features <span class="op" style="color: #5E5E5E;">*=</span> s</span>
<span id="cb10-32">        <span class="cf" style="color: #003B4F;">return</span> num_features</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Create a model</span></span>
<span id="cb11-2"></span>
<span id="cb11-3">model <span class="op" style="color: #5E5E5E;">=</span> LeNet5()</span>
<span id="cb11-4"><span class="bu" style="color: null;">print</span>(model)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>LeNet5(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=256, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=84, bias=True)
  (fc3): Linear(in_features=84, out_features=10, bias=True)
)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># Train the model</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;"># Define the loss and optimizer</span></span>
<span id="cb13-4">criterion <span class="op" style="color: #5E5E5E;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb13-5">optimizer <span class="op" style="color: #5E5E5E;">=</span> optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.001</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;"># Train the model</span></span>
<span id="cb13-8">n_epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb13-9"></span>
<span id="cb13-10">train_losses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb13-11">val_losses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_epochs):</span>
<span id="cb13-14">    train_loss <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb13-15">    val_loss <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb13-16">    </span>
<span id="cb13-17">    <span class="co" style="color: #5E5E5E;"># Train the model</span></span>
<span id="cb13-18">    model.train()</span>
<span id="cb13-19">    <span class="cf" style="color: #003B4F;">for</span> data, target <span class="kw" style="color: #003B4F;">in</span> train_loader:</span>
<span id="cb13-20">        optimizer.zero_grad()</span>
<span id="cb13-21">        output <span class="op" style="color: #5E5E5E;">=</span> model(data)</span>
<span id="cb13-22">        loss <span class="op" style="color: #5E5E5E;">=</span> criterion(output, target)</span>
<span id="cb13-23">        loss.backward()</span>
<span id="cb13-24">        optimizer.step()</span>
<span id="cb13-25">        train_loss <span class="op" style="color: #5E5E5E;">+=</span> loss.item()<span class="op" style="color: #5E5E5E;">*</span>data.size(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb13-26">        </span>
<span id="cb13-27">    <span class="co" style="color: #5E5E5E;"># Evaluate the model</span></span>
<span id="cb13-28">    model.<span class="bu" style="color: null;">eval</span>()</span>
<span id="cb13-29">    <span class="cf" style="color: #003B4F;">for</span> data, target <span class="kw" style="color: #003B4F;">in</span> val_loader:</span>
<span id="cb13-30">        output <span class="op" style="color: #5E5E5E;">=</span> model(data)</span>
<span id="cb13-31">        loss <span class="op" style="color: #5E5E5E;">=</span> criterion(output, target)</span>
<span id="cb13-32">        val_loss <span class="op" style="color: #5E5E5E;">+=</span> loss.item()<span class="op" style="color: #5E5E5E;">*</span>data.size(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb13-33">        </span>
<span id="cb13-34">    <span class="co" style="color: #5E5E5E;"># Calculate average losses</span></span>
<span id="cb13-35">    train_loss <span class="op" style="color: #5E5E5E;">=</span> train_loss<span class="op" style="color: #5E5E5E;">/</span><span class="bu" style="color: null;">len</span>(train_loader.sampler)</span>
<span id="cb13-36">    val_loss <span class="op" style="color: #5E5E5E;">=</span> val_loss<span class="op" style="color: #5E5E5E;">/</span><span class="bu" style="color: null;">len</span>(val_loader.sampler)</span>
<span id="cb13-37">    train_losses.append(train_loss)</span>
<span id="cb13-38">    val_losses.append(val_loss)</span>
<span id="cb13-39">    </span>
<span id="cb13-40">    <span class="co" style="color: #5E5E5E;"># Print training/validation statistics </span></span>
<span id="cb13-41">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Epoch: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> </span><span class="ch" style="color: #20794D;">\t</span><span class="st" style="color: #20794D;">Training Loss: </span><span class="sc" style="color: #5E5E5E;">{:.6f}</span><span class="st" style="color: #20794D;"> </span><span class="ch" style="color: #20794D;">\t</span><span class="st" style="color: #20794D;">Validation Loss: </span><span class="sc" style="color: #5E5E5E;">{:.6f}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(</span>
<span id="cb13-42">        epoch<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb13-43">        train_loss,</span>
<span id="cb13-44">        val_loss</span>
<span id="cb13-45">        ))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch: 1    Training Loss: 1.437300     Validation Loss: 0.653900
Epoch: 2    Training Loss: 0.424091     Validation Loss: 0.367598
Epoch: 3    Training Loss: 0.303504     Validation Loss: 0.308797
Epoch: 4    Training Loss: 0.219186     Validation Loss: 0.257062
Epoch: 5    Training Loss: 0.195089     Validation Loss: 0.214157
Epoch: 6    Training Loss: 0.153489     Validation Loss: 0.190220
Epoch: 7    Training Loss: 0.130065     Validation Loss: 0.189110
Epoch: 8    Training Loss: 0.114033     Validation Loss: 0.173153
Epoch: 9    Training Loss: 0.103402     Validation Loss: 0.167645
Epoch: 10   Training Loss: 0.089715     Validation Loss: 0.156438</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Plot the training and validation loss</span></span>
<span id="cb15-2"></span>
<span id="cb15-3">plt.plot(train_losses, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Training loss'</span>)</span>
<span id="cb15-4">plt.plot(val_losses, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Validation loss'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Test the model</span></span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb16-4">    correct <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb16-5">    total <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb16-6">    <span class="cf" style="color: #003B4F;">for</span> data, target <span class="kw" style="color: #003B4F;">in</span> test_loader:</span>
<span id="cb16-7">        output <span class="op" style="color: #5E5E5E;">=</span> model(data)</span>
<span id="cb16-8">        _, predicted <span class="op" style="color: #5E5E5E;">=</span> torch.<span class="bu" style="color: null;">max</span>(output.data, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb16-9">        total <span class="op" style="color: #5E5E5E;">+=</span> target.size(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb16-10">        correct <span class="op" style="color: #5E5E5E;">+=</span> (predicted <span class="op" style="color: #5E5E5E;">==</span> target).<span class="bu" style="color: null;">sum</span>().item()</span>
<span id="cb16-11"></span>
<span id="cb16-12">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Test Accuracy: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">%'</span>.<span class="bu" style="color: null;">format</span>(<span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">*</span> correct <span class="op" style="color: #5E5E5E;">/</span> total))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test Accuracy: 96.1%</code></pre>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># Now, let us take an image and walk it through the model</span></span>
<span id="cb18-2"></span>
<span id="cb18-3">test_img <span class="op" style="color: #5E5E5E;">=</span> train_data[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">plt.imshow(test_img.numpy().squeeze(), cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray_r'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># Get weights and biases from the first convolutional layer</span></span>
<span id="cb20-2"></span>
<span id="cb20-3">weights <span class="op" style="color: #5E5E5E;">=</span> model.conv1.weight.data</span>
<span id="cb20-4">w <span class="op" style="color: #5E5E5E;">=</span> weights.numpy()</span>
<span id="cb20-5"></span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;"># Plot the weights</span></span>
<span id="cb20-7"></span>
<span id="cb20-8">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb20-9">ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb20-10"></span>
<span id="cb20-11"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>):</span>
<span id="cb20-12">    sns.heatmap(w[i][<span class="dv" style="color: #AD0000;">0</span>], ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>, cbar<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, annot<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb20-13">    ax[i].set_title(<span class="st" style="color: #20794D;">'Filter </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Get output from model's first conv1 layer</span></span>
<span id="cb21-2"></span>
<span id="cb21-3">conv1 <span class="op" style="color: #5E5E5E;">=</span> F.relu(model.conv1(test_img))</span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb21-6">c1 <span class="op" style="color: #5E5E5E;">=</span> conv1 <span class="op" style="color: #5E5E5E;">-</span> conv1.<span class="bu" style="color: null;">min</span>()</span>
<span id="cb21-7">c1 <span class="op" style="color: #5E5E5E;">=</span> c1 <span class="op" style="color: #5E5E5E;">/</span> conv1.<span class="bu" style="color: null;">max</span>()</span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="bu" style="color: null;">print</span>(c1.shape)</span>
<span id="cb21-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"1 image, 6 channels, 24x24 pixels"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 6, 24, 24])
1 image, 6 channels, 24x24 pixels</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb23-2"></span>
<span id="cb23-3">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb23-4">ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb23-5"></span>
<span id="cb23-6"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>):</span>
<span id="cb23-7">    sns.heatmap(c1[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb23-8">    ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># Get output from model after max pooling</span></span>
<span id="cb24-2"></span>
<span id="cb24-3">pool1 <span class="op" style="color: #5E5E5E;">=</span> F.max_pool2d(conv1, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb24-6">p1 <span class="op" style="color: #5E5E5E;">=</span> pool1 <span class="op" style="color: #5E5E5E;">-</span> pool1.<span class="bu" style="color: null;">min</span>()</span>
<span id="cb24-7">p1 <span class="op" style="color: #5E5E5E;">=</span> p1 <span class="op" style="color: #5E5E5E;">/</span> pool1.<span class="bu" style="color: null;">max</span>()</span>
<span id="cb24-8"></span>
<span id="cb24-9"><span class="bu" style="color: null;">print</span>(p1.shape)</span>
<span id="cb24-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"1 image, 6 channels, 12x12 pixels"</span>)</span>
<span id="cb24-11"></span>
<span id="cb24-12"><span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb24-13"></span>
<span id="cb24-14">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb24-15">ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb24-16"></span>
<span id="cb24-17"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>):</span>
<span id="cb24-18">    sns.heatmap(p1[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb24-19">    ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 6, 12, 12])
1 image, 6 channels, 12x12 pixels</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-18-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># Visualize the filters in the second convolutional layer</span></span>
<span id="cb26-2"></span>
<span id="cb26-3">weights <span class="op" style="color: #5E5E5E;">=</span> model.conv2.weight.data</span>
<span id="cb26-4">w <span class="op" style="color: #5E5E5E;">=</span> weights.numpy()</span>
<span id="cb26-5"></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;"># Plot the weights</span></span>
<span id="cb26-7"></span>
<span id="cb26-8">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">16</span>))</span>
<span id="cb26-9">ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb26-10"></span>
<span id="cb26-11"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">16</span>):</span>
<span id="cb26-12">    sns.heatmap(w[i][<span class="dv" style="color: #AD0000;">0</span>], ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>, cbar<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb26-13">    ax[i].set_title(<span class="st" style="color: #20794D;">'Filter </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Get output from model's second conv2 layer</span></span>
<span id="cb27-2"></span>
<span id="cb27-3">conv2 <span class="op" style="color: #5E5E5E;">=</span> F.relu(model.conv2(pool1))</span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb27-6">c2 <span class="op" style="color: #5E5E5E;">=</span> conv2 <span class="op" style="color: #5E5E5E;">-</span> conv2.<span class="bu" style="color: null;">min</span>()</span>
<span id="cb27-7">c2 <span class="op" style="color: #5E5E5E;">=</span> c2 <span class="op" style="color: #5E5E5E;">/</span> conv2.<span class="bu" style="color: null;">max</span>()</span>
<span id="cb27-8"></span>
<span id="cb27-9"><span class="bu" style="color: null;">print</span>(c2.shape)</span>
<span id="cb27-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"1 image, 16 channels, 8x8 pixels"</span>)</span>
<span id="cb27-11"></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb27-13"></span>
<span id="cb27-14">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">18</span>))</span>
<span id="cb27-15">ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb27-16"></span>
<span id="cb27-17"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">16</span>):</span>
<span id="cb27-18">    sns.heatmap(c2[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb27-19">    ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 16, 8, 8])
1 image, 16 channels, 8x8 pixels</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Get output from model after max pooling</span></span>
<span id="cb29-2"></span>
<span id="cb29-3">pool2 <span class="op" style="color: #5E5E5E;">=</span> F.max_pool2d(conv2, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb29-4"></span>
<span id="cb29-5"><span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb29-6">p2 <span class="op" style="color: #5E5E5E;">=</span> pool2 <span class="op" style="color: #5E5E5E;">-</span> pool2.<span class="bu" style="color: null;">min</span>()</span>
<span id="cb29-7">p2 <span class="op" style="color: #5E5E5E;">=</span> p2 <span class="op" style="color: #5E5E5E;">/</span> pool2.<span class="bu" style="color: null;">max</span>()</span>
<span id="cb29-8"></span>
<span id="cb29-9"><span class="bu" style="color: null;">print</span>(p2.shape)</span>
<span id="cb29-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"1 image, 16 channels, 4x4 pixels"</span>)</span>
<span id="cb29-11"></span>
<span id="cb29-12"><span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb29-13"></span>
<span id="cb29-14">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">18</span>))</span>
<span id="cb29-15">ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb29-16"></span>
<span id="cb29-17"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">16</span>):</span>
<span id="cb29-18">    sns.heatmap(p2[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb29-19">    ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 16, 4, 4])
1 image, 16 channels, 4x4 pixels</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-21-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Flatten the output of the second convolutional layer</span></span>
<span id="cb31-2"></span>
<span id="cb31-3">flat <span class="op" style="color: #5E5E5E;">=</span> pool2.view(pool2.size(<span class="dv" style="color: #AD0000;">0</span>), <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb31-4"><span class="bu" style="color: null;">print</span>(flat.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 256])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;"># Repeat the above process as a function to visualize the convolution outputs for any image for any layer</span></span>
<span id="cb33-2"><span class="kw" style="color: #003B4F;">def</span> scale_img(img):</span>
<span id="cb33-3">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;">    Scale the image to the same scale</span></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb33-6">    img <span class="op" style="color: #5E5E5E;">=</span> img <span class="op" style="color: #5E5E5E;">-</span> img.<span class="bu" style="color: null;">min</span>()</span>
<span id="cb33-7">    img <span class="op" style="color: #5E5E5E;">=</span> img <span class="op" style="color: #5E5E5E;">/</span> img.<span class="bu" style="color: null;">max</span>()</span>
<span id="cb33-8">    <span class="cf" style="color: #003B4F;">return</span> img</span>
<span id="cb33-9"></span>
<span id="cb33-10"><span class="kw" style="color: #003B4F;">def</span> visualize_conv_output(model, img):</span>
<span id="cb33-11">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb33-12"><span class="co" style="color: #5E5E5E;">    Visualize the output of a convolutional layer</span></span>
<span id="cb33-13"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb33-14">    <span class="co" style="color: #5E5E5E;"># Get output from model's first conv1 layer</span></span>
<span id="cb33-15">    conv1 <span class="op" style="color: #5E5E5E;">=</span> F.relu(model.conv1(img))</span>
<span id="cb33-16"></span>
<span id="cb33-17">    <span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb33-18">    c1 <span class="op" style="color: #5E5E5E;">=</span> scale_img(conv1)</span>
<span id="cb33-19"></span>
<span id="cb33-20">    <span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb33-21">    fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb33-22">    ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb33-23"></span>
<span id="cb33-24"></span>
<span id="cb33-25">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>):</span>
<span id="cb33-26">        sns.heatmap(c1[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb33-27">        ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb33-28">    <span class="co" style="color: #5E5E5E;"># Add title to the figure</span></span>
<span id="cb33-29">    fig.suptitle(<span class="st" style="color: #20794D;">'Convolutional Layer 1'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span>
<span id="cb33-30">    </span>
<span id="cb33-31">    <span class="co" style="color: #5E5E5E;"># Get output from model after max pooling</span></span>
<span id="cb33-32">    pool1 <span class="op" style="color: #5E5E5E;">=</span> F.max_pool2d(conv1, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb33-33"></span>
<span id="cb33-34">    <span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb33-35">    p1 <span class="op" style="color: #5E5E5E;">=</span> scale_img(pool1)</span>
<span id="cb33-36"></span>
<span id="cb33-37">    <span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb33-38">    fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb33-39">    ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb33-40"></span>
<span id="cb33-41"></span>
<span id="cb33-42">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>):</span>
<span id="cb33-43">        sns.heatmap(p1[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb33-44">        ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb33-45">    <span class="co" style="color: #5E5E5E;"># Add title to the figure</span></span>
<span id="cb33-46">    fig.suptitle(<span class="st" style="color: #20794D;">'Max Pooling Layer 1'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span>
<span id="cb33-47"></span>
<span id="cb33-48">    <span class="co" style="color: #5E5E5E;"># Get output from model's second conv2 layer</span></span>
<span id="cb33-49">    conv2 <span class="op" style="color: #5E5E5E;">=</span> F.relu(model.conv2(pool1))</span>
<span id="cb33-50"></span>
<span id="cb33-51">    <span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb33-52">    c2 <span class="op" style="color: #5E5E5E;">=</span> scale_img(conv2)</span>
<span id="cb33-53"></span>
<span id="cb33-54">    <span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb33-55">    fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">18</span>))</span>
<span id="cb33-56">    ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb33-57"></span>
<span id="cb33-58">    </span>
<span id="cb33-59">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">16</span>):</span>
<span id="cb33-60">        sns.heatmap(c2[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb33-61">        ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb33-62">    <span class="co" style="color: #5E5E5E;"># Add title to the figure</span></span>
<span id="cb33-63">    fig.suptitle(<span class="st" style="color: #20794D;">'Convolutional Layer 2'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span>
<span id="cb33-64"></span>
<span id="cb33-65">    <span class="co" style="color: #5E5E5E;"># Get output from model after max pooling</span></span>
<span id="cb33-66">    pool2 <span class="op" style="color: #5E5E5E;">=</span> F.max_pool2d(conv2, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb33-67"></span>
<span id="cb33-68">    <span class="co" style="color: #5E5E5E;"># For plotting bring all the images to the same scale</span></span>
<span id="cb33-69">    p2 <span class="op" style="color: #5E5E5E;">=</span> scale_img(pool2)</span>
<span id="cb33-70"></span>
<span id="cb33-71">    <span class="co" style="color: #5E5E5E;"># Visualizae the output of the first convolutional layer</span></span>
<span id="cb33-72">    fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">18</span>))</span>
<span id="cb33-73">    ax <span class="op" style="color: #5E5E5E;">=</span> axes.ravel()</span>
<span id="cb33-74"></span>
<span id="cb33-75">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">16</span>):</span>
<span id="cb33-76">        sns.heatmap(p2[<span class="dv" style="color: #AD0000;">0</span>][i].detach().numpy(), ax<span class="op" style="color: #5E5E5E;">=</span>ax[i], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb33-77">        ax[i].set_title(<span class="st" style="color: #20794D;">'Image </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb33-78">    <span class="co" style="color: #5E5E5E;"># Add title to the figure</span></span>
<span id="cb33-79">    fig.suptitle(<span class="st" style="color: #20794D;">'Max Pooling Layer 2'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">visualize_conv_output(model, train_data[<span class="dv" style="color: #AD0000;">2</span>][<span class="dv" style="color: #AD0000;">0</span>].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-24-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-24-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-24-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-24-output-4.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">visualize_conv_output(model, train_data[<span class="dv" style="color: #AD0000;">4</span>][<span class="dv" style="color: #AD0000;">0</span>].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-25-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-25-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-25-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn_files/figure-html/cell-25-output-4.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/cnn.html</guid>
  <pubDate>Mon, 03 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Generating names using MLPs</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/names.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> torch <span class="im" style="color: #00769E;">import</span> nn</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt <span class="co" style="color: #5E5E5E;"># for making figures</span></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">torch.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>'2.0.0+cu118'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">device <span class="op" style="color: #5E5E5E;">=</span> torch.device(<span class="st" style="color: #20794D;">"cuda"</span> <span class="cf" style="color: #003B4F;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"cpu"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Get some names from https://github.com/MASTREX/List-of-Indian-Names</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">!</span>wget https:<span class="op" style="color: #5E5E5E;">//</span>raw.githubusercontent.com<span class="op" style="color: #5E5E5E;">/</span>balasahebgulave<span class="op" style="color: #5E5E5E;">/</span>Dataset<span class="op" style="color: #5E5E5E;">-</span>Indian<span class="op" style="color: #5E5E5E;">-</span>Names<span class="op" style="color: #5E5E5E;">/</span>master<span class="op" style="color: #5E5E5E;">/</span>Indian_Names.csv <span class="op" style="color: #5E5E5E;">-</span>O names<span class="op" style="color: #5E5E5E;">-</span><span class="bu" style="color: null;">long</span>.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>--2023-03-31 17:00:55--  https://raw.githubusercontent.com/balasahebgulave/Dataset-Indian-Names/master/Indian_Names.csv
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.110.133, 185.199.109.133, 185.199.108.133, ...
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.110.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 85538 (84K) [text/plain]
Saving to: ‘names-long.csv’

names-long.csv      100%[===================&gt;]  83.53K  --.-KB/s    in 0.07s   

2023-03-31 17:00:55 (1.12 MB/s) - ‘names-long.csv’ saved [85538/85538]
</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">!</span>head names<span class="op" style="color: #5E5E5E;">-</span><span class="bu" style="color: null;">long</span>.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>,Name
0,aabid
1,aabida
2,aachal
3,aadesh
4,aadil
5,aadish
6,aaditya
7,aaenab
8,aafreen</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">words <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'names-long.csv'</span>)[<span class="st" style="color: #20794D;">"Name"</span>]</span>
<span id="cb10-2">words <span class="op" style="color: #5E5E5E;">=</span> words.<span class="bu" style="color: null;">str</span>.lower()</span>
<span id="cb10-3">words <span class="op" style="color: #5E5E5E;">=</span> words.<span class="bu" style="color: null;">str</span>.strip()</span>
<span id="cb10-4">words <span class="op" style="color: #5E5E5E;">=</span> words.<span class="bu" style="color: null;">str</span>.replace(<span class="st" style="color: #20794D;">" "</span>, <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6">words <span class="op" style="color: #5E5E5E;">=</span> words[words.<span class="bu" style="color: null;">str</span>.<span class="bu" style="color: null;">len</span>() <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb10-7">words <span class="op" style="color: #5E5E5E;">=</span> words[words.<span class="bu" style="color: null;">str</span>.<span class="bu" style="color: null;">len</span>() <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">10</span>]</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;"># Randomly shuffle the words</span></span>
<span id="cb10-10">words <span class="op" style="color: #5E5E5E;">=</span> words.sample(frac<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).reset_index(drop<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb10-11">words <span class="op" style="color: #5E5E5E;">=</span> words.tolist()</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;"># Remove words having non alphabets</span></span>
<span id="cb10-14">words <span class="op" style="color: #5E5E5E;">=</span> [word <span class="cf" style="color: #003B4F;">for</span> word <span class="kw" style="color: #003B4F;">in</span> words <span class="cf" style="color: #003B4F;">if</span> word.isalpha()]</span>
<span id="cb10-15">words[:<span class="dv" style="color: #AD0000;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>['sehran',
 'iema',
 'bajinder',
 'manoj',
 'nayaka',
 'ajmal',
 'navleen',
 'akhtari',
 'samsung',
 'imtyaz']</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;">len</span>(words)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>6184</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># build the vocabulary of characters and mappings to/from integers</span></span>
<span id="cb14-2">chars <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sorted</span>(<span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">set</span>(<span class="st" style="color: #20794D;">''</span>.join(words))))</span>
<span id="cb14-3">stoi <span class="op" style="color: #5E5E5E;">=</span> {s:i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">for</span> i,s <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(chars)}</span>
<span id="cb14-4">stoi[<span class="st" style="color: #20794D;">'.'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb14-5">itos <span class="op" style="color: #5E5E5E;">=</span> {i:s <span class="cf" style="color: #003B4F;">for</span> s,i <span class="kw" style="color: #003B4F;">in</span> stoi.items()}</span>
<span id="cb14-6"><span class="bu" style="color: null;">print</span>(itos)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 0: '.'}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">block_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span> <span class="co" style="color: #5E5E5E;"># context length: how many characters do we take to predict the next one?</span></span>
<span id="cb16-2">X, Y <span class="op" style="color: #5E5E5E;">=</span> [], []</span>
<span id="cb16-3"><span class="cf" style="color: #003B4F;">for</span> w <span class="kw" style="color: #003B4F;">in</span> words[:]:</span>
<span id="cb16-4">  </span>
<span id="cb16-5">  <span class="co" style="color: #5E5E5E;">#print(w)</span></span>
<span id="cb16-6">  context <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> block_size</span>
<span id="cb16-7">  <span class="cf" style="color: #003B4F;">for</span> ch <span class="kw" style="color: #003B4F;">in</span> w <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'.'</span>:</span>
<span id="cb16-8">    ix <span class="op" style="color: #5E5E5E;">=</span> stoi[ch]</span>
<span id="cb16-9">    X.append(context)</span>
<span id="cb16-10">    Y.append(ix)</span>
<span id="cb16-11">    <span class="co" style="color: #5E5E5E;">#print(''.join(itos[i] for i in context), '---&gt;', itos[ix])</span></span>
<span id="cb16-12">    context <span class="op" style="color: #5E5E5E;">=</span> context[<span class="dv" style="color: #AD0000;">1</span>:] <span class="op" style="color: #5E5E5E;">+</span> [ix] <span class="co" style="color: #5E5E5E;"># crop and append</span></span>
<span id="cb16-13">  </span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;"># Move data to GPU</span></span>
<span id="cb16-15"></span>
<span id="cb16-16">X <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(X).to(device)</span>
<span id="cb16-17">Y <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(Y).to(device)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">X.shape, X.dtype, Y.shape, Y.dtype</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>(torch.Size([44325, 4]), torch.int64, torch.Size([44325]), torch.int64)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Embedding layer for the context</span></span>
<span id="cb19-2"></span>
<span id="cb19-3">emb_dim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb19-4">emb <span class="op" style="color: #5E5E5E;">=</span> torch.nn.Embedding(<span class="bu" style="color: null;">len</span>(stoi), emb_dim)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">emb.weight</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>Parameter containing:
tensor([[-0.7321, -0.0133],
        [ 0.9890, -0.3715],
        [-1.2565, -0.3346],
        [ 0.3989,  1.4209],
        [-0.5718, -0.1615],
        [ 0.4853,  2.2499],
        [ 0.1107,  2.7214],
        [-1.7009,  1.1288],
        [-0.6636, -1.1188],
        [-1.6768,  1.0876],
        [ 0.1645,  0.0063],
        [-1.0367, -0.9603],
        [-3.0939,  1.9831],
        [-0.8332,  0.8572],
        [-1.4305, -0.6878],
        [-0.5197, -0.9626],
        [-2.3395,  0.6205],
        [-0.7045,  0.2387],
        [ 2.8074, -0.8545],
        [-0.2396, -0.7623],
        [-1.1135, -0.1288],
        [-0.5464, -0.0345],
        [-1.2686,  1.0719],
        [-1.3973, -0.5510],
        [ 0.9127,  1.2566],
        [ 0.6278,  1.1915],
        [ 0.0465,  1.2633]], requires_grad=True)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># Function to visualize the embedding in 2d space</span></span>
<span id="cb22-2"></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;">def</span> plot_emb(emb, itos, ax<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb22-4">    <span class="cf" style="color: #003B4F;">if</span> ax <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb22-5">        fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb22-6">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(itos)):</span>
<span id="cb22-7">        x, y <span class="op" style="color: #5E5E5E;">=</span> emb.weight[i].detach().cpu().numpy()</span>
<span id="cb22-8">        ax.scatter(x, y, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb22-9">        ax.text(x <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.05</span>, y <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.05</span>, itos[i])</span>
<span id="cb22-10">    <span class="cf" style="color: #003B4F;">return</span> ax</span>
<span id="cb22-11"></span>
<span id="cb22-12">plot_emb(emb, itos)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>&lt;AxesSubplot:&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/names_files/figure-html/cell-15-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;">class</span> NextChar(nn.Module):</span>
<span id="cb24-2">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, block_size, vocab_size, emb_dim, hidden_size):</span>
<span id="cb24-3">    <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb24-4">    <span class="va" style="color: #111111;">self</span>.emb <span class="op" style="color: #5E5E5E;">=</span> nn.Embedding(vocab_size, emb_dim)</span>
<span id="cb24-5">    <span class="va" style="color: #111111;">self</span>.lin1 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(block_size <span class="op" style="color: #5E5E5E;">*</span> emb_dim, hidden_size)</span>
<span id="cb24-6">    <span class="va" style="color: #111111;">self</span>.lin2 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(hidden_size, vocab_size)</span>
<span id="cb24-7"></span>
<span id="cb24-8">  <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb24-9">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.emb(x)</span>
<span id="cb24-10">    x <span class="op" style="color: #5E5E5E;">=</span> x.view(x.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb24-11">    x <span class="op" style="color: #5E5E5E;">=</span> F.relu(<span class="va" style="color: #111111;">self</span>.lin1(x))</span>
<span id="cb24-12">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.lin2(x)</span>
<span id="cb24-13">    <span class="cf" style="color: #003B4F;">return</span> x</span>
<span id="cb24-14">    </span></code></pre></div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># Generate names from untrained model</span></span>
<span id="cb25-2"></span>
<span id="cb25-3"></span>
<span id="cb25-4">model <span class="op" style="color: #5E5E5E;">=</span> NextChar(block_size, <span class="bu" style="color: null;">len</span>(stoi), emb_dim, <span class="dv" style="color: #AD0000;">50</span>).to(device)</span>
<span id="cb25-5">model <span class="op" style="color: #5E5E5E;">=</span> torch.<span class="bu" style="color: null;">compile</span>(model)</span>
<span id="cb25-6"></span>
<span id="cb25-7">g <span class="op" style="color: #5E5E5E;">=</span> torch.Generator()</span>
<span id="cb25-8">g.manual_seed(<span class="dv" style="color: #AD0000;">4000002</span>)</span>
<span id="cb25-9"><span class="kw" style="color: #003B4F;">def</span> generate_name(model, itos, stoi, block_size, max_len<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb25-10">    context <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> block_size</span>
<span id="cb25-11">    name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">''</span></span>
<span id="cb25-12">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(max_len):</span>
<span id="cb25-13">        x <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(context).view(<span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).to(device)</span>
<span id="cb25-14">        y_pred <span class="op" style="color: #5E5E5E;">=</span> model(x)</span>
<span id="cb25-15">        ix <span class="op" style="color: #5E5E5E;">=</span> torch.distributions.categorical.Categorical(logits<span class="op" style="color: #5E5E5E;">=</span>y_pred).sample().item()</span>
<span id="cb25-16">        ch <span class="op" style="color: #5E5E5E;">=</span> itos[ix]</span>
<span id="cb25-17">        <span class="cf" style="color: #003B4F;">if</span> ch <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'.'</span>:</span>
<span id="cb25-18">            <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb25-19">        name <span class="op" style="color: #5E5E5E;">+=</span> ch</span>
<span id="cb25-20">        context <span class="op" style="color: #5E5E5E;">=</span> context[<span class="dv" style="color: #AD0000;">1</span>:] <span class="op" style="color: #5E5E5E;">+</span> [ix]</span>
<span id="cb25-21">    <span class="cf" style="color: #003B4F;">return</span> name</span>
<span id="cb25-22"></span>
<span id="cb25-23"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb25-24">    <span class="bu" style="color: null;">print</span>(generate_name(model, itos, stoi, block_size))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/nipun.batra/miniforge3/lib/python3.9/site-packages/torch/_inductor/compile_fx.py:90: UserWarning: TensorFloat32 tensor cores for float32 matrix multiplication available but not enabled. Consider setting `torch.set_float32_matmul_precision('high')` for better performance.
  warnings.warn(</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>ihjzyewjrp
puijjpnwfk
gcvvflic
eeokqgmlse
yiaghsikiv
smmggfnsot
ptdmdlmwfi
yitpyixshw
gjqapafodl
dfuhgoowtb</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="cf" style="color: #003B4F;">for</span> param_name, param <span class="kw" style="color: #003B4F;">in</span> model.named_parameters():</span>
<span id="cb28-2">    <span class="bu" style="color: null;">print</span>(param_name, param.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>emb.weight torch.Size([27, 2])
lin1.weight torch.Size([50, 8])
lin1.bias torch.Size([50])
lin2.weight torch.Size([27, 50])
lin2.bias torch.Size([27])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># Train the model</span></span>
<span id="cb30-2"></span>
<span id="cb30-3">loss_fn <span class="op" style="color: #5E5E5E;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb30-4">opt <span class="op" style="color: #5E5E5E;">=</span> torch.optim.AdamW(model.parameters(), lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>)</span>
<span id="cb30-5"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;"># Mini-batch training</span></span>
<span id="cb30-7">batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4096</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">32</span></span>
<span id="cb30-8">print_every <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">400</span></span>
<span id="cb30-9">elapsed_time <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb30-10"><span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10000</span>):</span>
<span id="cb30-11">    start_time <span class="op" style="color: #5E5E5E;">=</span> time.time()</span>
<span id="cb30-12">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, X.shape[<span class="dv" style="color: #AD0000;">0</span>], batch_size):</span>
<span id="cb30-13">        x <span class="op" style="color: #5E5E5E;">=</span> X[i:i<span class="op" style="color: #5E5E5E;">+</span>batch_size]</span>
<span id="cb30-14">        y <span class="op" style="color: #5E5E5E;">=</span> Y[i:i<span class="op" style="color: #5E5E5E;">+</span>batch_size]</span>
<span id="cb30-15">        y_pred <span class="op" style="color: #5E5E5E;">=</span> model(x)</span>
<span id="cb30-16">        loss <span class="op" style="color: #5E5E5E;">=</span> loss_fn(y_pred, y)</span>
<span id="cb30-17">        loss.backward()</span>
<span id="cb30-18">        opt.step()</span>
<span id="cb30-19">        opt.zero_grad()</span>
<span id="cb30-20">    end_time <span class="op" style="color: #5E5E5E;">=</span> time.time()</span>
<span id="cb30-21">    elapsed_time.append(end_time <span class="op" style="color: #5E5E5E;">-</span> start_time)</span>
<span id="cb30-22">    <span class="cf" style="color: #003B4F;">if</span> epoch <span class="op" style="color: #5E5E5E;">%</span> print_every <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb30-23">        <span class="bu" style="color: null;">print</span>(epoch, loss.item())</span>
<span id="cb30-24">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Time taken for 1 epochs: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> seconds"</span>.<span class="bu" style="color: null;">format</span>(<span class="bu" style="color: null;">sum</span>(elapsed_time)<span class="op" style="color: #5E5E5E;">/</span>print_every))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 2.0890238285064697
Time taken for 1 epochs: 6.577968597412109e-06 seconds
400 2.0890519618988037
Time taken for 1 epochs: 0.0018871128559112549 seconds
800 2.088754177093506
Time taken for 1 epochs: 0.0037400954961776733 seconds
1200 2.0887293815612793
Time taken for 1 epochs: 0.005593389868736267 seconds
1600 2.0884861946105957
Time taken for 1 epochs: 0.007446771860122681 seconds
2000 2.0891528129577637
Time taken for 1 epochs: 0.009300289154052734 seconds
2400 2.0879929065704346
Time taken for 1 epochs: 0.011153245568275452 seconds
2800 2.088449239730835
Time taken for 1 epochs: 0.013006348609924317 seconds
3200 2.0879693031311035
Time taken for 1 epochs: 0.014860434532165527 seconds
3600 2.0881006717681885
Time taken for 1 epochs: 0.016712880134582518 seconds
4000 2.087575912475586
Time taken for 1 epochs: 0.01856597661972046 seconds
4400 2.087235689163208
Time taken for 1 epochs: 0.020418978929519653 seconds
4800 2.087622880935669
Time taken for 1 epochs: 0.02227234423160553 seconds
5200 2.087576150894165
Time taken for 1 epochs: 0.02412549138069153 seconds
5600 2.0879015922546387
Time taken for 1 epochs: 0.025978831052780153 seconds
6000 2.088137626647949
Time taken for 1 epochs: 0.027831865549087523 seconds
6400 2.0875606536865234
Time taken for 1 epochs: 0.029685078263282774 seconds
6800 2.0870373249053955
Time taken for 1 epochs: 0.031538299322128295 seconds
7200 2.0867090225219727
Time taken for 1 epochs: 0.033391504883766174 seconds
7600 2.085026979446411
Time taken for 1 epochs: 0.035245080590248105 seconds
8000 2.0854732990264893
Time taken for 1 epochs: 0.03710031807422638 seconds
8400 2.0843679904937744
Time taken for 1 epochs: 0.03895375490188599 seconds
8800 2.084249258041382
Time taken for 1 epochs: 0.04080682039260864 seconds
9200 2.0851705074310303
Time taken for 1 epochs: 0.042660011649131774 seconds
9600 2.0844883918762207
Time taken for 1 epochs: 0.044512977004051206 seconds</code></pre>
</div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;"># Visualize the embedding</span></span>
<span id="cb32-2"></span>
<span id="cb32-3">plot_emb(model.emb, itos)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>&lt;AxesSubplot:&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/names_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;"># Generate names from trained model</span></span>
<span id="cb34-2"></span>
<span id="cb34-3"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb34-4">    <span class="bu" style="color: null;">print</span>(generate_name(model, itos, stoi, block_size))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>swina
miter
jakul
poshaban
nahmishsir
jaillanam
fibwahir
gurs
sakinu
ramta</code></pre>
</div>
</div>
<p>Tuning knobs</p>
<ol type="1">
<li>Embedding size</li>
<li>MLP</li>
<li>Context length</li>
</ol>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/names.html</guid>
  <pubDate>Fri, 31 Mar 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>AutoDiff in JAX and PyTorch</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/autodiff-jax-torch.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> jax.numpy <span class="im" style="color: #00769E;">as</span> jnp</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> jax</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-5"><span class="bu" style="color: null;">print</span>(torch.__version__)</span>
<span id="cb1-6"><span class="bu" style="color: null;">print</span>(jax.__version__)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>Array(1., dtype=float32, weak_type=True)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">def</span> f(x):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;">return</span> jnp.sin(x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>Array(1., dtype=float32, weak_type=True)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">z <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">0.0</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-2">torch.sin(z).backward()</span>
<span id="cb5-3"><span class="bu" style="color: null;">print</span>(jax.grad(f)(<span class="fl" style="color: #AD0000;">0.0</span>), z.grad)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>tensor(1.)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">def</span> f(x):</span>
<span id="cb7-2">    <span class="cf" style="color: #003B4F;">return</span> jnp.<span class="bu" style="color: null;">abs</span>(x)</span>
<span id="cb7-3"></span>
<span id="cb7-4"></span>
<span id="cb7-5">z1 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">0.0001</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb7-6">torch.<span class="bu" style="color: null;">abs</span>(z1).backward()</span>
<span id="cb7-7"></span>
<span id="cb7-8">z2 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.0001</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb7-9">torch.<span class="bu" style="color: null;">abs</span>(z2).backward()</span>
<span id="cb7-10"></span>
<span id="cb7-11">z3 <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;">0.0</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb7-12">torch.<span class="bu" style="color: null;">abs</span>(z3).backward()</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="bu" style="color: null;">print</span>(jax.grad(f)(<span class="fl" style="color: #AD0000;">0.0</span>), z1.grad, z2.grad, z3.grad)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.0 tensor(1.) tensor(-1.) tensor(0.)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Use functorch</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="im" style="color: #00769E;">import</span> functorch</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>ImportError: dlopen(/Users/nipun/miniconda3/lib/python3.9/site-packages/functorch/_C.cpython-39-darwin.so, 0x0002): Symbol not found: __ZN2at4_ops10as_strided4callERKNS_6TensorEN3c108ArrayRefINS5_6SymIntEEES8_NS5_8optionalIS7_EE
  Referenced from: &lt;12715304-4308-3E9B-A374-E4ADB3345E65&gt; /Users/nipun/miniconda3/lib/python3.9/site-packages/functorch/_C.cpython-39-darwin.so
  Expected in:     &lt;22ECBAD5-EEDD-3C80-9B5A-0564B60B6811&gt; /Users/nipun/miniconda3/lib/python3.9/site-packages/torch/lib/libtorch_cpu.dylib</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>'1.12.1'</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/autodiff-jax-torch.html</guid>
  <pubDate>Wed, 01 Mar 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Logistic Regression</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/logistic.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Create linearly separable data in 2d</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> sklearn.datasets <span class="im" style="color: #00769E;">import</span> make_classification</span>
<span id="cb1-7"></span>
<span id="cb1-8">X, y <span class="op" style="color: #5E5E5E;">=</span> make_classification(n_samples<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, n_features<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, n_redundant<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, n_informative<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb1-9">                            n_clusters_per_class<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, class_sep<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.5</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11">plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span>y, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>&lt;matplotlib.collections.PathCollection at 0x12b5ed280&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/logistic_files/figure-html/cell-2-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="92">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;">import</span> LogisticRegression</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># Without regularization</span></span>
<span id="cb3-4">clf <span class="op" style="color: #5E5E5E;">=</span> LogisticRegression(random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, penalty<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'none'</span>).fit(X, y)</span>
<span id="cb3-5">clf.coef_, clf.intercept_</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="92">
<pre><code>(array([[26.23339925, -5.01002931]]), array([1.74951957]))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Create a surface plot of the decision boundary for any theta_0, theta_1, theta_2</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;">def</span> plot_decision_boundary(theta_0, theta_1, theta_2):</span>
<span id="cb5-4">    x_lin <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb5-5">    y_lin <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span>(theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> x_lin) <span class="op" style="color: #5E5E5E;">/</span> theta_2</span>
<span id="cb5-6">    plt.plot(x_lin, y_lin, <span class="st" style="color: #20794D;">'k--'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Decision boundary ($\sigma(z) = 0.5$))'</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb5-7">    plt.xlim(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb5-8">    plt.ylim(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb5-9">    plt.xlabel(<span class="vs" style="color: #20794D;">r'$x_1$'</span>)</span>
<span id="cb5-10">    plt.ylabel(<span class="vs" style="color: #20794D;">r'$x_2$'</span>)</span>
<span id="cb5-11">    plt.title(<span class="vs" style="color: #20794D;">r'$\theta_0 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">, \theta_1 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">, \theta_2 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">$'</span>.<span class="bu" style="color: null;">format</span>(theta_0, theta_1, theta_2))</span>
<span id="cb5-12"></span>
<span id="cb5-13">    <span class="co" style="color: #5E5E5E;"># Plot the probability of class 1 contour</span></span>
<span id="cb5-14">    x1, x2 <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>), np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>))</span>
<span id="cb5-15">    z <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> np.exp(<span class="op" style="color: #5E5E5E;">-</span>(theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> x1 <span class="op" style="color: #5E5E5E;">+</span> theta_2 <span class="op" style="color: #5E5E5E;">*</span> x2)))</span>
<span id="cb5-16">    plt.contourf(x1, x2, z, linestyles<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dashed'</span>)</span>
<span id="cb5-17">    plt.colorbar()</span>
<span id="cb5-18"></span>
<span id="cb5-19">    <span class="co" style="color: #5E5E5E;"># Plot the data</span></span>
<span id="cb5-20">    plt.scatter(X[:, <span class="dv" style="color: #AD0000;">0</span>], X[:, <span class="dv" style="color: #AD0000;">1</span>], marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span>y, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb5-21">    plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'best'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="93">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Create a slider widget to explore the decision boundary</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="im" style="color: #00769E;">from</span> ipywidgets <span class="im" style="color: #00769E;">import</span> interact, FloatSlider</span>
<span id="cb6-4"></span>
<span id="cb6-5">interact(plot_decision_boundary,</span>
<span id="cb6-6">            theta_0<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb6-7">            theta_1<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">40</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb6-8">            theta_2<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>))</span>
<span id="cb6-9"></span>
<span id="cb6-10"></span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"445ee1832c2c480cab355ed288df639a","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="93">
<pre><code>&lt;function __main__.plot_decision_boundary(theta_0, theta_1, theta_2)&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="99">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Create a 3d plot of the decision boundary for any theta_0, theta_1, theta_2</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="im" style="color: #00769E;">from</span> mpl_toolkits.mplot3d <span class="im" style="color: #00769E;">import</span> Axes3D</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;">def</span> plot_decision_boundary_3d(theta_0, theta_1, theta_2, azim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>, elev<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>):</span>
<span id="cb8-6">    fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb8-7">    ax <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">111</span>, projection<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'3d'</span>)</span>
<span id="cb8-8">    x_lin <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb8-9">    y_lin <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb8-10">    X_g, Y_g <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(x_lin, y_lin)</span>
<span id="cb8-11">    Z_g <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span>(theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> X_g <span class="op" style="color: #5E5E5E;">+</span> theta_2 <span class="op" style="color: #5E5E5E;">*</span> Y_g)</span>
<span id="cb8-12">    <span class="co" style="color: #5E5E5E;">#ax.plot_surface(X_g, Y_g, Z_g, alpha=0.2)</span></span>
<span id="cb8-13">    ax.set_xlabel(<span class="vs" style="color: #20794D;">r'$x_1$'</span>)</span>
<span id="cb8-14">    ax.set_ylabel(<span class="vs" style="color: #20794D;">r'$x_2$'</span>)</span>
<span id="cb8-15">    ax.set_zlabel(<span class="vs" style="color: #20794D;">r'$x_3$'</span>)</span>
<span id="cb8-16">    ax.set_title(<span class="vs" style="color: #20794D;">r'$\theta_0 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">, \theta_1 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">, \theta_2 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">$'</span>.<span class="bu" style="color: null;">format</span>(theta_0, theta_1, theta_2))</span>
<span id="cb8-17">    </span>
<span id="cb8-18">    <span class="co" style="color: #5E5E5E;"># Scatter plot of data (class 1 is Z = 1, class 0 is Z = 0)</span></span>
<span id="cb8-19">    ax.scatter(X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>], X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">1</span>, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'b'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb8-20">    ax.scatter(X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">0</span>, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb8-21"></span>
<span id="cb8-22">    <span class="co" style="color: #5E5E5E;"># Plot the 3d sigmoid function</span></span>
<span id="cb8-23">    x1, x2 <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>), np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>))</span>
<span id="cb8-24">    z <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> np.exp(<span class="op" style="color: #5E5E5E;">-</span>(theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> x1 <span class="op" style="color: #5E5E5E;">+</span> theta_2 <span class="op" style="color: #5E5E5E;">*</span> x2)))</span>
<span id="cb8-25">    ax.plot_surface(x1, x2, z, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'green'</span>)</span>
<span id="cb8-26">    </span>
<span id="cb8-27">    <span class="co" style="color: #5E5E5E;"># Rotate the plot so that the sigmoid function is visible</span></span>
<span id="cb8-28">    ax.view_init(azim, elev)</span>
<span id="cb8-29"></span>
<span id="cb8-30">    <span class="co" style="color: #5E5E5E;"># Plot the decision plane</span></span>
<span id="cb8-31">    ax.plot_surface(X_g, Y_g, Z_g, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb8-32"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="100">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Create a slider widget to explore the decision boundary</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="im" style="color: #00769E;">from</span> ipywidgets <span class="im" style="color: #00769E;">import</span> interact, FloatSlider</span>
<span id="cb9-4"></span>
<span id="cb9-5">interact(plot_decision_boundary_3d,</span>
<span id="cb9-6">            theta_0<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb9-7">            theta_1<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">40</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb9-8">            theta_2<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb9-9">            azim<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">180</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">180</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>),</span>
<span id="cb9-10">            elev<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">180</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">180</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>))</span>
<span id="cb9-11"></span>
<span id="cb9-12"></span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1337be77d0ab4a688da0b38dcd764071","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="100">
<pre><code>&lt;function __main__.plot_decision_boundary_3d(theta_0, theta_1, theta_2, azim=30, elev=30)&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="104">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Create two 3d plot any theta_0, theta_1, theta_2</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;"># First showing the decision boundary</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;"># Second showing the probability of class 1</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="im" style="color: #00769E;">from</span> mpl_toolkits.mplot3d <span class="im" style="color: #00769E;">import</span> Axes3D</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="kw" style="color: #003B4F;">def</span> plot_decision_boundary_3d(theta_0, theta_1, theta_2, azim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>, elev<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>):</span>
<span id="cb11-8">    fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb11-9">    ax1 <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">121</span>, projection<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'3d'</span>)</span>
<span id="cb11-10">    ax2 <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">122</span>, projection<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'3d'</span>)</span>
<span id="cb11-11"></span>
<span id="cb11-12">    x_lin <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb11-13">    y_lin <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb11-14">    X_g, Y_g <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(x_lin, y_lin)</span>
<span id="cb11-15">    Z_g <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span>(theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> X_g <span class="op" style="color: #5E5E5E;">+</span> theta_2 <span class="op" style="color: #5E5E5E;">*</span> Y_g)</span>
<span id="cb11-16">    <span class="co" style="color: #5E5E5E;">#ax.plot_surface(X_g, Y_g, Z_g, alpha=0.2)</span></span>
<span id="cb11-17">    ax1.set_xlabel(<span class="vs" style="color: #20794D;">r'$x_1$'</span>)</span>
<span id="cb11-18">    ax1.set_ylabel(<span class="vs" style="color: #20794D;">r'$x_2$'</span>)</span>
<span id="cb11-19">    ax1.set_zlabel(<span class="vs" style="color: #20794D;">r'$x_3$'</span>)</span>
<span id="cb11-20">    ax1.set_title(<span class="vs" style="color: #20794D;">r'$\theta_0 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">, \theta_1 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">, \theta_2 = </span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="vs" style="color: #20794D;">$'</span>.<span class="bu" style="color: null;">format</span>(theta_0, theta_1, theta_2))</span>
<span id="cb11-21"></span>
<span id="cb11-22">    <span class="co" style="color: #5E5E5E;"># Scatter plot of data (class 1 is Z = 1, class 0 is Z = 0)</span></span>
<span id="cb11-23">    ax1.scatter(X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>], X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">1</span>, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'b'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb11-24">    ax1.scatter(X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">0</span>, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb11-25"></span>
<span id="cb11-26">    <span class="co" style="color: #5E5E5E;"># Plot the 3d sigmoid function</span></span>
<span id="cb11-27">    x1, x2 <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>), np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>))</span>
<span id="cb11-28">    z <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> np.exp(<span class="op" style="color: #5E5E5E;">-</span>(theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> x1 <span class="op" style="color: #5E5E5E;">+</span> theta_2 <span class="op" style="color: #5E5E5E;">*</span> x2)))</span>
<span id="cb11-29"></span>
<span id="cb11-30">    <span class="co" style="color: #5E5E5E;"># Plot the decision plane</span></span>
<span id="cb11-31">    ax1.plot_surface(X_g, Y_g, Z_g, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb11-32"></span>
<span id="cb11-33">    <span class="co" style="color: #5E5E5E;"># Plot the probability of class 1</span></span>
<span id="cb11-34">    ax2.plot_surface(x1, x2, z, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span>)</span>
<span id="cb11-35">    ax2.scatter(X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>], X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">1</span>, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'b'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb11-36">    ax2.scatter(X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], X[y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">0</span>, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o'</span>, c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb11-37"></span>
<span id="cb11-38"></span>
<span id="cb11-39">     <span class="co" style="color: #5E5E5E;"># Rotate the plot so that the sigmoid function is visible</span></span>
<span id="cb11-40">    ax1.view_init(azim, elev)</span>
<span id="cb11-41">    ax2.view_init(azim, elev)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="105">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Create a slider widget to explore the decision boundary</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="im" style="color: #00769E;">from</span> ipywidgets <span class="im" style="color: #00769E;">import</span> interact, FloatSlider</span>
<span id="cb12-4"></span>
<span id="cb12-5">interact(plot_decision_boundary_3d,</span>
<span id="cb12-6">            theta_0<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb12-7">            theta_1<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">40</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb12-8">            theta_2<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>),</span>
<span id="cb12-9">            azim<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">180</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">180</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>),</span>
<span id="cb12-10">            elev<span class="op" style="color: #5E5E5E;">=</span>FloatSlider(<span class="bu" style="color: null;">min</span><span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">180</span>, <span class="bu" style="color: null;">max</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">180</span>, step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>))</span>
<span id="cb12-11"></span>
<span id="cb12-12"></span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"28debcc48c7d4b7b8e635ae3bb8d740f","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="105">
<pre><code>&lt;function __main__.plot_decision_boundary_3d(theta_0, theta_1, theta_2, azim=30, elev=30)&gt;</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/logistic.html</guid>
  <pubDate>Tue, 28 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Neural Network</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/nn.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> torch.nn <span class="im" style="color: #00769E;">as</span> nn</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> torch.optim <span class="im" style="color: #00769E;">as</span> optim</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> torch.utils.data <span class="im" style="color: #00769E;">import</span> DataLoader, TensorDataset</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;"># Set random seed for reproducibility</span></span>
<span id="cb1-15">torch.manual_seed(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># Torch version</span></span>
<span id="cb1-18">torch.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>'2.0.0+cu118'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># MNIST dataset</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="im" style="color: #00769E;">from</span> torchvision <span class="im" style="color: #00769E;">import</span> datasets, transforms</span>
<span id="cb3-4"><span class="im" style="color: #00769E;">import</span> torchvision</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># Split MNIST into train, validation, and test sets</span></span>
<span id="cb3-7">train_data <span class="op" style="color: #5E5E5E;">=</span> datasets.MNIST(root<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'data'</span>, train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, download<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, transform<span class="op" style="color: #5E5E5E;">=</span>transforms.ToTensor())</span>
<span id="cb3-8">test_data <span class="op" style="color: #5E5E5E;">=</span> datasets.MNIST(root<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'data'</span>, train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, download<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, transform<span class="op" style="color: #5E5E5E;">=</span>transforms.ToTensor())</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;"># Split train_data into train and validation sets</span></span>
<span id="cb3-11">val_data <span class="op" style="color: #5E5E5E;">=</span> torch.utils.data.Subset(train_data, <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">50000</span>, <span class="dv" style="color: #AD0000;">51000</span>))</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;"># Reduce the size of the training set to 5,000</span></span>
<span id="cb3-14">train_data <span class="op" style="color: #5E5E5E;">=</span> torch.utils.data.Subset(train_data, <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">5000</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Create data loaders</span></span>
<span id="cb4-2">batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">64</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">train_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(train_data, batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb4-5">val_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(val_data, batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb4-6">test_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(test_data, batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">img, target <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(train_loader))</span>
<span id="cb5-2"><span class="bu" style="color: null;">print</span>(img.shape)</span>
<span id="cb5-3"><span class="bu" style="color: null;">print</span>(target.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([64, 1, 28, 28])
torch.Size([64])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">plt.imshow(img[<span class="dv" style="color: #AD0000;">0</span>].numpy().squeeze(), cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray_r'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/nn_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">target</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>tensor([3, 4, 1, 8, 9, 3, 9, 8, 4, 8, 3, 0, 0, 7, 7, 1, 6, 6, 9, 7, 4, 3, 3, 4,
        5, 7, 3, 2, 8, 4, 8, 2, 8, 3, 1, 4, 2, 1, 4, 8, 5, 3, 5, 1, 8, 7, 3, 7,
        7, 2, 0, 3, 1, 3, 7, 0, 7, 1, 7, 6, 4, 1, 8, 0])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Store the labels and Images in TensorBoard</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="im" style="color: #00769E;">from</span> torch.utils.tensorboard <span class="im" style="color: #00769E;">import</span> SummaryWriter</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;"># Clean up any old runs</span></span>
<span id="cb10-6"><span class="op" style="color: #5E5E5E;">!</span>rm <span class="op" style="color: #5E5E5E;">-</span>rf runs</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;"># Default `log_dir` is "runs"</span></span>
<span id="cb10-9">writer <span class="op" style="color: #5E5E5E;">=</span> SummaryWriter(<span class="st" style="color: #20794D;">'runs/mnist'</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;"># Add images to tensorboard in the form of a grid in batches of 64</span></span>
<span id="cb10-12">dataiter <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">iter</span>(DataLoader(train_data, batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;"># Add a slider in tensorboard to iterate through the batches</span></span>
<span id="cb10-15"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb10-16">    images, labels <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(dataiter)</span>
<span id="cb10-17">    images <span class="op" style="color: #5E5E5E;">=</span> torchvision.utils.make_grid(images)</span>
<span id="cb10-18">    <span class="co" style="color: #5E5E5E;"># Add images with labels to tensorboard</span></span>
<span id="cb10-19">    writer.add_image(<span class="ss" style="color: #20794D;">f'mnist_images_</span><span class="sc" style="color: #5E5E5E;">{</span>i<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>, images, global_step<span class="op" style="color: #5E5E5E;">=</span>i)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Define model for 10-class MNIST classification</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;">class</span> MNISTClassifier(nn.Module):</span>
<span id="cb11-4">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb11-5">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb11-6">        <span class="va" style="color: #111111;">self</span>.fc1 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">784</span>, <span class="dv" style="color: #AD0000;">64</span>)</span>
<span id="cb11-7">        <span class="va" style="color: #111111;">self</span>.fc2 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">64</span>, <span class="dv" style="color: #AD0000;">32</span>)</span>
<span id="cb11-8">        <span class="va" style="color: #111111;">self</span>.fc3 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb11-9">        </span>
<span id="cb11-10">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb11-11">        z1 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fc1(x)</span>
<span id="cb11-12">        a1 <span class="op" style="color: #5E5E5E;">=</span> F.relu(z1)</span>
<span id="cb11-13">        z2 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fc2(a1)</span>
<span id="cb11-14">        a2 <span class="op" style="color: #5E5E5E;">=</span> F.relu(z2)</span>
<span id="cb11-15">        z3 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fc3(a2) <span class="co" style="color: #5E5E5E;"># logits</span></span>
<span id="cb11-16">        <span class="cf" style="color: #003B4F;">return</span> z3</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">model <span class="op" style="color: #5E5E5E;">=</span> MNISTClassifier()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># Forward pass through the model</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"></span>
<span id="cb13-4"></span>
<span id="cb13-5">saved_img, saved_target <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(train_loader))</span>
<span id="cb13-6">saved_img <span class="op" style="color: #5E5E5E;">=</span> saved_img.view(saved_img.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb13-7"><span class="bu" style="color: null;">print</span>(saved_img.shape)</span>
<span id="cb13-8"></span>
<span id="cb13-9">plt.imshow(saved_img[<span class="dv" style="color: #AD0000;">0</span>].reshape(<span class="dv" style="color: #AD0000;">28</span>, <span class="dv" style="color: #AD0000;">28</span>), cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray_r'</span>)</span>
<span id="cb13-10">plt.title(saved_target[<span class="dv" style="color: #AD0000;">0</span>].item())</span>
<span id="cb13-11"></span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb13-14">    out <span class="op" style="color: #5E5E5E;">=</span> model(saved_img.view(saved_img.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb13-15"></span>
<span id="cb13-16"></span>
<span id="cb13-17"></span>
<span id="cb13-18"><span class="bu" style="color: null;">print</span>(out[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb13-19"></span>
<span id="cb13-20"><span class="co" style="color: #5E5E5E;"># Softmax</span></span>
<span id="cb13-21">probas <span class="op" style="color: #5E5E5E;">=</span> F.softmax(out, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb13-22"><span class="bu" style="color: null;">print</span>(probas[<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([64, 784])
tensor([-0.1859, -0.1648,  0.0156,  0.0309,  0.1785, -0.1567, -0.0472,  0.1143,
        -0.0400, -0.0006])
tensor([0.0846, 0.0864, 0.1035, 0.1051, 0.1218, 0.0871, 0.0972, 0.1143, 0.0979,
        0.1019])</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/nn_files/figure-html/cell-11-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">probas[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>tensor([[0.0846, 0.0864, 0.1035, 0.1051, 0.1218, 0.0871, 0.0972, 0.1143, 0.0979,
         0.1019]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Predicted label before training</span></span>
<span id="cb17-2"></span>
<span id="cb17-3">pred <span class="op" style="color: #5E5E5E;">=</span> torch.argmax(probas[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">1</span>], dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).item()</span>
<span id="cb17-4"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Prediction:  </span><span class="sc" style="color: #5E5E5E;">{</span>pred<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, True label: </span><span class="sc" style="color: #5E5E5E;">{</span>saved_target[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">.</span>item()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Prediction:  4, True label: 2</code></pre>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">model.fc1.weight.shape, model.fc1.bias.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>(torch.Size([64, 784]), torch.Size([64]))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Number of parameters in fc1</span></span>
<span id="cb21-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"fc1"</span>, model.fc1.weight.numel() <span class="op" style="color: #5E5E5E;">+</span> model.fc1.bias.numel())</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;"># Number of parameters in fc2</span></span>
<span id="cb21-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"fc2"</span>, model.fc2.weight.numel() <span class="op" style="color: #5E5E5E;">+</span> model.fc2.bias.numel())</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;"># Number of parameters in fc3</span></span>
<span id="cb21-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"fc3"</span>, model.fc3.weight.numel() <span class="op" style="color: #5E5E5E;">+</span> model.fc3.bias.numel())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>fc1 50240
fc2 2080
fc3 330</code></pre>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># Get total number of parameters</span></span>
<span id="cb23-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Total number of parameters:"</span>, <span class="bu" style="color: null;">sum</span>(p.numel() <span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> model.parameters()))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Total number of parameters: 52650</code></pre>
</div>
</div>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="bu" style="color: null;">len</span>(train_loader)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>79</code></pre>
</div>
</div>
<div class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Forward pass through the model and writing to tensorboard</span></span>
<span id="cb27-2"></span>
<span id="cb27-3">lr <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.001</span></span>
<span id="cb27-4">optimizer <span class="op" style="color: #5E5E5E;">=</span> optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;">=</span>lr)</span>
<span id="cb27-5">criterion <span class="op" style="color: #5E5E5E;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb27-6"></span>
<span id="cb27-7">num_epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb27-8"><span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(num_epochs):</span>
<span id="cb27-9">    <span class="cf" style="color: #003B4F;">for</span> batch_idx, (data_test, target) <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(train_loader):</span>
<span id="cb27-10">        <span class="co" style="color: #5E5E5E;"># Reshape data to input to the network</span></span>
<span id="cb27-11">        data_test <span class="op" style="color: #5E5E5E;">=</span> data_test.view(data_test.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb27-12">        <span class="co" style="color: #5E5E5E;"># Forward pass</span></span>
<span id="cb27-13">        output <span class="op" style="color: #5E5E5E;">=</span> model(data_test)</span>
<span id="cb27-14">        loss <span class="op" style="color: #5E5E5E;">=</span> criterion(output, target)</span>
<span id="cb27-15">        <span class="co" style="color: #5E5E5E;"># Backward and optimize</span></span>
<span id="cb27-16">        optimizer.zero_grad()</span>
<span id="cb27-17">        loss.backward()</span>
<span id="cb27-18">        optimizer.step()</span>
<span id="cb27-19"></span>
<span id="cb27-20">        iteration_num <span class="op" style="color: #5E5E5E;">=</span> epoch <span class="op" style="color: #5E5E5E;">*</span> <span class="bu" style="color: null;">len</span>(train_loader) <span class="op" style="color: #5E5E5E;">+</span> batch_idx</span>
<span id="cb27-21">        </span>
<span id="cb27-22">        <span class="co" style="color: #5E5E5E;"># Write to tensorboard</span></span>
<span id="cb27-23">        writer.add_scalar(<span class="st" style="color: #20794D;">'Loss/train'</span>, loss.item(), iteration_num)</span>
<span id="cb27-24">        writer.add_scalar(<span class="st" style="color: #20794D;">'Accuracy/train'</span>, (output.argmax(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">==</span> target).<span class="bu" style="color: null;">float</span>().mean(), iteration_num)</span>
<span id="cb27-25"></span>
<span id="cb27-26">        <span class="co" style="color: #5E5E5E;"># Find test loss and accuracy</span></span>
<span id="cb27-27">        runing_loss <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb27-28">        running_acc <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb27-29">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb27-30">            <span class="cf" style="color: #003B4F;">for</span> data_test, target_test <span class="kw" style="color: #003B4F;">in</span> val_loader:</span>
<span id="cb27-31">                data_test <span class="op" style="color: #5E5E5E;">=</span> data_test.view(data_test.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb27-32">                output_test <span class="op" style="color: #5E5E5E;">=</span> model(data_test)</span>
<span id="cb27-33">                loss_test <span class="op" style="color: #5E5E5E;">=</span> criterion(output_test, target_test)</span>
<span id="cb27-34">                runing_loss <span class="op" style="color: #5E5E5E;">+=</span> loss_test.item()</span>
<span id="cb27-35">                running_acc <span class="op" style="color: #5E5E5E;">+=</span> (output_test.argmax(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">==</span> target_test).<span class="bu" style="color: null;">float</span>().mean()</span>
<span id="cb27-36">        writer.add_scalar(<span class="st" style="color: #20794D;">'Loss/validation'</span>, runing_loss <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(val_loader), iteration_num)</span>
<span id="cb27-37">        writer.add_scalar(<span class="st" style="color: #20794D;">'Accuracy/validation'</span>, running_acc <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(val_loader), iteration_num)</span>
<span id="cb27-38"></span>
<span id="cb27-39">        <span class="cf" style="color: #003B4F;">if</span> batch_idx <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb27-40">            <span class="bu" style="color: null;">print</span> (<span class="ss" style="color: #20794D;">f'Epoch [</span><span class="sc" style="color: #5E5E5E;">{</span>epoch<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">], Step [</span><span class="sc" style="color: #5E5E5E;">{</span>batch_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(train_loader)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">], Loss: </span><span class="sc" style="color: #5E5E5E;">{</span>loss<span class="sc" style="color: #5E5E5E;">.</span>item()<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/1], Step [0/79], Loss: 2.3027</code></pre>
</div>
</div>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Prediction on the saved image</span></span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb29-4">    out <span class="op" style="color: #5E5E5E;">=</span> model(saved_img[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb29-5">    probas <span class="op" style="color: #5E5E5E;">=</span> F.softmax(out, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb29-6">    pred <span class="op" style="color: #5E5E5E;">=</span> torch.argmax(probas, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).item()</span>
<span id="cb29-7">    <span class="bu" style="color: null;">print</span>(pred, saved_target[<span class="dv" style="color: #AD0000;">0</span>].item())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 1</code></pre>
</div>
</div>
<div class="cell" data-execution_count="98">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Create a HParam dictionary for batch size and learning rate for tensorboard</span></span>
<span id="cb31-2"></span>
<span id="cb31-3">b_sizes <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">64</span>, <span class="dv" style="color: #AD0000;">512</span>]</span>
<span id="cb31-4">lrs <span class="op" style="color: #5E5E5E;">=</span> [<span class="fl" style="color: #AD0000;">0.001</span>, <span class="fl" style="color: #AD0000;">0.01</span>, <span class="fl" style="color: #AD0000;">0.1</span>]</span>
<span id="cb31-5"></span>
<span id="cb31-6"></span>
<span id="cb31-7">num_epochs  <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb31-8"><span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(num_epochs):</span>
<span id="cb31-9">    <span class="cf" style="color: #003B4F;">for</span> b_size <span class="kw" style="color: #003B4F;">in</span> b_sizes:</span>
<span id="cb31-10">        train_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(train_data, batch_size<span class="op" style="color: #5E5E5E;">=</span>b_size, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb31-11">        model <span class="op" style="color: #5E5E5E;">=</span> MNISTClassifier()</span>
<span id="cb31-12">        <span class="cf" style="color: #003B4F;">for</span> lr <span class="kw" style="color: #003B4F;">in</span> lrs:</span>
<span id="cb31-13">            <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Batch size: </span><span class="sc" style="color: #5E5E5E;">{</span>b_size<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, Learning rate: </span><span class="sc" style="color: #5E5E5E;">{</span>lr<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb31-14">            optimizer <span class="op" style="color: #5E5E5E;">=</span> optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;">=</span>lr)</span>
<span id="cb31-15">            criterion <span class="op" style="color: #5E5E5E;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb31-16">            <span class="cf" style="color: #003B4F;">for</span> batch_idx, (data, target) <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(train_loader):</span>
<span id="cb31-17">                <span class="co" style="color: #5E5E5E;"># Reshape data to input to the network</span></span>
<span id="cb31-18">                data <span class="op" style="color: #5E5E5E;">=</span> data.view(data.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb31-19">                <span class="co" style="color: #5E5E5E;"># Forward pass</span></span>
<span id="cb31-20">                output <span class="op" style="color: #5E5E5E;">=</span> model(data)</span>
<span id="cb31-21">                loss <span class="op" style="color: #5E5E5E;">=</span> criterion(output, target)</span>
<span id="cb31-22">                <span class="co" style="color: #5E5E5E;"># Backward and optimize</span></span>
<span id="cb31-23">                optimizer.zero_grad()</span>
<span id="cb31-24">                loss.backward()</span>
<span id="cb31-25">                optimizer.step()</span>
<span id="cb31-26">                </span>
<span id="cb31-27"></span>
<span id="cb31-28">                <span class="co" style="color: #5E5E5E;"># Write loss as scalar to Tensorboard and hyperparameters to HParams</span></span>
<span id="cb31-29">                writer.add_scalar(<span class="st" style="color: #20794D;">'training loss'</span>,</span>
<span id="cb31-30">                                loss.item(),</span>
<span id="cb31-31">                                epoch <span class="op" style="color: #5E5E5E;">*</span> <span class="bu" style="color: null;">len</span>(train_loader) <span class="op" style="color: #5E5E5E;">+</span> batch_idx)</span>
<span id="cb31-32">                writer.add_hparams({<span class="st" style="color: #20794D;">'lr'</span>: lr, <span class="st" style="color: #20794D;">'bsize'</span>: b_size},</span>
<span id="cb31-33">                                { <span class="st" style="color: #20794D;">'hparam/loss'</span>: loss.item()})</span>
<span id="cb31-34">                </span>
<span id="cb31-35"></span>
<span id="cb31-36">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Batch size: 32, Learning rate: 0.001
Batch size: 32, Learning rate: 0.01
Batch size: 32, Learning rate: 0.1
Batch size: 64, Learning rate: 0.001
Batch size: 64, Learning rate: 0.01
Batch size: 64, Learning rate: 0.1
Batch size: 512, Learning rate: 0.001
Batch size: 512, Learning rate: 0.01
Batch size: 512, Learning rate: 0.1</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/nn.html</guid>
  <pubDate>Tue, 28 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Gradient Descent</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/gd.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> jax.numpy <span class="im" style="color: #00769E;">as</span> jnp</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> jax <span class="im" style="color: #00769E;">import</span> random, jit, vmap, grad, jacfwd, jacrev, hessian, value_and_grad</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Simple 2D quadratic function</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;">def</span> f(theta_0, theta_1):</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;">return</span> theta_0<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> theta_1<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="222">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Plot surface and contour plots for f using jax.vmap</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;">def</span> create_plot(f):</span>
<span id="cb3-3">    theta_0 <span class="op" style="color: #5E5E5E;">=</span> jnp.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb3-4">    theta_1 <span class="op" style="color: #5E5E5E;">=</span> jnp.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb3-5">    theta_0, theta_1 <span class="op" style="color: #5E5E5E;">=</span> jnp.meshgrid(theta_0, theta_1)</span>
<span id="cb3-6">    f_vmap <span class="op" style="color: #5E5E5E;">=</span> jnp.vectorize(f, signature<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'(),()-&gt;()'</span>)</span>
<span id="cb3-7">    f_vals <span class="op" style="color: #5E5E5E;">=</span> f_vmap(theta_0, theta_1)</span>
<span id="cb3-8"></span>
<span id="cb3-9">    <span class="co" style="color: #5E5E5E;"># Create a figure with 2 subplots (3d surface and 2d contour)</span></span>
<span id="cb3-10">    fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb3-11">    ax1 <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">121</span>, projection<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'3d'</span>)</span>
<span id="cb3-12">    ax2 <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">122</span>)</span>
<span id="cb3-13"></span>
<span id="cb3-14">    <span class="co" style="color: #5E5E5E;"># Plot surface and contour plots</span></span>
<span id="cb3-15">    temp <span class="op" style="color: #5E5E5E;">=</span> ax1.plot_surface(theta_0, theta_1, f_vals, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'viridis'</span>)</span>
<span id="cb3-16"></span>
<span id="cb3-17">    <span class="co" style="color: #5E5E5E;"># Filled contour plot and marked level set values using clabel</span></span>
<span id="cb3-18">    <span class="co" style="color: #5E5E5E;"># Set 20 levels between min and max of f_vals</span></span>
<span id="cb3-19">    levels <span class="op" style="color: #5E5E5E;">=</span> jnp.linspace(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="bu" style="color: null;">int</span>(jnp.<span class="bu" style="color: null;">max</span>(f_vals))<span class="op" style="color: #5E5E5E;">+</span><span class="fl" style="color: #AD0000;">0.5</span>, <span class="dv" style="color: #AD0000;">11</span>)</span>
<span id="cb3-20"></span>
<span id="cb3-21">    contours <span class="op" style="color: #5E5E5E;">=</span> ax2.contour(theta_0, theta_1, f_vals, levels<span class="op" style="color: #5E5E5E;">=</span>levels, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'viridis'</span>)</span>
<span id="cb3-22">    ax2.clabel(contours, inline<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>)</span>
<span id="cb3-23"></span>
<span id="cb3-24">    <span class="co" style="color: #5E5E5E;"># Fill using imshow</span></span>
<span id="cb3-25">    ax2.imshow(f_vals, extent<span class="op" style="color: #5E5E5E;">=</span>[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>], origin<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lower'</span>, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'viridis'</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb3-26">  </span>
<span id="cb3-27">    <span class="co" style="color: #5E5E5E;"># Find the global minimum of f using jax.scipy.optimize.minimize</span></span>
<span id="cb3-28">    <span class="im" style="color: #00769E;">from</span> jax.scipy.optimize <span class="im" style="color: #00769E;">import</span> minimize</span>
<span id="cb3-29">    <span class="kw" style="color: #003B4F;">def</span> f_min(theta):</span>
<span id="cb3-30">        <span class="cf" style="color: #003B4F;">return</span> f(theta[<span class="dv" style="color: #AD0000;">0</span>], theta[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb3-31">    res <span class="op" style="color: #5E5E5E;">=</span> minimize(f_min, jnp.array([<span class="fl" style="color: #AD0000;">0.</span>, <span class="fl" style="color: #AD0000;">0.</span>]), method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'BFGS'</span>)</span>
<span id="cb3-32">    theta_min <span class="op" style="color: #5E5E5E;">=</span> res.x</span>
<span id="cb3-33">    f_min <span class="op" style="color: #5E5E5E;">=</span> res.fun</span>
<span id="cb3-34">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Global minimum: </span><span class="sc" style="color: #5E5E5E;">{</span>f_min<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> at </span><span class="sc" style="color: #5E5E5E;">{</span>theta_min<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb3-35">    <span class="co" style="color: #5E5E5E;"># Plot the global minimum</span></span>
<span id="cb3-36">    ax2.scatter(theta_min[<span class="dv" style="color: #AD0000;">0</span>], theta_min[<span class="dv" style="color: #AD0000;">1</span>], marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'x'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb3-37"></span>
<span id="cb3-38">    </span>
<span id="cb3-39"></span>
<span id="cb3-40">    ax2.set_aspect(<span class="st" style="color: #20794D;">'equal'</span>)</span>
<span id="cb3-41"></span>
<span id="cb3-42">    <span class="co" style="color: #5E5E5E;"># Add labels</span></span>
<span id="cb3-43">    ax1.set_xlabel(<span class="vs" style="color: #20794D;">r'$\theta_0$'</span>)</span>
<span id="cb3-44">    ax1.set_ylabel(<span class="vs" style="color: #20794D;">r'$\theta_1$'</span>)</span>
<span id="cb3-45">    ax1.set_zlabel(<span class="vs" style="color: #20794D;">r'$f(\theta_0, \theta_1)$'</span>)</span>
<span id="cb3-46">    ax2.set_xlabel(<span class="vs" style="color: #20794D;">r'$\theta_0$'</span>)</span>
<span id="cb3-47">    ax2.set_ylabel(<span class="vs" style="color: #20794D;">r'$\theta_1$'</span>)</span>
<span id="cb3-48"></span>
<span id="cb3-49">    <span class="co" style="color: #5E5E5E;"># Add colorbar</span></span>
<span id="cb3-50">    fig.colorbar(temp, ax<span class="op" style="color: #5E5E5E;">=</span>ax1, shrink<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, aspect<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb3-51"></span>
<span id="cb3-52">    <span class="co" style="color: #5E5E5E;"># Tight layout</span></span>
<span id="cb3-53">    plt.tight_layout()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="223">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">create_plot(f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Global minimum: 0.0 at [0. 0.]</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/gd_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="224">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Gradient of f at a given point</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;">def</span> grad_f(theta_0, theta_1):</span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;">return</span> grad(f, argnums<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>))(theta_0, theta_1)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="225">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">grad_f(<span class="fl" style="color: #AD0000;">2.</span>, <span class="fl" style="color: #AD0000;">1.</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="225">
<pre><code>(Array(4., dtype=float32, weak_type=True),
 Array(2., dtype=float32, weak_type=True))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="226">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">theta <span class="op" style="color: #5E5E5E;">=</span> jnp.array([<span class="fl" style="color: #AD0000;">2.</span>, <span class="fl" style="color: #AD0000;">1.</span>])</span>
<span id="cb9-2">theta</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="226">
<pre><code>Array([2., 1.], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="227">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">f(<span class="op" style="color: #5E5E5E;">*</span>theta)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="227">
<pre><code>Array(5., dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="228">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">jnp.array(grad_f(<span class="op" style="color: #5E5E5E;">*</span>theta))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="228">
<pre><code>Array([4., 2.], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="229">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">lr <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1</span></span>
<span id="cb15-2">theta <span class="op" style="color: #5E5E5E;">=</span> theta<span class="op" style="color: #5E5E5E;">-</span> lr <span class="op" style="color: #5E5E5E;">*</span> jnp.array(grad_f(<span class="op" style="color: #5E5E5E;">*</span>theta))</span>
<span id="cb15-3">theta</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="229">
<pre><code>Array([1.6, 0.8], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="230">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">f(<span class="op" style="color: #5E5E5E;">*</span>theta)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="230">
<pre><code>Array(3.2000003, dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="231">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Gradient descent loop</span></span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;"># Initial parameters</span></span>
<span id="cb19-4">theta <span class="op" style="color: #5E5E5E;">=</span> jnp.array([<span class="fl" style="color: #AD0000;">2.</span>, <span class="fl" style="color: #AD0000;">1.</span>])</span>
<span id="cb19-5"></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;"># Store parameters and function values for plotting</span></span>
<span id="cb19-7">theta_vals <span class="op" style="color: #5E5E5E;">=</span> [theta]</span>
<span id="cb19-8">f_vals <span class="op" style="color: #5E5E5E;">=</span> [f(<span class="op" style="color: #5E5E5E;">*</span>theta)]</span>
<span id="cb19-9"></span>
<span id="cb19-10"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb19-11">    theta <span class="op" style="color: #5E5E5E;">=</span> theta <span class="op" style="color: #5E5E5E;">-</span> lr <span class="op" style="color: #5E5E5E;">*</span> jnp.array(grad_f(<span class="op" style="color: #5E5E5E;">*</span>theta))</span>
<span id="cb19-12">    theta_vals.append(theta)</span>
<span id="cb19-13">    f_vals.append(f(<span class="op" style="color: #5E5E5E;">*</span>theta))</span>
<span id="cb19-14">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Iteration </span><span class="sc" style="color: #5E5E5E;">{</span>i<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: theta = </span><span class="sc" style="color: #5E5E5E;">{</span>theta<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, f = </span><span class="sc" style="color: #5E5E5E;">{</span>f(<span class="op" style="color: #5E5E5E;">*</span>theta)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb19-15"></span>
<span id="cb19-16">theta_vals <span class="op" style="color: #5E5E5E;">=</span> jnp.array(theta_vals)</span>
<span id="cb19-17">f_vals <span class="op" style="color: #5E5E5E;">=</span> jnp.array(f_vals)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Iteration 0: theta = [1.6 0.8], f = 3.200000286102295
Iteration 1: theta = [1.28 0.64], f = 2.047999858856201
Iteration 2: theta = [1.0239999  0.51199996], f = 1.3107198476791382
Iteration 3: theta = [0.8191999  0.40959996], f = 0.8388606309890747
Iteration 4: theta = [0.6553599  0.32767996], f = 0.5368707776069641
Iteration 5: theta = [0.52428794 0.26214397], f = 0.34359729290008545
Iteration 6: theta = [0.41943035 0.20971517], f = 0.21990226209163666
Iteration 7: theta = [0.3355443  0.16777214], f = 0.14073745906352997
Iteration 8: theta = [0.26843542 0.13421771], f = 0.09007196873426437
Iteration 9: theta = [0.21474834 0.10737417], f = 0.05764605849981308</code></pre>
</div>
</div>
<div class="cell" data-execution_count="232">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Plot the cost vs iterations</span></span>
<span id="cb21-2">plt.plot(f_vals)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/gd_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="233">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># Simple dataset for linear regression</span></span>
<span id="cb22-2"></span>
<span id="cb22-3">X <span class="op" style="color: #5E5E5E;">=</span> jnp.array([[<span class="fl" style="color: #AD0000;">1.</span>], [<span class="fl" style="color: #AD0000;">2.</span>], [<span class="fl" style="color: #AD0000;">3.</span>]])</span>
<span id="cb22-4">y <span class="op" style="color: #5E5E5E;">=</span> jnp.array([<span class="fl" style="color: #AD0000;">1.</span>, <span class="fl" style="color: #AD0000;">2.2</span>, <span class="fl" style="color: #AD0000;">2.8</span>])</span>
<span id="cb22-5"></span>
<span id="cb22-6"><span class="im" style="color: #00769E;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;">import</span> LinearRegression</span>
<span id="cb22-7">lr <span class="op" style="color: #5E5E5E;">=</span> LinearRegression()</span>
<span id="cb22-8">lr.fit(X, y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="233">
<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-5" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-5" type="checkbox" checked=""><label for="sk-estimator-id-5" class="sk-toggleable__label sk-toggleable__label-arrow">LinearRegression</label><div class="sk-toggleable__content"><pre>LinearRegression()</pre></div></div></div></div></div>
</div>
</div>
<div class="cell" data-execution_count="234">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">lr.coef_, lr.intercept_</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="234">
<pre><code>(array([0.9000001], dtype=float32), 0.19999981)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="235">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># Cost function for linear regression using jax.vmap</span></span>
<span id="cb25-2"><span class="kw" style="color: #003B4F;">def</span> cost(theta_0, theta_1):</span>
<span id="cb25-3">    y_hat <span class="op" style="color: #5E5E5E;">=</span> (theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> X).flatten()</span>
<span id="cb25-4">    <span class="co" style="color: #5E5E5E;">#print(y_hat, y, y-y_hat, (y-y_hat)**2)</span></span>
<span id="cb25-5">    <span class="cf" style="color: #003B4F;">return</span> jnp.mean((y_hat<span class="op" style="color: #5E5E5E;">-</span> y)<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb25-6">    </span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;"># Plot surface and contour plots for cost function</span></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;">#create_plot(cost)</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="236">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">cost(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="236">
<pre><code>Array(16.826666, dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="237">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">(<span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">3.8</span><span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">5.2</span><span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>)<span class="op" style="color: #5E5E5E;">/</span><span class="fl" style="color: #AD0000;">3.</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="237">
<pre><code>16.826666666666668</code></pre>
</div>
</div>
<div class="cell" data-execution_count="238">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># Gradient of cost function at a given point</span></span>
<span id="cb30-2"><span class="kw" style="color: #003B4F;">def</span> grad_cost(theta_0, theta_1):</span>
<span id="cb30-3">    <span class="cf" style="color: #003B4F;">return</span> jnp.array(grad(cost, argnums<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>))(theta_0, theta_1))</span>
<span id="cb30-4"></span>
<span id="cb30-5">grad_cost(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="238">
<pre><code>Array([ 8.      , 17.466667], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="239">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;">def</span> grad_cost_manual(theta_0, theta_1):</span>
<span id="cb32-2">    y_hat <span class="op" style="color: #5E5E5E;">=</span> (theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> X).flatten()</span>
<span id="cb32-3">    <span class="cf" style="color: #003B4F;">return</span> jnp.array([<span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>jnp.mean(y_hat <span class="op" style="color: #5E5E5E;">-</span> y), <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>jnp.mean((y_hat <span class="op" style="color: #5E5E5E;">-</span> y) <span class="op" style="color: #5E5E5E;">*</span> X.flatten())])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="240">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">grad_cost_manual(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="240">
<pre><code>Array([ 8.      , 17.466667], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="241">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;"># Plotting cost surface and contours for three points in X individually</span></span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="kw" style="color: #003B4F;">def</span> cost_i(theta_0, theta_1, i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb35-4">    y_hat <span class="op" style="color: #5E5E5E;">=</span> theta_0 <span class="op" style="color: #5E5E5E;">+</span> theta_1 <span class="op" style="color: #5E5E5E;">*</span> X[i<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>:i]</span>
<span id="cb35-5">    <span class="cf" style="color: #003B4F;">return</span> jnp.mean((y_hat<span class="op" style="color: #5E5E5E;">-</span> y[i<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>:i])<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="242">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">(cost_i(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>, <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">+</span> cost_i(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>, <span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">+</span> cost_i(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>, <span class="dv" style="color: #AD0000;">3</span>))<span class="op" style="color: #5E5E5E;">/</span><span class="fl" style="color: #AD0000;">3.0</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="242">
<pre><code>Array(16.826666, dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="243">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;">from</span> functools <span class="im" style="color: #00769E;">import</span> partial</span></code></pre></div>
</div>
<div class="cell" data-execution_count="244">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;"># Plot surface and contour plots for cost function</span></span>
<span id="cb39-2"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>):</span>
<span id="cb39-3">    cost_i_p <span class="op" style="color: #5E5E5E;">=</span> partial(cost_i, i<span class="op" style="color: #5E5E5E;">=</span>i)</span>
<span id="cb39-4">    create_plot(cost_i_p)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Global minimum: 0.0 at [0.5 0.5]
Global minimum: 0.0 at [0.44000003 0.88000005]
Global minimum: 0.0 at [0.28000003 0.84      ]</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/gd_files/figure-html/cell-26-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/gd_files/figure-html/cell-26-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/gd_files/figure-html/cell-26-output-4.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="250">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">grad_cost_1 <span class="op" style="color: #5E5E5E;">=</span> grad(cost_i, argnums<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb41-2">grad_cost_1(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="250">
<pre><code>(Array(6., dtype=float32, weak_type=True),
 Array(6., dtype=float32, weak_type=True))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="258">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">jnp.array(grad_cost_1(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>, <span class="dv" style="color: #AD0000;">1</span>)), jnp.array(grad_cost_1(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>, <span class="dv" style="color: #AD0000;">2</span>)), jnp.array(grad_cost_1(<span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>, <span class="dv" style="color: #AD0000;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="258">
<pre><code>(Array([6., 6.], dtype=float32),
 Array([ 7.6, 15.2], dtype=float32),
 Array([10.4     , 31.199999], dtype=float32))</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/gd.html</guid>
  <pubDate>Thu, 16 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Taylor Series</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/taylor.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> jax.numpy <span class="im" style="color: #00769E;">as</span> jnp</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> jax <span class="im" style="color: #00769E;">import</span> random, jit, vmap, grad, jacfwd, jacrev, hessian, value_and_grad</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Define the function to be approximated</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;">def</span> f(x):</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;">return</span> jnp.sin(x)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Plot the function</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">x <span class="op" style="color: #5E5E5E;">=</span> jnp.linspace(<span class="op" style="color: #5E5E5E;">-</span>jnp.pi, jnp.pi, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb3-4">plt.plot(x, f(x))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/taylor_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># First order Taylor approximation for f(x) at x = 0</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">def</span> taylor1(f, x, x0<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.</span>):</span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;">return</span> f(x0) <span class="op" style="color: #5E5E5E;">+</span> grad(f)(x0) <span class="op" style="color: #5E5E5E;">*</span> (x <span class="op" style="color: #5E5E5E;">-</span> x0)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Plot the Taylor approximation</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">plt.plot(x, f(x), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'f(x)'</span>)</span>
<span id="cb5-4">plt.plot(x, taylor1(f, x), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/taylor_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># factorial function in JAX</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">def</span> factorial(n):</span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;">return</span> jnp.prod(jnp.arange(<span class="dv" style="color: #AD0000;">1</span>, n <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Find the nth order Taylor approximation for f(x) at x = 0</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;">def</span> taylor(f, x, n, x0<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.</span>):</span>
<span id="cb7-4">    grads <span class="op" style="color: #5E5E5E;">=</span> {<span class="dv" style="color: #AD0000;">0</span>:f}</span>
<span id="cb7-5">    output <span class="op" style="color: #5E5E5E;">=</span> f(x0)</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, n<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb7-7">        grads[i] <span class="op" style="color: #5E5E5E;">=</span> grad(grads[i<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb7-8">        output <span class="op" style="color: #5E5E5E;">+=</span> grads[i](x0) <span class="op" style="color: #5E5E5E;">*</span> (x <span class="op" style="color: #5E5E5E;">-</span> x0)<span class="op" style="color: #5E5E5E;">**</span>i <span class="op" style="color: #5E5E5E;">/</span> factorial(i)</span>
<span id="cb7-9">    <span class="cf" style="color: #003B4F;">return</span> output</span></code></pre></div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">plt.plot(x, f(x), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'f(x)'</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb8-2">plt.plot(x, taylor(f, x, <span class="dv" style="color: #AD0000;">1</span>), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation, n=1'</span>)</span>
<span id="cb8-3">plt.plot(x, taylor(f, x, <span class="dv" style="color: #AD0000;">3</span>), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation, n=3'</span>)</span>
<span id="cb8-4">plt.plot(x, taylor(f, x, <span class="dv" style="color: #AD0000;">5</span>), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation, n=5'</span>)</span>
<span id="cb8-5">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>&lt;matplotlib.legend.Legend at 0x1aea5ea90&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/taylor_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">x <span class="op" style="color: #5E5E5E;">=</span> jnp.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;">def</span> g(x):</span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;">return</span> x<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb10-5"></span>
<span id="cb10-6">plt.plot(x, g(x), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'g(x)'</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb10-7">plt.plot(x, taylor(g, x, <span class="dv" style="color: #AD0000;">1</span>), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation, n=1'</span>)</span>
<span id="cb10-8">plt.plot(x, taylor(g, x, <span class="dv" style="color: #AD0000;">2</span>), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation, n=3'</span>, ls<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/taylor_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">plt.plot(x, g(x), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'g(x)'</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb11-2">plt.plot(x, taylor(g, x, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">4.1</span>), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation, n=1'</span>)</span>
<span id="cb11-3">plt.plot(x, taylor(g, x, <span class="dv" style="color: #AD0000;">2</span>, <span class="fl" style="color: #AD0000;">4.1</span>), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Taylor approximation, n=3'</span>, ls<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb11-4">plt.ylim((<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">20</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>(-2.0, 20.0)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/taylor_files/figure-html/cell-11-output-2.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/taylor.html</guid>
  <pubDate>Tue, 14 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Conditioning and Linear Regression</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/condition-inverse.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Showing that np.linalg.solve is better conditioned than np.linalg.inv for linear regression normal equations</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># Generate data</span></span>
<span id="cb2-4">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb2-5">p <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb2-6">X <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(n, p)</span>
<span id="cb2-7">theta <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(p)</span>
<span id="cb2-8">y <span class="op" style="color: #5E5E5E;">=</span> X <span class="op" style="color: #5E5E5E;">@</span> theta <span class="op" style="color: #5E5E5E;">+</span> np.random.randn(n)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;"># Solve normal equations</span></span>
<span id="cb2-11">theta_hat <span class="op" style="color: #5E5E5E;">=</span> np.linalg.solve(X.T <span class="op" style="color: #5E5E5E;">@</span> X, X.T <span class="op" style="color: #5E5E5E;">@</span> y)</span>
<span id="cb2-12">theta_hat_inv <span class="op" style="color: #5E5E5E;">=</span> np.linalg.inv(X.T <span class="op" style="color: #5E5E5E;">@</span> X) <span class="op" style="color: #5E5E5E;">@</span> X.T <span class="op" style="color: #5E5E5E;">@</span> y</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;"># Compare the condition numbers</span></span>
<span id="cb2-15"><span class="bu" style="color: null;">print</span>(np.linalg.cond(X.T <span class="op" style="color: #5E5E5E;">@</span> X))</span>
<span id="cb2-16"><span class="bu" style="color: null;">print</span>(np.linalg.cond(np.linalg.inv(X.T <span class="op" style="color: #5E5E5E;">@</span> X)))</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;"># Plot the difference between the two solutions</span></span>
<span id="cb2-19">plt.plot(theta_hat <span class="op" style="color: #5E5E5E;">-</span> theta_hat_inv)</span>
<span id="cb2-20">plt.title(<span class="st" style="color: #20794D;">'Difference between solutions'</span>)</span>
<span id="cb2-21">plt.xlabel(<span class="st" style="color: #20794D;">'Index'</span>)</span>
<span id="cb2-22">plt.ylabel(<span class="st" style="color: #20794D;">'Difference'</span>)</span>
<span id="cb2-23">plt.show()</span>
<span id="cb2-24"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2.980877596192165
2.980877596192165</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/condition-inverse_files/figure-html/cell-3-output-2.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/condition-inverse.html</guid>
  <pubDate>Fri, 10 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Linear Regression: Geometric Perspective</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/projection.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Two three-dimensional vectors</span></span>
<span id="cb2-2">v1 <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb2-3">v2 <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">2</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># y-vector</span></span>
<span id="cb2-6">y <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">2.5</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.8</span>, <span class="fl" style="color: #AD0000;">1.2</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># plot the vectors in 3D</span></span>
<span id="cb3-2">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb3-3">ax <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">111</span>, projection<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'3d'</span>)</span>
<span id="cb3-4">ax.quiver(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, v1[<span class="dv" style="color: #AD0000;">0</span>], v1[<span class="dv" style="color: #AD0000;">1</span>], v1[<span class="dv" style="color: #AD0000;">2</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'v1'</span>)</span>
<span id="cb3-5">ax.quiver(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, v2[<span class="dv" style="color: #AD0000;">0</span>], v2[<span class="dv" style="color: #AD0000;">1</span>], v2[<span class="dv" style="color: #AD0000;">2</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'b'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'v2'</span>)</span>
<span id="cb3-6">ax.quiver(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, y[<span class="dv" style="color: #AD0000;">0</span>], y[<span class="dv" style="color: #AD0000;">1</span>], y[<span class="dv" style="color: #AD0000;">2</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'g'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8">ax.set_xlim(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb3-9">ax.set_ylim(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb3-10">ax.set_zlim(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb3-11">ax.set_xlabel(<span class="st" style="color: #20794D;">'x'</span>)</span>
<span id="cb3-12">ax.set_ylabel(<span class="st" style="color: #20794D;">'y'</span>)</span>
<span id="cb3-13">ax.set_zlabel(<span class="st" style="color: #20794D;">'z'</span>)</span>
<span id="cb3-14">ax.legend()</span>
<span id="cb3-15"></span>
<span id="cb3-16">ax.view_init(elev<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">45</span>, azim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">60</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/projection_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">theta <span class="op" style="color: #5E5E5E;">=</span> np.linalg.lstsq(np.array([v1, v2]).T, y, rcond<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb4-2">theta</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([0.525 , 0.6625])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Projection of y onto the plane spanned by v1 and v2</span></span>
<span id="cb6-2">y_proj <span class="op" style="color: #5E5E5E;">=</span> np.dot(np.array([v1, v2]).T, theta)</span>
<span id="cb6-3">y_proj</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>array([ 1.85, -0.8 ,  1.85])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Plot the x=z plane filled with color black</span></span>
<span id="cb8-2">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;"># 3d projection</span></span>
<span id="cb8-4">ax <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">111</span>, projection<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'3d'</span>)</span>
<span id="cb8-5">xx, zz <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>), np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">100</span>))</span>
<span id="cb8-6">yy <span class="op" style="color: #5E5E5E;">=</span> np.zeros_like(xx)</span>
<span id="cb8-7">ax.plot_surface(xx, yy, zz, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;"># plot the vectors in 3D</span></span>
<span id="cb8-11">ax.quiver(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, v1[<span class="dv" style="color: #AD0000;">0</span>], v1[<span class="dv" style="color: #AD0000;">1</span>], v1[<span class="dv" style="color: #AD0000;">2</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'v1'</span>)</span>
<span id="cb8-12">ax.quiver(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, v2[<span class="dv" style="color: #AD0000;">0</span>], v2[<span class="dv" style="color: #AD0000;">1</span>], v2[<span class="dv" style="color: #AD0000;">2</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'b'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'v2'</span>)</span>
<span id="cb8-13">ax.quiver(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, y[<span class="dv" style="color: #AD0000;">0</span>], y[<span class="dv" style="color: #AD0000;">1</span>], y[<span class="dv" style="color: #AD0000;">2</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'g'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>)</span>
<span id="cb8-14"></span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;"># Limit the view to the x-z plane</span></span>
<span id="cb8-17"></span>
<span id="cb8-18">ax.set_xlabel(<span class="st" style="color: #20794D;">'x'</span>)</span>
<span id="cb8-19">ax.set_ylabel(<span class="st" style="color: #20794D;">'y'</span>)</span>
<span id="cb8-20">ax.set_zlabel(<span class="st" style="color: #20794D;">'z'</span>)</span>
<span id="cb8-21"></span>
<span id="cb8-22"><span class="co" style="color: #5E5E5E;"># Set the view angle so that we can see the x-z plane appear at a 45 degree angle</span></span>
<span id="cb8-23"><span class="co" style="color: #5E5E5E;">#ax.view_init(azim=70, elev=200)</span></span>
<span id="cb8-24">ax.view_init(elev<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">60</span>, azim<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">80</span>, roll<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb8-25">ax.view_init(<span class="dv" style="color: #AD0000;">120</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">120</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">120</span>)</span>
<span id="cb8-26"><span class="co" style="color: #5E5E5E;">#ax.view_init(roll=45)</span></span>
<span id="cb8-27"><span class="co" style="color: #5E5E5E;">#ax.view_init(elev=30, azim=45, roll=15)</span></span>
<span id="cb8-28">ax.set_ylim(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb8-29">ax.set_xlim(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb8-30">ax.set_zlim(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb8-31"></span>
<span id="cb8-32"></span>
<span id="cb8-33"><span class="co" style="color: #5E5E5E;"># Plot the projection of y onto the plane spanned by v1 and v2</span></span>
<span id="cb8-34">ax.quiver(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, y_proj[<span class="dv" style="color: #AD0000;">0</span>], y_proj[<span class="dv" style="color: #AD0000;">1</span>], y_proj[<span class="dv" style="color: #AD0000;">2</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Projection of y onto</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;"> the plane spanned by v1 and v2'</span>)</span>
<span id="cb8-35">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>&lt;matplotlib.legend.Legend at 0x111d52730&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/projection_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/projection.html</guid>
  <pubDate>Tue, 31 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Maths and JAX</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/maths-jax.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> jax.numpy <span class="im" style="color: #00769E;">as</span> jnp</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> jax</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">def</span> func(x, y, z):</span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;">return</span> x<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> jnp.sin(y) <span class="op" style="color: #5E5E5E;">+</span> z</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">func(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>DeviceArray(4.9092975, dtype=float32, weak_type=True)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">from</span> sympy <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb5-2">init_printing()</span>
<span id="cb5-3"></span>
<span id="cb5-4">x, y, z <span class="op" style="color: #5E5E5E;">=</span> symbols(<span class="st" style="color: #20794D;">'x y z'</span>)</span>
<span id="cb5-5">f <span class="op" style="color: #5E5E5E;">=</span> x<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> sin(y) <span class="op" style="color: #5E5E5E;">+</span> z</span>
<span id="cb5-6">f</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20x%5E%7B2%7D%20+%20z%20+%20%5Csin%7B%5Cleft(y%20%5Cright)%7D"></p>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">diff(f, x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%202%20x"></p>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Find the derivative of f with respect to x, y, and z using sympy</span></span>
<span id="cb7-2">del_x, del_y, del_z <span class="op" style="color: #5E5E5E;">=</span> diff(f, x), diff(f, y), diff(f, z)</span>
<span id="cb7-3">del_x, del_y, del_z</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cleft(%202%20x,%20%5C%20%20%5Ccos%7B%5Cleft(y%20%5Cright)%7D,%20%5C%20%201%5Cright)"></p>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">grad_f <span class="op" style="color: #5E5E5E;">=</span> lambdify((x, y, z), [del_x, del_y, del_z])</span>
<span id="cb8-2">grad_f(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cleft%5B%202,%20%5C%20%20-0.416146836547142,%20%5C%20%201%5Cright%5D"></p>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">grad_f_jax <span class="op" style="color: #5E5E5E;">=</span> jax.grad(func, argnums<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb9-2">grad_f_jax(<span class="fl" style="color: #AD0000;">1.</span>, <span class="fl" style="color: #AD0000;">2.</span>, <span class="fl" style="color: #AD0000;">3.</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>(DeviceArray(2., dtype=float32, weak_type=True),
 DeviceArray(-0.41614684, dtype=float32, weak_type=True),
 DeviceArray(1., dtype=float32, weak_type=True))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="92">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb11-2">A <span class="op" style="color: #5E5E5E;">=</span> jax.random.normal(shape<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">1</span>, n), key<span class="op" style="color: #5E5E5E;">=</span>jax.random.PRNGKey(<span class="dv" style="color: #AD0000;">0</span>), dtype<span class="op" style="color: #5E5E5E;">=</span>jnp.float32)</span>
<span id="cb11-3">theta <span class="op" style="color: #5E5E5E;">=</span> jax.random.normal(shape<span class="op" style="color: #5E5E5E;">=</span>(n, <span class="dv" style="color: #AD0000;">1</span>), key<span class="op" style="color: #5E5E5E;">=</span>jax.random.PRNGKey(<span class="dv" style="color: #AD0000;">0</span>), dtype<span class="op" style="color: #5E5E5E;">=</span>jnp.float32)</span>
<span id="cb11-4">b <span class="op" style="color: #5E5E5E;">=</span> A <span class="op" style="color: #5E5E5E;">@</span> theta </span>
<span id="cb11-5"></span>
<span id="cb11-6">b</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="92">
<pre><code>DeviceArray([[28.684494]], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="93">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">b.flatten(), b.item()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="93">
<pre><code>(DeviceArray([28.684494], dtype=float32), 28.684494018554688)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="94">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;">def</span> a_theta(A, theta):</span>
<span id="cb15-2">    <span class="cf" style="color: #003B4F;">return</span> A <span class="op" style="color: #5E5E5E;">@</span> theta</span></code></pre></div>
</div>
<div class="cell" data-execution_count="95">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">a_theta(A, theta)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="95">
<pre><code>DeviceArray([[28.684494]], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="96">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">grad_a_theta <span class="op" style="color: #5E5E5E;">=</span> jax.grad(a_theta, argnums<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="101">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">jax.jacobian(a_theta, argnums<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)(A, theta)[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, :].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="101">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cleft(%2020,%20%5C%20%201%5Cright)"></p>
</div>
</div>
<div class="cell" data-execution_count="102">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">A.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="102">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cleft(%201,%20%5C%20%2020%5Cright)"></p>
</div>
</div>
<div class="cell" data-execution_count="112">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Sympy version</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="109">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">A <span class="op" style="color: #5E5E5E;">=</span> MatrixSymbol(<span class="st" style="color: #20794D;">'A'</span>, <span class="dv" style="color: #AD0000;">1</span>, n)</span>
<span id="cb22-2">theta <span class="op" style="color: #5E5E5E;">=</span> MatrixSymbol(<span class="st" style="color: #20794D;">'theta'</span>, n, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb22-3">A, theta</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="109">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cleft(%20A,%20%5C%20%20%5Ctheta%5Cright)"></p>
</div>
</div>
<div class="cell" data-execution_count="111">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">diff(A<span class="op" style="color: #5E5E5E;">*</span>theta, theta)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="111">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20A%5E%7BT%7D"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/maths-jax.html</guid>
  <pubDate>Tue, 31 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>CNN Edge 2d</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> torch <span class="im" style="color: #00769E;">import</span> nn</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt <span class="co" style="color: #5E5E5E;"># for making figures</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Create a tensor of size 6x6 with first three columns as 1 and rest as 0</span></span>
<span id="cb2-2">x <span class="op" style="color: #5E5E5E;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb2-3">x[:, :<span class="dv" style="color: #AD0000;">3</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-4"><span class="bu" style="color: null;">print</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[1., 1., 1., 0., 0., 0.],
        [1., 1., 1., 0., 0., 0.],
        [1., 1., 1., 0., 0., 0.],
        [1., 1., 1., 0., 0., 0.],
        [1., 1., 1., 0., 0., 0.],
        [1., 1., 1., 0., 0., 0.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">x.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>torch.Size([6, 6])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Plot the tensor with equal aspect ratio</span></span>
<span id="cb6-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb6-3">sns.heatmap(x, cbar<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, xticklabels<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, yticklabels<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>, annot<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>&lt;AxesSubplot: &gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Create a 3x3 kernel with first column as 1, second as 0 and third as -1</span></span>
<span id="cb8-2"></span>
<span id="cb8-3">k <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]]).<span class="bu" style="color: null;">float</span>()</span>
<span id="cb8-4"><span class="bu" style="color: null;">print</span>(k)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[ 1.,  0., -1.],
        [ 1.,  0., -1.],
        [ 1.,  0., -1.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Apply the kernel to the image</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"></span>
<span id="cb10-4">y <span class="op" style="color: #5E5E5E;">=</span> F.conv2d(x.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">6</span>), k.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb10-5"><span class="bu" style="color: null;">print</span>(y)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;"># Create figure of size of y</span></span>
<span id="cb10-8">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(y.shape[<span class="dv" style="color: #AD0000;">2</span>], y.shape[<span class="dv" style="color: #AD0000;">3</span>]))</span>
<span id="cb10-9">sns.heatmap(y[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], cbar<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, xticklabels<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, yticklabels<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>, annot<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[[[0., 3., 3., 0.],
          [0., 3., 3., 0.],
          [0., 3., 3., 0.],
          [0., 3., 3., 0.]]]])</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>&lt;AxesSubplot: &gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge_files/figure-html/cell-7-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">im <span class="op" style="color: #5E5E5E;">=</span> plt.imread(<span class="st" style="color: #20794D;">'lm.jpeg'</span>)</span>
<span id="cb13-2">plt.imshow(im)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>&lt;matplotlib.image.AxesImage at 0x151220670&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Crop to left 180 X 180 pixels</span></span>
<span id="cb15-2"></span>
<span id="cb15-3">im <span class="op" style="color: #5E5E5E;">=</span> im[:<span class="dv" style="color: #AD0000;">180</span>, :<span class="dv" style="color: #AD0000;">180</span>]</span>
<span id="cb15-4">plt.imshow(im, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>&lt;matplotlib.image.AxesImage at 0x1512b3cd0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Convert to grayscale</span></span>
<span id="cb17-2">im <span class="op" style="color: #5E5E5E;">=</span> im.mean(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb17-3">plt.imshow(im, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>&lt;matplotlib.image.AxesImage at 0x15133dac0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge_files/figure-html/cell-10-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">im.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>(180, 180)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Detect edges using our filter</span></span>
<span id="cb21-2"></span>
<span id="cb21-3">k <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]]).<span class="bu" style="color: null;">float</span>()</span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;"># Apply the kernel to the image</span></span>
<span id="cb21-6">y <span class="op" style="color: #5E5E5E;">=</span> F.conv2d(torch.tensor(im).<span class="bu" style="color: null;">float</span>().view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">180</span>, <span class="dv" style="color: #AD0000;">180</span>), k.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb21-7"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># plot the result</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;">#plt.figure(figsize=(y.shape[2], y.shape[3]))</span></span>
<span id="cb22-3">plt.imshow(y[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>&lt;matplotlib.image.AxesImage at 0x197097430&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge_files/figure-html/cell-13-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># Detect horizontal edges using our filter</span></span>
<span id="cb24-2"></span>
<span id="cb24-3">k <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]]).<span class="bu" style="color: null;">float</span>().T</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;"># Apply the kernel to the image</span></span>
<span id="cb24-6">y <span class="op" style="color: #5E5E5E;">=</span> F.conv2d(torch.tensor(im).<span class="bu" style="color: null;">float</span>().view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">180</span>, <span class="dv" style="color: #AD0000;">180</span>), k.view(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb24-7">plt.imshow(y[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>&lt;matplotlib.image.AxesImage at 0x197105730&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/cnn-edge.html</guid>
  <pubDate>Tue, 31 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Maths and JAX: Low Rank</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix.html</link>
  <description><![CDATA[ 



<section id="matrix-as-transformation-and-interpreting-low-rank-matrix" class="level1">
<h1>Matrix as transformation and interpreting low rank matrix</h1>
<section id="goals" class="level2">
<h2 class="anchored" data-anchor-id="goals">Goals</h2>
<section id="g1-to-understand-matrix-vector-multiplication-as-transformation-of-the-vector" class="level3">
<h3 class="anchored" data-anchor-id="g1-to-understand-matrix-vector-multiplication-as-transformation-of-the-vector">G1: To understand matrix vector multiplication as transformation of the vector</h3>
<p>Multiplying a matrix A with a vector x transforms x</p>
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/Ax-combined.png" class="img-fluid"></p>
</section>
<section id="g2-understanding-low-rank-matrices-as-applying-transformation-on-a-vector-resulting-in-a-subspace-of-the-original-vector-space" class="level3">
<h3 class="anchored" data-anchor-id="g2-understanding-low-rank-matrices-as-applying-transformation-on-a-vector-resulting-in-a-subspace-of-the-original-vector-space">G2: Understanding low rank matrices as applying transformation on a vector resulting in a subspace of the original vector space</h3>
<p>Transforming a vector via a low rank matrix in the shown examples leads to a line</p>
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lr-combined.png" class="img-fluid"></p>
<p>We first study Goal 1. The interpretation of matrix vector product is borrowed from the excellent videos from the <a href="https://www.youtube.com/watch?v=kYB8IZa5AuE">3Blue1Brown channel</a>. I’ll first set up the environment by importing a few relevant libraries.</p>
<section id="basic-imports" class="level4">
<h4 class="anchored" data-anchor-id="basic-imports">Basic imports</h4>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> matplotlib.patches <span class="im" style="color: #00769E;">as</span> mpatches</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> sympy <span class="im" style="color: #00769E;">import</span> Matrix, MatrixSymbol, Eq, MatMul</span>
<span id="cb1-7"></span>
<span id="cb1-8">sns.reset_defaults()</span>
<span id="cb1-9">sns.set_context(context<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"talk"</span>, font_scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>)</span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">sympy_A <span class="op" style="color: #5E5E5E;">=</span> MatrixSymbol(<span class="st" style="color: #20794D;">"A"</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-2">sympy_x <span class="op" style="color: #5E5E5E;">=</span> MatrixSymbol(<span class="st" style="color: #20794D;">"x"</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-3">y <span class="op" style="color: #5E5E5E;">=</span> MatrixSymbol(<span class="st" style="color: #20794D;">"y"</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5">Eq(y, sympy_A<span class="op" style="color: #5E5E5E;">*</span>sympy_x, evaluate<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20y%20=%20A%20x"></p>
</div>
</div>
<p>Given a matrix <code>A</code> and a vector <code>x</code>, we are trying to get <code>y=Ax</code>. Let us first see the values for a specific instance in the 2d space.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">A <span class="op" style="color: #5E5E5E;">=</span> np.array([[<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>]])</span>
<span id="cb3-2"></span>
<span id="cb3-3">x <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb3-4">Ax <span class="op" style="color: #5E5E5E;">=</span> A <span class="op" style="color: #5E5E5E;">@</span> x</span>
<span id="cb3-5"></span>
<span id="cb3-6">Eq(Matrix(Ax), MatMul(Matrix(A), Matrix(x)),evaluate<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cleft%5B%5Cbegin%7Bmatrix%7D3%5C%5C5%5Cend%7Bmatrix%7D%5Cright%5D%20=%20%5Cleft%5B%5Cbegin%7Bmatrix%7D2%20&amp;%201%5C%5C1%20&amp;%204%5Cend%7Bmatrix%7D%5Cright%5D%20%5Cleft%5B%5Cbegin%7Bmatrix%7D1%5C%5C1%5Cend%7Bmatrix%7D%5Cright%5D"></p>
</div>
</div>
<p>Here, we have A = <img src="https://latex.codecogs.com/png.latex?%5Cleft%5B%5Cbegin%7Bmatrix%7D2%20&amp;%201%5C%5C1%20&amp;%204%5Cend%7Bmatrix%7D%5Cright%5D"> and x = <img src="https://latex.codecogs.com/png.latex?%7B%5Ctext%7B%5B1%201%5D%7D%7D"></p>
<p>Now some code to create arrows to represent arrows.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> plot_arrow(ax, x, color, label):</span>
<span id="cb4-2">    x_head, y_head <span class="op" style="color: #5E5E5E;">=</span> x[<span class="dv" style="color: #AD0000;">0</span>], x[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb4-3">    x_tail <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb4-4">    y_tail <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb4-5">    dx <span class="op" style="color: #5E5E5E;">=</span> x_head <span class="op" style="color: #5E5E5E;">-</span> x_tail</span>
<span id="cb4-6">    dy <span class="op" style="color: #5E5E5E;">=</span> y_head <span class="op" style="color: #5E5E5E;">-</span> y_tail</span>
<span id="cb4-7"></span>
<span id="cb4-8">    arrow <span class="op" style="color: #5E5E5E;">=</span> mpatches.FancyArrowPatch(</span>
<span id="cb4-9">        (x_tail, y_tail), (x_head, y_head), mutation_scale<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, color<span class="op" style="color: #5E5E5E;">=</span>color, label<span class="op" style="color: #5E5E5E;">=</span>label</span>
<span id="cb4-10">    )</span>
<span id="cb4-11"></span>
<span id="cb4-12">    ax.add_patch(arrow)</span>
<span id="cb4-13">    ax.legend(bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">1.6</span>, <span class="dv" style="color: #AD0000;">1</span>), borderaxespad<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<p>Now some code to plot the vector corresponding to Ax</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">def</span> plot_transform(A, x):</span>
<span id="cb5-2">    Ax <span class="op" style="color: #5E5E5E;">=</span> A <span class="op" style="color: #5E5E5E;">@</span> x</span>
<span id="cb5-3">    fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb5-4">    plot_arrow(ax, x, <span class="st" style="color: #20794D;">"k"</span>, <span class="ss" style="color: #20794D;">f"Original (x) </span><span class="sc" style="color: #5E5E5E;">{</span>x<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb5-5">    plot_arrow(ax, Ax, <span class="st" style="color: #20794D;">"g"</span>, <span class="ss" style="color: #20794D;">f"Transformed (Ax) </span><span class="sc" style="color: #5E5E5E;">{</span>Ax<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb5-6">    plt.xlim((<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb5-7">    plt.ylim((<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb5-8">    plt.grid(alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>)</span>
<span id="cb5-9">    ax.set_aspect(<span class="st" style="color: #20794D;">"equal"</span>)</span>
<span id="cb5-10">    plt.title(<span class="ss" style="color: #20794D;">f"A = </span><span class="sc" style="color: #5E5E5E;">{</span>A<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb5-11">    sns.despine(left<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, bottom<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-12">    plt.tight_layout()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">plot_transform(np.array([[<span class="fl" style="color: #AD0000;">1.0</span>, <span class="fl" style="color: #AD0000;">1.0</span>], [<span class="fl" style="color: #AD0000;">1.0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.0</span>]]), [<span class="fl" style="color: #AD0000;">1.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>])</span>
<span id="cb6-2">plt.savefig(<span class="st" style="color: #20794D;">"Ax1.png"</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>In the plot above, we can see that the vector [1, 2] is transformed to [3, -1] via the matrix A.</p>
<p>Let us now write some code to create the rotation matrix and apply it on our input x</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">def</span> rot(angle):</span>
<span id="cb7-2">    theta <span class="op" style="color: #5E5E5E;">=</span> np.radians(angle)</span>
<span id="cb7-3">    c, s <span class="op" style="color: #5E5E5E;">=</span> np.cos(theta), np.sin(theta)</span>
<span id="cb7-4">    R <span class="op" style="color: #5E5E5E;">=</span> np.array(((c, <span class="op" style="color: #5E5E5E;">-</span>s), (s, c)))</span>
<span id="cb7-5">    <span class="cf" style="color: #003B4F;">return</span> np.<span class="bu" style="color: null;">round</span>(R, <span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">x <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">1.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>])</span>
<span id="cb8-2">plot_transform(rot(<span class="dv" style="color: #AD0000;">90</span>), x)</span>
<span id="cb8-3">plt.savefig(<span class="st" style="color: #20794D;">"Ax2"</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>As we can see above, creating the 90 degree rotation matrix indeed transforms our vector anticlockwise 90 degrees.</p>
<p>Now let us talk about matrices A that are low rank. I am creating a simple low rank matrix where the second row is some constant times the first row.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">def</span> plot_lr(x, slope):</span>
<span id="cb9-2">    low_rank <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">1.0</span>, <span class="fl" style="color: #AD0000;">2.0</span>])</span>
<span id="cb9-3">    low_rank <span class="op" style="color: #5E5E5E;">=</span> np.vstack((low_rank, slope <span class="op" style="color: #5E5E5E;">*</span> low_rank))</span>
<span id="cb9-4">    plot_transform(low_rank, x)</span>
<span id="cb9-5">    x_lin <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb9-6">    y <span class="op" style="color: #5E5E5E;">=</span> x_lin <span class="op" style="color: #5E5E5E;">*</span> slope</span>
<span id="cb9-7">    plt.plot(x_lin, y, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.4</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"y = </span><span class="sc" style="color: #5E5E5E;">{</span>slope<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">x"</span>)</span>
<span id="cb9-8">    plt.legend(bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">1.2</span>, <span class="dv" style="color: #AD0000;">1</span>), borderaxespad<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">plot_lr(x, <span class="fl" style="color: #AD0000;">1.01</span>)</span>
<span id="cb10-2">plt.tight_layout()</span>
<span id="cb10-3">plt.savefig(<span class="st" style="color: #20794D;">"lr-1.png"</span>, bbox_inches<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"tight"</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">plot_lr([<span class="fl" style="color: #AD0000;">1.0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.0</span>], <span class="fl" style="color: #AD0000;">1.01</span>)</span>
<span id="cb11-2">plt.tight_layout()</span>
<span id="cb11-3">plt.savefig(<span class="st" style="color: #20794D;">"lr-2.png"</span>, bbox_inches<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"tight"</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">plot_lr([<span class="fl" style="color: #AD0000;">0.5</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.7</span>], <span class="fl" style="color: #AD0000;">1.01</span>)</span>
<span id="cb12-2">plt.tight_layout()</span>
<span id="cb12-3">plt.savefig(<span class="st" style="color: #20794D;">"lr-3.png"</span>, bbox_inches<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"tight"</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">plot_lr([<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.0</span>, <span class="fl" style="color: #AD0000;">0.0</span>], <span class="fl" style="color: #AD0000;">1.01</span>)</span>
<span id="cb13-2">plt.tight_layout()</span>
<span id="cb13-3">plt.savefig(<span class="st" style="color: #20794D;">"lr-4.png"</span>, bbox_inches<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"tight"</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>To summarize</p>
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/lr-combined.png" class="img-fluid"></p>
<p>In the above plots we can see that changing our x to any vector in the 2d space leads to us to transformed vector not covering the whole 2d space, but on line in the 2d space. One can easily take this learning to higher dimensional matrices A.</p>


</section>
</section>
</section>
</section>

 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/lowrank-matrix.html</guid>
  <pubDate>Tue, 31 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/nipunbatra/ml2023/notebooks/posts/Ax-combined.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Some Python Utilities</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/python-utils.html</link>
  <description><![CDATA[ 



<section id="function-argument-unpacking" class="level4">
<h4 class="anchored" data-anchor-id="function-argument-unpacking">Function Argument Unpacking</h4>
<p>Reference: https://www.youtube.com/watch?v=YWY4BZi_o28</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> print_vec(x, y, z):</span>
<span id="cb1-2">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"[</span><span class="sc" style="color: #5E5E5E;">{</span>x<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> </span><span class="ch" style="color: #20794D;">\n</span><span class="sc" style="color: #5E5E5E;">{</span>y<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> </span><span class="ch" style="color: #20794D;">\n</span><span class="sc" style="color: #5E5E5E;">{</span>z<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">print_vec(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1 
2 
3]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">tuple_vec <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;">#print_vec(tuple_vec)</span></span>
<span id="cb4-3">print_vec(tuple_vec[<span class="dv" style="color: #AD0000;">0</span>], tuple_vec[<span class="dv" style="color: #AD0000;">1</span>], tuple_vec[<span class="dv" style="color: #AD0000;">2</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1 
0 
1]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">list_vec <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb6-2"></span>
<span id="cb6-3">print_vec(tuple_vec[<span class="dv" style="color: #AD0000;">0</span>], tuple_vec[<span class="dv" style="color: #AD0000;">1</span>], tuple_vec[<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb6-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"*"</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb6-5">print_vec(<span class="op" style="color: #5E5E5E;">*</span>tuple_vec)</span>
<span id="cb6-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"*"</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb6-7"></span>
<span id="cb6-8">print_vec(<span class="op" style="color: #5E5E5E;">*</span>list_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1 
0 
1]
********************
[1 
0 
1]
********************
[1 
0 
1]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">dictionary_vec <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"x"</span>: <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">"y"</span>: <span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">"z"</span>: <span class="dv" style="color: #AD0000;">1</span>}</span>
<span id="cb8-2">print_vec(<span class="op" style="color: #5E5E5E;">**</span>dictionary_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1 
0 
1]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">dictionary_vec <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"a"</span>: <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">"b"</span>: <span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">"c"</span>:<span class="dv" style="color: #AD0000;">1</span>}</span>
<span id="cb10-2">print_vec(<span class="op" style="color: #5E5E5E;">**</span>dictionary_vec)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>TypeError: print_vec() got an unexpected keyword argument 'a'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;">print</span>(<span class="op" style="color: #5E5E5E;">*</span>dictionary_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>a b c</code></pre>
</div>
</div>
</section>
<section id="zip" class="level4">
<h4 class="anchored" data-anchor-id="zip">Zip</h4>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">zip</span>([<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>], [<span class="st" style="color: #20794D;">'a'</span>, <span class="st" style="color: #20794D;">'b'</span>, <span class="st" style="color: #20794D;">'c'</span>], [<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>]))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>[(1, 'a', 7), (2, 'b', 8), (3, 'c', 9)]</code></pre>
</div>
</div>
</section>
<section id="itertools-product" class="level4">
<h4 class="anchored" data-anchor-id="itertools-product">Itertools Product</h4>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;">import</span> itertools</span>
<span id="cb16-2"><span class="bu" style="color: null;">list</span>(itertools.product([<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>], [<span class="st" style="color: #20794D;">'a'</span>, <span class="st" style="color: #20794D;">'b'</span>, <span class="st" style="color: #20794D;">'c'</span>], [<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>]))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>[(1, 'a', 7),
 (1, 'a', 8),
 (1, 'a', 9),
 (1, 'b', 7),
 (1, 'b', 8),
 (1, 'b', 9),
 (1, 'c', 7),
 (1, 'c', 8),
 (1, 'c', 9),
 (2, 'a', 7),
 (2, 'a', 8),
 (2, 'a', 9),
 (2, 'b', 7),
 (2, 'b', 8),
 (2, 'b', 9),
 (2, 'c', 7),
 (2, 'c', 8),
 (2, 'c', 9)]</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/python-utils.html</guid>
  <pubDate>Tue, 17 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Dataset splitting for machine learning</title>
  <dc:creator>Nipun Batra</dc:creator>
  <link>https://github.com/nipunbatra/ml2023/notebooks/posts/split.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Create a dataset with 3 features and 1000 samples for a classification problem</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(np.random.randn(<span class="dv" style="color: #AD0000;">1000</span>, <span class="dv" style="color: #AD0000;">3</span>), columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'A'</span>, <span class="st" style="color: #20794D;">'B'</span>, <span class="st" style="color: #20794D;">'C'</span>])</span>
<span id="cb2-4">df[<span class="st" style="color: #20794D;">'D'</span>] <span class="op" style="color: #5E5E5E;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.112981</td>
      <td>-0.033889</td>
      <td>0.348708</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.821601</td>
      <td>1.267423</td>
      <td>0.274915</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.148040</td>
      <td>-1.412712</td>
      <td>-0.271345</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.004766</td>
      <td>-1.209944</td>
      <td>0.122512</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.854442</td>
      <td>-0.559497</td>
      <td>-0.605376</td>
      <td>1</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>995</th>
      <td>0.161444</td>
      <td>-0.969567</td>
      <td>-2.079664</td>
      <td>0</td>
    </tr>
    <tr>
      <th>996</th>
      <td>1.615938</td>
      <td>0.219218</td>
      <td>-0.322223</td>
      <td>0</td>
    </tr>
    <tr>
      <th>997</th>
      <td>0.501970</td>
      <td>-0.874313</td>
      <td>1.571102</td>
      <td>1</td>
    </tr>
    <tr>
      <th>998</th>
      <td>0.386063</td>
      <td>-1.481215</td>
      <td>-1.974313</td>
      <td>1</td>
    </tr>
    <tr>
      <th>999</th>
      <td>0.468528</td>
      <td>1.060850</td>
      <td>0.612252</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>1000 rows × 4 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">X, y <span class="op" style="color: #5E5E5E;">=</span> df[[<span class="st" style="color: #20794D;">'A'</span>, <span class="st" style="color: #20794D;">'B'</span>, <span class="st" style="color: #20794D;">'C'</span>]], df[<span class="st" style="color: #20794D;">'D'</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">train_X, test_X <span class="op" style="color: #5E5E5E;">=</span> X[:<span class="dv" style="color: #AD0000;">800</span>], X[<span class="dv" style="color: #AD0000;">800</span>:]</span>
<span id="cb4-2">train_y, test_y <span class="op" style="color: #5E5E5E;">=</span> y[:<span class="dv" style="color: #AD0000;">800</span>], y[<span class="dv" style="color: #AD0000;">800</span>:]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">from</span> sklearn.tree <span class="im" style="color: #00769E;">import</span> DecisionTreeClassifier</span></code></pre></div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">dt <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier(max_depth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb6-2">dt.fit(train_X, train_y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>DecisionTreeClassifier(max_depth=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" checked=""><label for="sk-estimator-id-2" class="sk-toggleable__label sk-toggleable__label-arrow">DecisionTreeClassifier</label><div class="sk-toggleable__content"><pre>DecisionTreeClassifier(max_depth=2)</pre></div></div></div></div></div>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">from</span> sklearn <span class="im" style="color: #00769E;">import</span> tree</span>
<span id="cb7-2">tree.plot_tree(dt)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>[Text(0.5, 0.8333333333333334, 'X[0] &lt;= -0.17\ngini = 0.5\nsamples = 800\nvalue = [400, 400]'),
 Text(0.25, 0.5, 'X[0] &lt;= -0.307\ngini = 0.495\nsamples = 348\nvalue = [157, 191]'),
 Text(0.125, 0.16666666666666666, 'gini = 0.499\nsamples = 316\nvalue = [153, 163]'),
 Text(0.375, 0.16666666666666666, 'gini = 0.219\nsamples = 32\nvalue = [4, 28]'),
 Text(0.75, 0.5, 'X[2] &lt;= 1.656\ngini = 0.497\nsamples = 452\nvalue = [243, 209]'),
 Text(0.625, 0.16666666666666666, 'gini = 0.495\nsamples = 434\nvalue = [239, 195]'),
 Text(0.875, 0.16666666666666666, 'gini = 0.346\nsamples = 18\nvalue = [4, 14]')]</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/split_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">y_hat <span class="op" style="color: #5E5E5E;">=</span> dt.predict(test_X)</span>
<span id="cb9-2">pd.DataFrame({<span class="st" style="color: #20794D;">"y_true"</span>: test_y, <span class="st" style="color: #20794D;">"y_hat"</span>: y_hat})</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>y_true</th>
      <th>y_hat</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>800</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>801</th>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>802</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>803</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>804</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>995</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>996</th>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>997</th>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>998</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>999</th>
      <td>1</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>200 rows × 2 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;">from</span> sklearn.tree <span class="im" style="color: #00769E;">import</span> DecisionTreeClassifier</span>
<span id="cb10-2"></span>
<span id="cb10-3">train_scores <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb10-4">test_scores <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">20</span>):</span>
<span id="cb10-7">    dt <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier(max_depth<span class="op" style="color: #5E5E5E;">=</span>i)</span>
<span id="cb10-8">    dt.fit(train_X, train_y)</span>
<span id="cb10-9">    train_scores[i] <span class="op" style="color: #5E5E5E;">=</span> dt.score(train_X, train_y)</span>
<span id="cb10-10">    </span>
<span id="cb10-11">    test_scores[i] <span class="op" style="color: #5E5E5E;">=</span> dt.score(test_X, test_y)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">scores_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">'train'</span>: train_scores, <span class="st" style="color: #20794D;">'test'</span>: test_scores})</span>
<span id="cb11-2">scores_df.plot()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>&lt;AxesSubplot:&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://github.com/nipunbatra/ml2023/notebooks/posts/split_files/figure-html/cell-11-output-2.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://github.com/nipunbatra/ml2023/notebooks/posts/split.html</guid>
  <pubDate>Tue, 17 Jan 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
