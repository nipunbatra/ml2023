[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ES 654 Machine Learning",
    "section": "",
    "text": "Summary\n\nInstructor: Nipun Batra (nipun.batra@iitgn.ac.in)\nTeaching Assistants: Zeel B Patel, Shriraj Sawant, Shrutimoy, Sarth Dubey, Hitarth Gandhi, Saagar Parikh, Eshan Gujarathi, Gautam Vashishta, Aadesh Desai\nCourse Timings: Tuesday, Thursday 330-450 PM IST in 1/101\nSlack Invite\n\n\n\nPre-requisites:\n\nGood experience in Python programming\nProbability\nLinear Algebra\n\nCourse preparation: Students are encouraged to study some of the following to refresh their understanding of some of the prerequisities before the course formally begins.\n\nFirst four chapters of the Python Data Science handbook\nSome material on Linear Algebra\nKhan academy course on Stats and Probability\n\n\n\nReference textbooks:\n\nGareth James, Daniela Witten, Trevor Hastie and Robert Tibshirani. An Introduction to Statistical Learning with Applications in R\nChristopher Bishop. Pattern Recognition and Machine Learning. Springer, 2006.[Freely available online]\nFriedman J, Hastie T, Tibshirani R. The elements of statistical learning. New York, NY, USA:: Springer series in statistics; 2001.[Freely available online]\nDuda RO, Hart PE, Stork DG. Pattern classification. John Wiley & Sons; 2012 Nov 9.\nMitchell TM. Machine learning. 1997. Burr Ridge, IL: McGraw Hill. 1997;45(37):870-7.\nMurphy, K. Machine Learning: A Probabilistic Perspective. MIT Press\nGoodfellow I, Bengio Y, Courville A, Bengio Y. Deep learning. Cambridge: MIT press; 2016 Nov 18.[Freely available online]\n\n\n\nSome other ML courses\n\nNPTEL course by Balaram Ravindran\nCMU course by Tom Mitchell and Maria-Florina Balcan\nCoursera ML course by Andrew Ng\nFAST.ai course on ML\nPractical deep learning for coders by FAST.ai\nCourse by Alex Ihler, UCI"
  },
  {
    "objectID": "notebooks/index.html",
    "href": "notebooks/index.html",
    "title": "Notebook",
    "section": "",
    "text": "Grid Search\n\n\n\n\n\nGrid Search\n\n\n\n\n\n\nJan 17, 2023\n\n\nNipun Batra\n\n\n\n\n\n\n\n\nSome Python Utilities\n\n\n\n\n\nPython Utilities\n\n\n\n\n\n\nJan 17, 2023\n\n\nNipun Batra\n\n\n\n\n\n\n\n\nPandas tips\n\n\n\n\n\nPandas groupby\n\n\n\n\n\n\nJan 12, 2023\n\n\nNipun Batra\n\n\n\n\n\n\n\n\nMisc tips\n\n\n\n\n\nMisc tips\n\n\n\n\n\n\nJan 10, 2023\n\n\nNipun Batra\n\n\n\n\n\n\n\n\nMisc tips\n\n\n\n\n\nMisc tips\n\n\n\n\n\n\nJan 10, 2023\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "notebooks/posts/pivot-cross.html",
    "href": "notebooks/posts/pivot-cross.html",
    "title": "Pandas tips",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\nDataset creation\n\n# Create a DataFrame for whether or not a person plays tennis. \n# It has discrete features and 14 rows.\n\ndf = pd.DataFrame({\n    'Outlook': ['Sunny', 'Sunny', 'Overcast', 'Rain', 'Rain', 'Rain', 'Overcast', 'Sunny', 'Sunny', 'Rain', 'Sunny', 'Overcast', 'Overcast', 'Rain'],\n    'Temperature': ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool', 'Mild', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild'],\n    'Humidity': ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'High'],\n    'Wind': ['Weak', 'Strong', 'Weak', 'Weak', 'Weak', 'Strong', 'Strong', 'Weak', 'Weak', 'Weak', 'Strong', 'Strong', 'Weak', 'Strong'],\n    'PlayTennis': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']\n})\n\n\n\nCounting values of outcome variable (useful for calculating entropy)\n\nser = df['PlayTennis'].value_counts()\nser\n\nYes    9\nNo     5\nName: PlayTennis, dtype: int64\n\n\n\n\nUsing cross tab to quickly capture the relationship between two variables\n\ndf_out = pd.crosstab(df['Outlook'], df['PlayTennis'])\ndf_out\n\n\n\n\n\n  \n    \n      PlayTennis\n      No\n      Yes\n    \n    \n      Outlook\n      \n      \n    \n  \n  \n    \n      Overcast\n      0\n      4\n    \n    \n      Rain\n      2\n      3\n    \n    \n      Sunny\n      3\n      2\n    \n  \n\n\n\n\n\ndf_out.index, df_out.columns\n\n(Index(['Overcast', 'Rain', 'Sunny'], dtype='object', name='Outlook'),\n Index(['No', 'Yes'], dtype='object', name='PlayTennis'))\n\n\n\ne = df_out.sum(axis=1)\ne\n\nOutlook\nOvercast    4\nRain        5\nSunny       5\ndtype: int64\n\n\n\n# Find the fraction of each row that is a 'Yes' and 'No' for PlayTennis\ndf_out['Yes'] = df_out['Yes'] / e\ndf_out['No'] = df_out['No'] / e\ndf_out\n\n\n\n\n\n  \n    \n      PlayTennis\n      No\n      Yes\n    \n    \n      Outlook\n      \n      \n    \n  \n  \n    \n      Overcast\n      0.0\n      1.0\n    \n    \n      Rain\n      0.4\n      0.6\n    \n    \n      Sunny\n      0.6\n      0.4\n    \n  \n\n\n\n\n\n\nMore efficient cross tabulation (using normalize)\n\npd.crosstab(df['Outlook'], df['PlayTennis'], normalize='index')\n\n\n\n\n\n  \n    \n      PlayTennis\n      No\n      Yes\n    \n    \n      Outlook\n      \n      \n    \n  \n  \n    \n      Overcast\n      0.0\n      1.0\n    \n    \n      Rain\n      0.4\n      0.6\n    \n    \n      Sunny\n      0.6\n      0.4\n    \n  \n\n\n\n\n\n\nUsing pd.groupby()\n\ndf.groupby([\"Outlook\"]).groups\n\n{'Overcast': [2, 6, 11, 12], 'Rain': [3, 4, 5, 9, 13], 'Sunny': [0, 1, 7, 8, 10]}\n\n\n\ndf.groupby([\"Outlook\"]).get_group(\"Sunny\")\n\n\n\n\n\n  \n    \n      \n      Outlook\n      Temperature\n      Humidity\n      Wind\n      PlayTennis\n    \n  \n  \n    \n      0\n      Sunny\n      Hot\n      High\n      Weak\n      No\n    \n    \n      1\n      Sunny\n      Hot\n      High\n      Strong\n      No\n    \n    \n      7\n      Sunny\n      Mild\n      High\n      Weak\n      No\n    \n    \n      8\n      Sunny\n      Cool\n      Normal\n      Weak\n      Yes\n    \n    \n      10\n      Sunny\n      Mild\n      Normal\n      Strong\n      Yes\n    \n  \n\n\n\n\n\ndf.groupby([\"Outlook\"]).get_group(\"Sunny\")[\"PlayTennis\"]\n\n0      No\n1      No\n7      No\n8     Yes\n10    Yes\nName: PlayTennis, dtype: object\n\n\n\ndf.groupby([\"Outlook\"]).get_group(\"Sunny\")[\"PlayTennis\"].value_counts()\n\nNo     3\nYes    2\nName: PlayTennis, dtype: int64\n\n\n\ndf.groupby([\"Outlook\", \"PlayTennis\"]).groups\n\n{('Overcast', 'Yes'): [2, 6, 11, 12], ('Rain', 'No'): [5, 13], ('Rain', 'Yes'): [3, 4, 9], ('Sunny', 'No'): [0, 1, 7], ('Sunny', 'Yes'): [8, 10]}\n\n\n\ndf.groupby([\"Outlook\", \"PlayTennis\"]).get_group((\"Sunny\", \"Yes\"))\n\n\n\n\n\n  \n    \n      \n      Outlook\n      Temperature\n      Humidity\n      Wind\n      PlayTennis\n    \n  \n  \n    \n      8\n      Sunny\n      Cool\n      Normal\n      Weak\n      Yes\n    \n    \n      10\n      Sunny\n      Mild\n      Normal\n      Strong\n      Yes\n    \n  \n\n\n\n\n\ndf.groupby([\"Outlook\", \"PlayTennis\"]).size()\n\nOutlook   PlayTennis\nOvercast  Yes           4\nRain      No            2\n          Yes           3\nSunny     No            3\n          Yes           2\ndtype: int64\n\n\n\ndf.groupby([\"Outlook\", \"PlayTennis\"]).size().index\n\nMultiIndex([('Overcast', 'Yes'),\n            (    'Rain',  'No'),\n            (    'Rain', 'Yes'),\n            (   'Sunny',  'No'),\n            (   'Sunny', 'Yes')],\n           names=['Outlook', 'PlayTennis'])\n\n\n\ndf.groupby([\"Outlook\", \"PlayTennis\"]).size().unstack()\n\n\n\n\n\n  \n    \n      PlayTennis\n      No\n      Yes\n    \n    \n      Outlook\n      \n      \n    \n  \n  \n    \n      Overcast\n      NaN\n      4.0\n    \n    \n      Rain\n      2.0\n      3.0\n    \n    \n      Sunny\n      3.0\n      2.0\n    \n  \n\n\n\n\n\ndf.groupby([\"Outlook\", \"PlayTennis\"]).size().unstack(fill_value=0)\n\n\n\n\n\n  \n    \n      PlayTennis\n      No\n      Yes\n    \n    \n      Outlook\n      \n      \n    \n  \n  \n    \n      Overcast\n      0\n      4\n    \n    \n      Rain\n      2\n      3\n    \n    \n      Sunny\n      3\n      2\n    \n  \n\n\n\n\n\n\nUsing pd.pivot_table\n\npivot_table = df.pivot_table(index='Outlook', columns='PlayTennis', aggfunc='size', fill_value=0)\npivot_table\n\n\n\n\n\n  \n    \n      PlayTennis\n      No\n      Yes\n    \n    \n      Outlook\n      \n      \n    \n  \n  \n    \n      Overcast\n      0\n      4\n    \n    \n      Rain\n      2\n      3\n    \n    \n      Sunny\n      3\n      2\n    \n  \n\n\n\n\n\ndf_out.plot(kind='bar', stacked=True)\n\n<AxesSubplot:xlabel='Outlook'>\n\n\n\n\n\n\ndf_out.plot(kind='bar', stacked=False)\n\n<AxesSubplot:xlabel='Outlook'>"
  },
  {
    "objectID": "notebooks/posts/split.html",
    "href": "notebooks/posts/split.html",
    "title": "Misc tips",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\n\n\n# Create a dataset with 3 features and 1000 samples for a classification problem\n\ndf = pd.DataFrame(np.random.randn(1000, 3), columns=['A', 'B', 'C'])\ndf['D'] = np.random.randint(0, 2, 1000)\n\ndf\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      0\n      0.112981\n      -0.033889\n      0.348708\n      1\n    \n    \n      1\n      1.821601\n      1.267423\n      0.274915\n      1\n    \n    \n      2\n      0.148040\n      -1.412712\n      -0.271345\n      1\n    \n    \n      3\n      0.004766\n      -1.209944\n      0.122512\n      1\n    \n    \n      4\n      0.854442\n      -0.559497\n      -0.605376\n      1\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      995\n      0.161444\n      -0.969567\n      -2.079664\n      0\n    \n    \n      996\n      1.615938\n      0.219218\n      -0.322223\n      0\n    \n    \n      997\n      0.501970\n      -0.874313\n      1.571102\n      1\n    \n    \n      998\n      0.386063\n      -1.481215\n      -1.974313\n      1\n    \n    \n      999\n      0.468528\n      1.060850\n      0.612252\n      1\n    \n  \n\n1000 rows × 4 columns\n\n\n\n\nX, y = df[['A', 'B', 'C']], df['D']\n\n\ntrain_X, test_X = X[:800], X[800:]\ntrain_y, test_y = y[:800], y[800:]\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\n\ndt = DecisionTreeClassifier(max_depth=2)\ndt.fit(train_X, train_y)\n\nDecisionTreeClassifier(max_depth=2)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.DecisionTreeClassifierDecisionTreeClassifier(max_depth=2)\n\n\n\nfrom sklearn import tree\ntree.plot_tree(dt)\n\n[Text(0.5, 0.8333333333333334, 'X[0] <= -0.17\\ngini = 0.5\\nsamples = 800\\nvalue = [400, 400]'),\n Text(0.25, 0.5, 'X[0] <= -0.307\\ngini = 0.495\\nsamples = 348\\nvalue = [157, 191]'),\n Text(0.125, 0.16666666666666666, 'gini = 0.499\\nsamples = 316\\nvalue = [153, 163]'),\n Text(0.375, 0.16666666666666666, 'gini = 0.219\\nsamples = 32\\nvalue = [4, 28]'),\n Text(0.75, 0.5, 'X[2] <= 1.656\\ngini = 0.497\\nsamples = 452\\nvalue = [243, 209]'),\n Text(0.625, 0.16666666666666666, 'gini = 0.495\\nsamples = 434\\nvalue = [239, 195]'),\n Text(0.875, 0.16666666666666666, 'gini = 0.346\\nsamples = 18\\nvalue = [4, 14]')]\n\n\n\n\n\n\ny_hat = dt.predict(test_X)\npd.DataFrame({\"y_true\": test_y, \"y_hat\": y_hat})\n\n\n\n\n\n  \n    \n      \n      y_true\n      y_hat\n    \n  \n  \n    \n      800\n      0\n      1\n    \n    \n      801\n      0\n      0\n    \n    \n      802\n      1\n      1\n    \n    \n      803\n      1\n      1\n    \n    \n      804\n      0\n      1\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      995\n      0\n      1\n    \n    \n      996\n      0\n      0\n    \n    \n      997\n      1\n      0\n    \n    \n      998\n      1\n      1\n    \n    \n      999\n      1\n      1\n    \n  \n\n200 rows × 2 columns\n\n\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\ntrain_scores = {}\ntest_scores = {}\n\nfor i in range(1, 20):\n    dt = DecisionTreeClassifier(max_depth=i)\n    dt.fit(train_X, train_y)\n    train_scores[i] = dt.score(train_X, train_y)\n    \n    test_scores[i] = dt.score(test_X, test_y)\n\n\nscores_df = pd.DataFrame({'train': train_scores, 'test': test_scores})\nscores_df.plot()\n\n<AxesSubplot:>\n\n\n\n\n\n\n\ndf = pd.DataFrame(np.random.randn(50, 3), columns=['A', 'B', 'C'])\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n    \n  \n  \n    \n      0\n      -0.606795\n      0.603885\n      -0.665010\n    \n    \n      1\n      0.590053\n      0.412133\n      -0.866187\n    \n    \n      2\n      -0.537821\n      0.563512\n      -0.496078\n    \n    \n      3\n      0.968567\n      -0.664447\n      0.511859\n    \n    \n      4\n      0.071371\n      -1.117417\n      -0.187521\n    \n    \n      5\n      1.022793\n      0.623958\n      0.938148\n    \n    \n      6\n      1.472920\n      -0.118809\n      0.983386\n    \n    \n      7\n      -1.376462\n      -0.206712\n      1.108670\n    \n    \n      8\n      0.840399\n      1.171411\n      0.410430\n    \n    \n      9\n      -0.299937\n      -0.882552\n      -0.860850\n    \n    \n      10\n      2.544334\n      -0.301064\n      0.115521\n    \n    \n      11\n      -2.316799\n      -0.630088\n      0.572983\n    \n    \n      12\n      0.025732\n      -0.759950\n      0.632044\n    \n    \n      13\n      -0.326920\n      0.275182\n      -0.554632\n    \n    \n      14\n      -1.165008\n      -0.226062\n      0.600481\n    \n    \n      15\n      0.002296\n      1.438975\n      -0.744245\n    \n    \n      16\n      -0.692646\n      -0.669372\n      -0.605073\n    \n    \n      17\n      -1.321740\n      -0.444826\n      -1.467668\n    \n    \n      18\n      2.250800\n      0.726728\n      -1.210004\n    \n    \n      19\n      0.650150\n      2.088973\n      -0.132469\n    \n    \n      20\n      0.871767\n      1.061867\n      0.893009\n    \n    \n      21\n      -1.111509\n      0.943877\n      0.107494\n    \n    \n      22\n      -1.307825\n      -1.154533\n      0.769019\n    \n    \n      23\n      0.662569\n      1.301350\n      2.730599\n    \n    \n      24\n      0.056357\n      1.093952\n      -2.472302\n    \n    \n      25\n      -0.510605\n      2.275169\n      0.790699\n    \n    \n      26\n      -0.665979\n      0.263746\n      0.427778\n    \n    \n      27\n      -0.229247\n      -0.302009\n      0.838662\n    \n    \n      28\n      -0.397009\n      -0.384748\n      1.110741\n    \n    \n      29\n      0.867817\n      -0.061789\n      0.698880\n    \n    \n      30\n      1.755470\n      -0.924920\n      1.280419\n    \n    \n      31\n      -1.404238\n      -0.000453\n      0.563271\n    \n    \n      32\n      0.982608\n      -0.198800\n      0.178124\n    \n    \n      33\n      0.859206\n      0.689893\n      -0.131601\n    \n    \n      34\n      0.987187\n      -0.739007\n      -1.186841\n    \n    \n      35\n      -0.535150\n      -0.324964\n      -0.457249\n    \n    \n      36\n      -1.315508\n      -0.457650\n      0.477115\n    \n    \n      37\n      -1.009071\n      0.438258\n      0.550145\n    \n    \n      38\n      1.682689\n      0.918549\n      1.608067\n    \n    \n      39\n      -0.395561\n      0.273146\n      -1.344895\n    \n    \n      40\n      1.066968\n      1.422297\n      -1.006022\n    \n    \n      41\n      -0.467694\n      -1.390412\n      -0.856720\n    \n    \n      42\n      0.295047\n      2.054184\n      0.726142\n    \n    \n      43\n      1.683840\n      -2.310817\n      -1.063813\n    \n    \n      44\n      0.749187\n      0.717967\n      1.761293\n    \n    \n      45\n      1.726590\n      -0.943809\n      0.987574\n    \n    \n      46\n      1.810616\n      -0.665637\n      -1.755620\n    \n    \n      47\n      -0.476114\n      -1.251142\n      -1.128895\n    \n    \n      48\n      -0.977472\n      0.182898\n      -1.632349\n    \n    \n      49\n      0.476070\n      -1.063004\n      0.593864\n    \n  \n\n\n\n\n\nn = 100\nk = 20\nm = 50\n\nnp.random.seed(0)\na = np.random.randn(n, k)\nb = np.random.randn(k, m)\na.shape, b.shape\n\n((100, 20), (20, 50))\n\n\n\na_list_of_list = a.tolist()\na_list_of_list[0]\n\nlist\n\n\n\n\"list\" in dir(a)[:]\n\nFalse\n\n\n\nimport rich\nrich.inspect(a.tolist, methods=True, all=True)\n\n╭──────────────────────── <built-in method tolist of numpy.ndarray object at 0x164cbb8d0> ────────────────────────╮\n│ def ndarray.tolist(...)                                                                                         │\n│                                                                                                                 │\n│ a.tolist()                                                                                                      │\n│                                                                                                                 │\n│            __doc__ = \"a.tolist()\\n\\n    Return the array as an ``a.ndim``-levels deep nested list of Python     │\n│                      scalars.\\n\\n    Return a copy of the array data as a (nested) Python list.\\n    Data items │\n│                      are converted to the nearest compatible builtin Python type, via\\n    the                  │\n│                      `~numpy.ndarray.item` function.\\n\\n    If ``a.ndim`` is 0, then since the depth of the     │\n│                      nested list is 0, it will\\n    not be a list at all, but a simple Python scalar.\\n\\n       │\n│                      Parameters\\n    ----------\\n    none\\n\\n    Returns\\n    -------\\n    y : object, or list  │\n│                      of object, or list of list of object, or ...\\n        The possibly nested list of array    │\n│                      elements.\\n\\n    Notes\\n    -----\\n    The array may be recreated via ``a =                │\n│                      np.array(a.tolist())``, although this\\n    may sometimes lose precision.\\n\\n    Examples\\n │\n│                      --------\\n    For a 1D array, ``a.tolist()`` is almost the same as ``list(a)``,\\n          │\n│                      except that ``tolist`` changes numpy scalars to Python scalars:\\n\\n    >>> a =             │\n│                      np.uint32([1, 2])\\n    >>> a_list = list(a)\\n    >>> a_list\\n    [1, 2]\\n    >>>           │\n│                      type(a_list[0])\\n    <class 'numpy.uint32'>\\n    >>> a_tolist = a.tolist()\\n    >>>        │\n│                      a_tolist\\n    [1, 2]\\n    >>> type(a_tolist[0])\\n    <class 'int'>\\n\\n    Additionally,    │\n│                      for a 2D array, ``tolist`` applies recursively:\\n\\n    >>> a = np.array([[1, 2], [3,       │\n│                      4]])\\n    >>> list(a)\\n    [array([1, 2]), array([3, 4])]\\n    >>> a.tolist()\\n    [[1,    │\n│                      2], [3, 4]]\\n\\n    The base case for this recursion is a 0D array:\\n\\n    >>> a =          │\n│                      np.array(1)\\n    >>> list(a)\\n    Traceback (most recent call last):\\n      ...\\n          │\n│                      TypeError: iteration over a 0-d array\\n    >>> a.tolist()\\n    1\"                          │\n│         __module__ = None                                                                                       │\n│           __name__ = 'tolist'                                                                                   │\n│       __qualname__ = 'ndarray.tolist'                                                                           │\n│           __self__ = array([[ 1.76405235e+00,  4.00157208e-01,  9.78737984e-01, ...,                            │\n│                              -2.05158264e-01,  3.13067702e-01, -8.54095739e-01],                                │\n│                             [-2.55298982e+00,  6.53618595e-01,  8.64436199e-01, ...,                            │\n│                               1.20237985e+00, -3.87326817e-01, -3.02302751e-01],                                │\n│                             [-1.04855297e+00, -1.42001794e+00, -1.70627019e+00, ...,                            │\n│                               3.02471898e-01, -6.34322094e-01, -3.62741166e-01],                                │\n│                             ...,                                                                                │\n│                             [ 8.73311836e-01,  1.19973618e+00,  4.56153036e-01, ...,                            │\n│                              -1.24021634e+00,  9.00054243e-01,  1.80224223e+00],                                │\n│                             [-2.08285103e-01,  1.57437124e+00,  1.98989494e-01, ...,                            │\n│                               4.32837621e-01, -8.08717532e-01, -1.10412399e+00],                                │\n│                             [-7.89102180e-01,  1.24845579e-03, -1.59939788e-01, ...,                            │\n│                               1.58433847e-01, -1.14190142e+00, -1.31097037e+00]])                               │\n│ __text_signature__ = None                                                                                       │\n│           __call__ = def __call__(*args, **kwargs): Call self as a function.                                    │\n│          __class__ = class __class__():                                                                         │\n│        __delattr__ = def __delattr__(name, /): Implement delattr(self, name).                                   │\n│            __dir__ = def __dir__(): Default dir() implementation.                                               │\n│             __eq__ = def __eq__(value, /): Return self==value.                                                  │\n│         __format__ = def __format__(format_spec, /): Default object formatter.                                  │\n│             __ge__ = def __ge__(value, /): Return self>=value.                                                  │\n│   __getattribute__ = def __getattribute__(name, /): Return getattr(self, name).                                 │\n│             __gt__ = def __gt__(value, /): Return self>value.                                                   │\n│           __hash__ = def __hash__(): Return hash(self).                                                         │\n│           __init__ = def __init__(*args, **kwargs): Initialize self.  See help(type(self)) for accurate         │\n│                      signature.                                                                                 │\n│  __init_subclass__ = def __init_subclass__(...) This method is called when a class is subclassed.               │\n│             __le__ = def __le__(value, /): Return self<=value.                                                  │\n│             __lt__ = def __lt__(value, /): Return self<value.                                                   │\n│             __ne__ = def __ne__(value, /): Return self!=value.                                                  │\n│            __new__ = def __new__(*args, **kwargs): Create and return a new object.  See help(type) for accurate │\n│                      signature.                                                                                 │\n│         __reduce__ = def __reduce__(...) Helper for pickle.                                                     │\n│      __reduce_ex__ = def __reduce_ex__(protocol, /): Helper for pickle.                                         │\n│           __repr__ = def __repr__(): Return repr(self).                                                         │\n│        __setattr__ = def __setattr__(name, value, /): Implement setattr(self, name, value).                     │\n│         __sizeof__ = def __sizeof__(): Size of object in memory, in bytes.                                      │\n│            __str__ = def __str__(): Return str(self).                                                           │\n│   __subclasshook__ = def __subclasshook__(...) Abstract classes can override this to customize issubclass().    │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\nlambda x: np.power(x, 3)\n\n\ndef f(x):\n    return np.power(x, 3)\n\n\nd = {\n    r\"$\\sin(x)$\": np.sin,\n    r\"$\\log(x)$\": np.log,\n    r\"$\\frac{sin(x)}{x}$\": lambda x: np.sin(x) / x,\n    r\"$x^3$\": lambda x: np.power(x, 3),\n}\n\n\nd\n\n{'$\\\\sin(x)$': <ufunc 'sin'>,\n '$\\\\log(x)$': <ufunc 'log'>,\n '$\\\\frac{sin(x)}{x}$': <function __main__.<lambda>(x)>,\n '$x^3$': <function __main__.<lambda>(x)>}\n\n\n\nx = np.arange(0.005, 10.0, 0.005)\n\n\ne = {k: v(x) for k, v in d.items()}\n\n\ne\n\n{'$\\\\sin(x)$': array([ 0.00499998,  0.00999983,  0.01499944, ..., -0.53137431,\n        -0.53560333, -0.53981897]),\n '$\\\\log(x)$': array([-5.29831737, -4.60517019, -4.19970508, ...,  2.30108397,\n         2.30158459,  2.30208497]),\n '$\\\\frac{sin(x)}{x}$': array([ 0.99999583,  0.99998333,  0.9999625 , ..., -0.05321726,\n        -0.05361395, -0.0540089 ]),\n '$x^3$': array([1.25000000e-07, 1.00000000e-06, 3.37500000e-06, ...,\n        9.95506747e+02, 9.97002999e+02, 9.98500750e+02])}\n\n\n\ndf = pd.DataFrame(e, index=x)\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      $\\sin(x)$\n      $\\log(x)$\n      $\\frac{sin(x)}{x}$\n      $x^3$\n    \n  \n  \n    \n      0.005\n      0.005000\n      -5.298317\n      0.999996\n      1.250000e-07\n    \n    \n      0.010\n      0.010000\n      -4.605170\n      0.999983\n      1.000000e-06\n    \n    \n      0.015\n      0.014999\n      -4.199705\n      0.999963\n      3.375000e-06\n    \n    \n      0.020\n      0.019999\n      -3.912023\n      0.999933\n      8.000000e-06\n    \n    \n      0.025\n      0.024997\n      -3.688879\n      0.999896\n      1.562500e-05\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      9.975\n      -0.522877\n      2.300082\n      -0.052419\n      9.925187e+02\n    \n    \n      9.980\n      -0.527132\n      2.300583\n      -0.052819\n      9.940120e+02\n    \n    \n      9.985\n      -0.531374\n      2.301084\n      -0.053217\n      9.955067e+02\n    \n    \n      9.990\n      -0.535603\n      2.301585\n      -0.053614\n      9.970030e+02\n    \n    \n      9.995\n      -0.539819\n      2.302085\n      -0.054009\n      9.985007e+02\n    \n  \n\n1999 rows × 4 columns\n\n\n\n\ndf.plot()\n\n<AxesSubplot:>\n\n\n\n\n\n\ndf.plot(subplots=True)\n\narray([<AxesSubplot:>, <AxesSubplot:>, <AxesSubplot:>, <AxesSubplot:>],\n      dtype=object)\n\n\n\n\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      $\\sin$\n      log\n      $\\frac{sin(x)}{x}$\n      x^3\n    \n  \n  \n    \n      0.005\n      0.005000\n      -5.298317\n      0.999996\n      1.250000e-07\n    \n    \n      0.010\n      0.010000\n      -4.605170\n      0.999983\n      1.000000e-06\n    \n    \n      0.015\n      0.014999\n      -4.199705\n      0.999963\n      3.375000e-06\n    \n    \n      0.020\n      0.019999\n      -3.912023\n      0.999933\n      8.000000e-06\n    \n    \n      0.025\n      0.024997\n      -3.688879\n      0.999896\n      1.562500e-05\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      9.975\n      -0.522877\n      2.300082\n      -0.052419\n      9.925187e+02\n    \n    \n      9.980\n      -0.527132\n      2.300583\n      -0.052819\n      9.940120e+02\n    \n    \n      9.985\n      -0.531374\n      2.301084\n      -0.053217\n      9.955067e+02\n    \n    \n      9.990\n      -0.535603\n      2.301585\n      -0.053614\n      9.970030e+02\n    \n    \n      9.995\n      -0.539819\n      2.302085\n      -0.054009\n      9.985007e+02\n    \n  \n\n1999 rows × 4 columns\n\n\n\n\n((df - df.min(axis=0)) / (df.max(axis=0) - df.min(axis=0))).plot()\n\n<AxesSubplot:>\n\n\n\n\n\n\ndf = pd.DataFrame(np.random.randn(1000, 5),\n                  columns=\"a,b,c,d,e\".split(\",\"))\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n      e\n    \n  \n  \n    \n      0\n      1.593274\n      0.568722\n      -0.114487\n      0.251630\n      -1.210856\n    \n    \n      1\n      -0.393734\n      0.085253\n      0.099422\n      -1.530616\n      0.327623\n    \n    \n      2\n      0.279196\n      -0.377051\n      0.004175\n      -1.483492\n      -1.479796\n    \n    \n      3\n      0.134687\n      -0.667723\n      -0.011556\n      0.839491\n      -0.173930\n    \n    \n      4\n      -2.810668\n      -0.150654\n      -0.481044\n      -0.234694\n      0.899731\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      995\n      -0.837658\n      1.315288\n      -0.364523\n      1.993571\n      1.584878\n    \n    \n      996\n      -2.104663\n      -2.553118\n      -1.242666\n      0.201987\n      -0.305332\n    \n    \n      997\n      -1.195587\n      -1.577903\n      0.849912\n      0.327590\n      -0.001670\n    \n    \n      998\n      -0.035563\n      -0.489252\n      1.930498\n      -0.262645\n      0.825932\n    \n    \n      999\n      -0.643267\n      -0.828981\n      -0.202735\n      -0.257866\n      0.070815\n    \n  \n\n1000 rows × 5 columns\n\n\n\n\ndf = df.assign(f=df.sum(axis=1))\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n      e\n      f\n    \n  \n  \n    \n      0\n      1.593274\n      0.568722\n      -0.114487\n      0.251630\n      -1.210856\n      1.088284\n    \n    \n      1\n      -0.393734\n      0.085253\n      0.099422\n      -1.530616\n      0.327623\n      -1.412052\n    \n    \n      2\n      0.279196\n      -0.377051\n      0.004175\n      -1.483492\n      -1.479796\n      -3.056967\n    \n    \n      3\n      0.134687\n      -0.667723\n      -0.011556\n      0.839491\n      -0.173930\n      0.120969\n    \n    \n      4\n      -2.810668\n      -0.150654\n      -0.481044\n      -0.234694\n      0.899731\n      -2.777329\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      995\n      -0.837658\n      1.315288\n      -0.364523\n      1.993571\n      1.584878\n      3.691555\n    \n    \n      996\n      -2.104663\n      -2.553118\n      -1.242666\n      0.201987\n      -0.305332\n      -6.003792\n    \n    \n      997\n      -1.195587\n      -1.577903\n      0.849912\n      0.327590\n      -0.001670\n      -1.597657\n    \n    \n      998\n      -0.035563\n      -0.489252\n      1.930498\n      -0.262645\n      0.825932\n      1.968971\n    \n    \n      999\n      -0.643267\n      -0.828981\n      -0.202735\n      -0.257866\n      0.070815\n      -1.862035\n    \n  \n\n1000 rows × 6 columns\n\n\n\n\ndf.query(\"f > 5\")[\"f\"].std()\n\n0.6609257763922614\n\n\n\ndf.query(\"f <= 5\")[\"f\"].std()\n\n2.1891090850524444\n\n\n\n\"tolist\" in dir(df)\n\nFalse\n\n\n\ndef search(obj, query):\n    import re\n\n    return list(filter(lambda x: re.search(query, x), dir(obj)))\n\n\nsearch(a, \"lis\")\n\n['tolist']\n\n\n\nimport numpy as np\nimport pandas as pd\n\n\ndef search(obj, query):\n    import re\n    from rich import inspect\n    from rich.pretty import Pretty\n    from rich.panel import Panel\n\n    z = list(filter(lambda x: re.search(query, x), dir(obj)))\n    p = Panel(Pretty(\"a\"), title=f\"Searching for `{query}`\")\n    # return p\n    ps = []\n    for q in z:\n        ps.append(Panel(Pretty(inspect(getattr(obj, q), methods=True, docs=True))))\n\n\nsearch(np.random, \"normal\")\n\n╭─ <built-in method lognormal of numpy.random.mtrand.RandomState object at 0x10c627840> ─╮\n│ def RandomState.lognormal(...)                                                         │\n│                                                                                        │\n│ lognormal(mean=0.0, sigma=1.0, size=None)                                              │\n│                                                                                        │\n│ 29 attribute(s) not shown. Run inspect(inspect) for options.                           │\n╰────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n╭─ <built-in method multivariate_normal of numpy.random.mtrand.RandomState object at 0x10c627840> ─╮\n│ def RandomState.multivariate_normal(...)                                                         │\n│                                                                                                  │\n│ multivariate_normal(mean, cov, size=None, check_valid='warn', tol=1e-8)                          │\n│                                                                                                  │\n│ 29 attribute(s) not shown. Run inspect(inspect) for options.                                     │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n╭─ <built-in method normal of numpy.random.mtrand.RandomState object at 0x10c627840> ─╮\n│ def RandomState.normal(...)                                                         │\n│                                                                                     │\n│ normal(loc=0.0, scale=1.0, size=None)                                               │\n│                                                                                     │\n│ 29 attribute(s) not shown. Run inspect(inspect) for options.                        │\n╰─────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n╭─ <built-in method standard_normal of numpy.random.mtrand.RandomState object at 0x10c627840> ─╮\n│ def RandomState.standard_normal(...)                                                         │\n│                                                                                              │\n│ standard_normal(size=None)                                                                   │\n│                                                                                              │\n│ 29 attribute(s) not shown. Run inspect(inspect) for options.                                 │\n╰──────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\ngetattr(pd.DataFrame().values, \"tolist\")\n\n<function ndarray.tolist>\n\n\n\npd.DataFrame.to\n\n\n\n\n\n  \n    \n      \n    \n  \n  \n  \n\n\n\n\n\ndf = pd.DataFrame()\nsearch(df.values, \"list\")\n\n╭───────────────────────────────────────────── Searching for {query} ─────────────────────────────────────────────╮\n│ ['tolist']                                                                                                      │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\nsearch(pd.DataFrame, \"to\")\n\n╭─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ [                                                                                                               │\n│     '_constructor',                                                                                             │\n│     '_constructor_sliced',                                                                                      │\n│     '_to_dict_of_blocks',                                                                                       │\n│     'kurtosis',                                                                                                 │\n│     'to_clipboard',                                                                                             │\n│     'to_csv',                                                                                                   │\n│     'to_dict',                                                                                                  │\n│     'to_excel',                                                                                                 │\n│     'to_feather',                                                                                               │\n│     'to_gbq',                                                                                                   │\n│     'to_hdf',                                                                                                   │\n│     'to_html',                                                                                                  │\n│     'to_json',                                                                                                  │\n│     'to_latex',                                                                                                 │\n│     'to_markdown',                                                                                              │\n│     'to_numpy',                                                                                                 │\n│     'to_orc',                                                                                                   │\n│     'to_parquet',                                                                                               │\n│     'to_period',                                                                                                │\n│     'to_pickle',                                                                                                │\n│     'to_records',                                                                                               │\n│     'to_sql',                                                                                                   │\n│     'to_stata',                                                                                                 │\n│     'to_string',                                                                                                │\n│     'to_timestamp',                                                                                             │\n│     'to_xarray',                                                                                                │\n│     'to_xml'                                                                                                    │\n│ ]                                                                                                               │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\nq = \"normal\"\n\n\nnp.random.normal\n\n<function RandomState.normal>\n\n\n\nfrom rich import inspect\n\ninspect(eval(f\"np.random.{q}\"), methods=True, all=True)\n\n╭─────────────── <built-in method normal of numpy.random.mtrand.RandomState object at 0x10c627840> ───────────────╮\n│ def RandomState.normal(...)                                                                                     │\n│                                                                                                                 │\n│ normal(loc=0.0, scale=1.0, size=None)                                                                           │\n│                                                                                                                 │\n│            __doc__ = '\\n        normal(loc=0.0, scale=1.0, size=None)\\n\\n        Draw random samples from a     │\n│                      normal (Gaussian) distribution.\\n\\n        The probability density function of the normal  │\n│                      distribution, first\\n        derived by De Moivre and 200 years later by both Gauss and    │\n│                      Laplace\\n        independently [2]_, is often called the bell curve because of\\n           │\n│                      its characteristic shape (see the example below).\\n\\n        The normal distributions      │\n│                      occurs often in nature.  For example, it\\n        describes the commonly occurring         │\n│                      distribution of samples influenced\\n        by a large number of tiny, random              │\n│                      disturbances, each with its own\\n        unique distribution [2]_.\\n\\n        .. note::\\n  │\n│                      New code should use the ``normal`` method of a ``default_rng()``\\n            instance     │\n│                      instead; please see the :ref:`random-quick-start`.\\n\\n        Parameters\\n                 │\n│                      ----------\\n        loc : float or array_like of floats\\n            Mean (\"centre\") of    │\n│                      the distribution.\\n        scale : float or array_like of floats\\n            Standard     │\n│                      deviation (spread or \"width\") of the distribution. Must be\\n            non-negative.\\n    │\n│                      size : int or tuple of ints, optional\\n            Output shape.  If the given shape is,   │\n│                      e.g., ``(m, n, k)``, then\\n            ``m * n * k`` samples are drawn.  If size is        │\n│                      ``None`` (default),\\n            a single value is returned if ``loc`` and ``scale`` are   │\n│                      both scalars.\\n            Otherwise, ``np.broadcast(loc, scale).size`` samples are        │\n│                      drawn.\\n\\n        Returns\\n        -------\\n        out : ndarray or scalar\\n              │\n│                      Drawn samples from the parameterized normal distribution.\\n\\n        See Also\\n            │\n│                      --------\\n        scipy.stats.norm : probability density function, distribution or\\n       │\n│                      cumulative density function, etc.\\n        random.Generator.normal: which should be used   │\n│                      for new code.\\n\\n        Notes\\n        -----\\n        The probability density for the     │\n│                      Gaussian distribution is\\n\\n        .. math:: p(x) = \\\\frac{1}{\\\\sqrt{ 2 \\\\pi \\\\sigma^2    │\n│                      }}\\n                         e^{ - \\\\frac{ (x - \\\\mu)^2 } {2 \\\\sigma^2} },\\n\\n             │\n│                      where :math:`\\\\mu` is the mean and :math:`\\\\sigma` the standard\\n        deviation. The    │\n│                      square of the standard deviation, :math:`\\\\sigma^2`,\\n        is called the variance.\\n\\n  │\n│                      The function has its peak at the mean, and its \"spread\" increases with\\n        the        │\n│                      standard deviation (the function reaches 0.607 times its maximum at\\n        :math:`x +    │\n│                      \\\\sigma` and :math:`x - \\\\sigma` [2]_).  This implies that\\n        normal is more likely  │\n│                      to return samples lying close to the mean, rather\\n        than those far away.\\n\\n        │\n│                      References\\n        ----------\\n        .. [1] Wikipedia, \"Normal distribution\",\\n         │\n│                      https://en.wikipedia.org/wiki/Normal_distribution\\n        .. [2] P. R. Peebles Jr.,       │\n│                      \"Central Limit Theorem\" in \"Probability,\\n               Random Variables and Random       │\n│                      Signal Principles\", 4th ed., 2001,\\n               pp. 51, 51, 125.\\n\\n        Examples\\n  │\n│                      --------\\n        Draw samples from the distribution:\\n\\n        >>> mu, sigma = 0, 0.1 #  │\n│                      mean and standard deviation\\n        >>> s = np.random.normal(mu, sigma, 1000)\\n\\n         │\n│                      Verify the mean and the variance:\\n\\n        >>> abs(mu - np.mean(s))\\n        0.0  # may  │\n│                      vary\\n\\n        >>> abs(sigma - np.std(s, ddof=1))\\n        0.1  # may vary\\n\\n            │\n│                      Display the histogram of the samples, along with\\n        the probability density          │\n│                      function:\\n\\n        >>> import matplotlib.pyplot as plt\\n        >>> count, bins, ignored │\n│                      = plt.hist(s, 30, density=True)\\n        >>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) │\n│                      *\\n        ...                np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\\n        ...    │\n│                      linewidth=2, color=\\'r\\')\\n        >>> plt.show()\\n\\n        Two-by-four array of samples  │\n│                      from N(3, 6.25):\\n\\n        >>> np.random.normal(3, 2.5, size=(2, 4))\\n                    │\n│                      array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\\n               [  │\n│                      0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random\\n\\n        '                │\n│         __module__ = None                                                                                       │\n│           __name__ = 'normal'                                                                                   │\n│       __qualname__ = 'RandomState.normal'                                                                       │\n│           __self__ = RandomState(MT19937) at 0x10C627840                                                        │\n│ __text_signature__ = None                                                                                       │\n│           __call__ = def __call__(*args, **kwargs): Call self as a function.                                    │\n│          __class__ = class __class__():                                                                         │\n│        __delattr__ = def __delattr__(name, /): Implement delattr(self, name).                                   │\n│            __dir__ = def __dir__(): Default dir() implementation.                                               │\n│             __eq__ = def __eq__(value, /): Return self==value.                                                  │\n│         __format__ = def __format__(format_spec, /): Default object formatter.                                  │\n│             __ge__ = def __ge__(value, /): Return self>=value.                                                  │\n│   __getattribute__ = def __getattribute__(name, /): Return getattr(self, name).                                 │\n│             __gt__ = def __gt__(value, /): Return self>value.                                                   │\n│           __hash__ = def __hash__(): Return hash(self).                                                         │\n│           __init__ = def __init__(*args, **kwargs): Initialize self.  See help(type(self)) for accurate         │\n│                      signature.                                                                                 │\n│  __init_subclass__ = def __init_subclass__(...) This method is called when a class is subclassed.               │\n│             __le__ = def __le__(value, /): Return self<=value.                                                  │\n│             __lt__ = def __lt__(value, /): Return self<value.                                                   │\n│             __ne__ = def __ne__(value, /): Return self!=value.                                                  │\n│            __new__ = def __new__(*args, **kwargs): Create and return a new object.  See help(type) for accurate │\n│                      signature.                                                                                 │\n│         __reduce__ = def __reduce__(...) Helper for pickle.                                                     │\n│      __reduce_ex__ = def __reduce_ex__(protocol, /): Helper for pickle.                                         │\n│           __repr__ = def __repr__(): Return repr(self).                                                         │\n│        __setattr__ = def __setattr__(name, value, /): Implement setattr(self, name, value).                     │\n│         __sizeof__ = def __sizeof__(): Size of object in memory, in bytes.                                      │\n│            __str__ = def __str__(): Return str(self).                                                           │\n│   __subclasshook__ = def __subclasshook__(...) Abstract classes can override this to customize issubclass().    │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\ninspect(inspect)\n\n╭─────────────────────────────────────── <function inspect at 0x10f3fc550> ───────────────────────────────────────╮\n│ def inspect(obj: Any, *, console: Optional[ForwardRef('Console')] = None, title: Optional[str] = None, help:    │\n│ bool = False, methods: bool = False, docs: bool = True, private: bool = False, dunder: bool = False, sort: bool │\n│ = True, all: bool = False, value: bool = True) -> None:                                                         │\n│                                                                                                                 │\n│ Inspect any Python object.                                                                                      │\n│                                                                                                                 │\n│ * inspect(<OBJECT>) to see summarized info.                                                                     │\n│ * inspect(<OBJECT>, methods=True) to see methods.                                                               │\n│ * inspect(<OBJECT>, help=True) to see full (non-abbreviated) help.                                              │\n│ * inspect(<OBJECT>, private=True) to see private attributes (single underscore).                                │\n│ * inspect(<OBJECT>, dunder=True) to see attributes beginning with double underscore.                            │\n│ * inspect(<OBJECT>, all=True) to see all attributes.                                                            │\n│                                                                                                                 │\n│ Args:                                                                                                           │\n│     obj (Any): An object to inspect.                                                                            │\n│     title (str, optional): Title to display over inspect result, or None use type. Defaults to None.            │\n│     help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.             │\n│     methods (bool, optional): Enable inspection of callables. Defaults to False.                                │\n│     docs (bool, optional): Also render doc strings. Defaults to True.                                           │\n│     private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.           │\n│     dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.                │\n│     sort (bool, optional): Sort attributes alphabetically. Defaults to True.                                    │\n│     all (bool, optional): Show all attributes. Defaults to False.                                               │\n│     value (bool, optional): Pretty print value. Defaults to True.                                               │\n│                                                                                                                 │\n│ 35 attribute(s) not shown. Run inspect(inspect) for options.                                                    │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass InventoryItem:\n    \"\"\"Class for keeping track of an item in inventory.\"\"\"\n\n    name: str\n    unit_price: float\n    quantity_on_hand: int = 0\n\n\nc = InventoryItem(\"A\", 20)\n\n\nc\n\nInventoryItem(name='A', unit_price=20, quantity_on_hand=0)\n\n\n\nclass InventoryItemOld:\n    def __init__(self, name: str, unit_price: float, \n                 quantity_on_hand: int = 0):\n        self.name = name\n        self.unit_price = unit_price\n        self.quantity_on_hand = quantity_on_hand\n\n\nd = InventoryItemOld(\"A\", 2)\nd\n\n<__main__.InventoryItemOld at 0x166340430>\n\n\n\ndef greeting(name: str) -> str:\n    return 'Hello ' + name\n\n\ngreeting(\"Abc\")\n\n'Hello Abc'\n\n\n\ngreeting(10)\n\nTypeError: can only concatenate str (not \"int\") to str"
  },
  {
    "objectID": "notebooks/posts/tips.html",
    "href": "notebooks/posts/tips.html",
    "title": "Misc tips",
    "section": "",
    "text": "Miscelleneous tips\n\nTab Complete\na.b?\nBlack format\nrich\n\ntable\ninspect\n\ndir()\ntiming\ntiming with sort?!\ntimeit object\nplotting timing\narray .tolist()\nDataclasses\nAnnotation\nPlotting with pandas (sin, log, question …)\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\n\n\nn = 100\nk = 20\nm = 50\n\nnp.random.seed(0)\na = np.random.randn(n, k)\nb = np.random.randn(k, m)\na.shape, b.shape\n\n((100, 20), (20, 50))\n\n\n\na_list_of_list = a.tolist()\na_list_of_list[0]\n\nlist\n\n\n\n\"list\" in dir(a)[:]\n\nFalse\n\n\n\nimport rich\nrich.inspect(a.tolist, methods=True, all=True)\n\n╭──────────────────────── <built-in method tolist of numpy.ndarray object at 0x164cbb8d0> ────────────────────────╮\n│ def ndarray.tolist(...)                                                                                         │\n│                                                                                                                 │\n│ a.tolist()                                                                                                      │\n│                                                                                                                 │\n│            __doc__ = \"a.tolist()\\n\\n    Return the array as an ``a.ndim``-levels deep nested list of Python     │\n│                      scalars.\\n\\n    Return a copy of the array data as a (nested) Python list.\\n    Data items │\n│                      are converted to the nearest compatible builtin Python type, via\\n    the                  │\n│                      `~numpy.ndarray.item` function.\\n\\n    If ``a.ndim`` is 0, then since the depth of the     │\n│                      nested list is 0, it will\\n    not be a list at all, but a simple Python scalar.\\n\\n       │\n│                      Parameters\\n    ----------\\n    none\\n\\n    Returns\\n    -------\\n    y : object, or list  │\n│                      of object, or list of list of object, or ...\\n        The possibly nested list of array    │\n│                      elements.\\n\\n    Notes\\n    -----\\n    The array may be recreated via ``a =                │\n│                      np.array(a.tolist())``, although this\\n    may sometimes lose precision.\\n\\n    Examples\\n │\n│                      --------\\n    For a 1D array, ``a.tolist()`` is almost the same as ``list(a)``,\\n          │\n│                      except that ``tolist`` changes numpy scalars to Python scalars:\\n\\n    >>> a =             │\n│                      np.uint32([1, 2])\\n    >>> a_list = list(a)\\n    >>> a_list\\n    [1, 2]\\n    >>>           │\n│                      type(a_list[0])\\n    <class 'numpy.uint32'>\\n    >>> a_tolist = a.tolist()\\n    >>>        │\n│                      a_tolist\\n    [1, 2]\\n    >>> type(a_tolist[0])\\n    <class 'int'>\\n\\n    Additionally,    │\n│                      for a 2D array, ``tolist`` applies recursively:\\n\\n    >>> a = np.array([[1, 2], [3,       │\n│                      4]])\\n    >>> list(a)\\n    [array([1, 2]), array([3, 4])]\\n    >>> a.tolist()\\n    [[1,    │\n│                      2], [3, 4]]\\n\\n    The base case for this recursion is a 0D array:\\n\\n    >>> a =          │\n│                      np.array(1)\\n    >>> list(a)\\n    Traceback (most recent call last):\\n      ...\\n          │\n│                      TypeError: iteration over a 0-d array\\n    >>> a.tolist()\\n    1\"                          │\n│         __module__ = None                                                                                       │\n│           __name__ = 'tolist'                                                                                   │\n│       __qualname__ = 'ndarray.tolist'                                                                           │\n│           __self__ = array([[ 1.76405235e+00,  4.00157208e-01,  9.78737984e-01, ...,                            │\n│                              -2.05158264e-01,  3.13067702e-01, -8.54095739e-01],                                │\n│                             [-2.55298982e+00,  6.53618595e-01,  8.64436199e-01, ...,                            │\n│                               1.20237985e+00, -3.87326817e-01, -3.02302751e-01],                                │\n│                             [-1.04855297e+00, -1.42001794e+00, -1.70627019e+00, ...,                            │\n│                               3.02471898e-01, -6.34322094e-01, -3.62741166e-01],                                │\n│                             ...,                                                                                │\n│                             [ 8.73311836e-01,  1.19973618e+00,  4.56153036e-01, ...,                            │\n│                              -1.24021634e+00,  9.00054243e-01,  1.80224223e+00],                                │\n│                             [-2.08285103e-01,  1.57437124e+00,  1.98989494e-01, ...,                            │\n│                               4.32837621e-01, -8.08717532e-01, -1.10412399e+00],                                │\n│                             [-7.89102180e-01,  1.24845579e-03, -1.59939788e-01, ...,                            │\n│                               1.58433847e-01, -1.14190142e+00, -1.31097037e+00]])                               │\n│ __text_signature__ = None                                                                                       │\n│           __call__ = def __call__(*args, **kwargs): Call self as a function.                                    │\n│          __class__ = class __class__():                                                                         │\n│        __delattr__ = def __delattr__(name, /): Implement delattr(self, name).                                   │\n│            __dir__ = def __dir__(): Default dir() implementation.                                               │\n│             __eq__ = def __eq__(value, /): Return self==value.                                                  │\n│         __format__ = def __format__(format_spec, /): Default object formatter.                                  │\n│             __ge__ = def __ge__(value, /): Return self>=value.                                                  │\n│   __getattribute__ = def __getattribute__(name, /): Return getattr(self, name).                                 │\n│             __gt__ = def __gt__(value, /): Return self>value.                                                   │\n│           __hash__ = def __hash__(): Return hash(self).                                                         │\n│           __init__ = def __init__(*args, **kwargs): Initialize self.  See help(type(self)) for accurate         │\n│                      signature.                                                                                 │\n│  __init_subclass__ = def __init_subclass__(...) This method is called when a class is subclassed.               │\n│             __le__ = def __le__(value, /): Return self<=value.                                                  │\n│             __lt__ = def __lt__(value, /): Return self<value.                                                   │\n│             __ne__ = def __ne__(value, /): Return self!=value.                                                  │\n│            __new__ = def __new__(*args, **kwargs): Create and return a new object.  See help(type) for accurate │\n│                      signature.                                                                                 │\n│         __reduce__ = def __reduce__(...) Helper for pickle.                                                     │\n│      __reduce_ex__ = def __reduce_ex__(protocol, /): Helper for pickle.                                         │\n│           __repr__ = def __repr__(): Return repr(self).                                                         │\n│        __setattr__ = def __setattr__(name, value, /): Implement setattr(self, name, value).                     │\n│         __sizeof__ = def __sizeof__(): Size of object in memory, in bytes.                                      │\n│            __str__ = def __str__(): Return str(self).                                                           │\n│   __subclasshook__ = def __subclasshook__(...) Abstract classes can override this to customize issubclass().    │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\nlambda x: np.power(x, 3)\n\n\ndef f(x):\n    return np.power(x, 3)\n\n\nd = {\n    r\"$\\sin(x)$\": np.sin,\n    r\"$\\log(x)$\": np.log,\n    r\"$\\frac{sin(x)}{x}$\": lambda x: np.sin(x) / x,\n    r\"$x^3$\": lambda x: np.power(x, 3),\n}\n\n\nd\n\n{'$\\\\sin(x)$': <ufunc 'sin'>,\n '$\\\\log(x)$': <ufunc 'log'>,\n '$\\\\frac{sin(x)}{x}$': <function __main__.<lambda>(x)>,\n '$x^3$': <function __main__.<lambda>(x)>}\n\n\n\nx = np.arange(0.005, 10.0, 0.005)\n\n\ne = {k: v(x) for k, v in d.items()}\n\n\ne\n\n{'$\\\\sin(x)$': array([ 0.00499998,  0.00999983,  0.01499944, ..., -0.53137431,\n        -0.53560333, -0.53981897]),\n '$\\\\log(x)$': array([-5.29831737, -4.60517019, -4.19970508, ...,  2.30108397,\n         2.30158459,  2.30208497]),\n '$\\\\frac{sin(x)}{x}$': array([ 0.99999583,  0.99998333,  0.9999625 , ..., -0.05321726,\n        -0.05361395, -0.0540089 ]),\n '$x^3$': array([1.25000000e-07, 1.00000000e-06, 3.37500000e-06, ...,\n        9.95506747e+02, 9.97002999e+02, 9.98500750e+02])}\n\n\n\ndf = pd.DataFrame(e, index=x)\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      $\\sin(x)$\n      $\\log(x)$\n      $\\frac{sin(x)}{x}$\n      $x^3$\n    \n  \n  \n    \n      0.005\n      0.005000\n      -5.298317\n      0.999996\n      1.250000e-07\n    \n    \n      0.010\n      0.010000\n      -4.605170\n      0.999983\n      1.000000e-06\n    \n    \n      0.015\n      0.014999\n      -4.199705\n      0.999963\n      3.375000e-06\n    \n    \n      0.020\n      0.019999\n      -3.912023\n      0.999933\n      8.000000e-06\n    \n    \n      0.025\n      0.024997\n      -3.688879\n      0.999896\n      1.562500e-05\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      9.975\n      -0.522877\n      2.300082\n      -0.052419\n      9.925187e+02\n    \n    \n      9.980\n      -0.527132\n      2.300583\n      -0.052819\n      9.940120e+02\n    \n    \n      9.985\n      -0.531374\n      2.301084\n      -0.053217\n      9.955067e+02\n    \n    \n      9.990\n      -0.535603\n      2.301585\n      -0.053614\n      9.970030e+02\n    \n    \n      9.995\n      -0.539819\n      2.302085\n      -0.054009\n      9.985007e+02\n    \n  \n\n1999 rows × 4 columns\n\n\n\n\ndf.plot()\n\n<AxesSubplot:>\n\n\n\n\n\n\ndf.plot(subplots=True)\n\narray([<AxesSubplot:>, <AxesSubplot:>, <AxesSubplot:>, <AxesSubplot:>],\n      dtype=object)\n\n\n\n\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      $\\sin$\n      log\n      $\\frac{sin(x)}{x}$\n      x^3\n    \n  \n  \n    \n      0.005\n      0.005000\n      -5.298317\n      0.999996\n      1.250000e-07\n    \n    \n      0.010\n      0.010000\n      -4.605170\n      0.999983\n      1.000000e-06\n    \n    \n      0.015\n      0.014999\n      -4.199705\n      0.999963\n      3.375000e-06\n    \n    \n      0.020\n      0.019999\n      -3.912023\n      0.999933\n      8.000000e-06\n    \n    \n      0.025\n      0.024997\n      -3.688879\n      0.999896\n      1.562500e-05\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      9.975\n      -0.522877\n      2.300082\n      -0.052419\n      9.925187e+02\n    \n    \n      9.980\n      -0.527132\n      2.300583\n      -0.052819\n      9.940120e+02\n    \n    \n      9.985\n      -0.531374\n      2.301084\n      -0.053217\n      9.955067e+02\n    \n    \n      9.990\n      -0.535603\n      2.301585\n      -0.053614\n      9.970030e+02\n    \n    \n      9.995\n      -0.539819\n      2.302085\n      -0.054009\n      9.985007e+02\n    \n  \n\n1999 rows × 4 columns\n\n\n\n\n((df - df.min(axis=0)) / (df.max(axis=0) - df.min(axis=0))).plot()\n\n<AxesSubplot:>\n\n\n\n\n\n\ndf = pd.DataFrame(np.random.randn(1000, 5),\n                  columns=\"a,b,c,d,e\".split(\",\"))\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n      e\n    \n  \n  \n    \n      0\n      1.593274\n      0.568722\n      -0.114487\n      0.251630\n      -1.210856\n    \n    \n      1\n      -0.393734\n      0.085253\n      0.099422\n      -1.530616\n      0.327623\n    \n    \n      2\n      0.279196\n      -0.377051\n      0.004175\n      -1.483492\n      -1.479796\n    \n    \n      3\n      0.134687\n      -0.667723\n      -0.011556\n      0.839491\n      -0.173930\n    \n    \n      4\n      -2.810668\n      -0.150654\n      -0.481044\n      -0.234694\n      0.899731\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      995\n      -0.837658\n      1.315288\n      -0.364523\n      1.993571\n      1.584878\n    \n    \n      996\n      -2.104663\n      -2.553118\n      -1.242666\n      0.201987\n      -0.305332\n    \n    \n      997\n      -1.195587\n      -1.577903\n      0.849912\n      0.327590\n      -0.001670\n    \n    \n      998\n      -0.035563\n      -0.489252\n      1.930498\n      -0.262645\n      0.825932\n    \n    \n      999\n      -0.643267\n      -0.828981\n      -0.202735\n      -0.257866\n      0.070815\n    \n  \n\n1000 rows × 5 columns\n\n\n\n\ndf = df.assign(f=df.sum(axis=1))\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n      e\n      f\n    \n  \n  \n    \n      0\n      1.593274\n      0.568722\n      -0.114487\n      0.251630\n      -1.210856\n      1.088284\n    \n    \n      1\n      -0.393734\n      0.085253\n      0.099422\n      -1.530616\n      0.327623\n      -1.412052\n    \n    \n      2\n      0.279196\n      -0.377051\n      0.004175\n      -1.483492\n      -1.479796\n      -3.056967\n    \n    \n      3\n      0.134687\n      -0.667723\n      -0.011556\n      0.839491\n      -0.173930\n      0.120969\n    \n    \n      4\n      -2.810668\n      -0.150654\n      -0.481044\n      -0.234694\n      0.899731\n      -2.777329\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      995\n      -0.837658\n      1.315288\n      -0.364523\n      1.993571\n      1.584878\n      3.691555\n    \n    \n      996\n      -2.104663\n      -2.553118\n      -1.242666\n      0.201987\n      -0.305332\n      -6.003792\n    \n    \n      997\n      -1.195587\n      -1.577903\n      0.849912\n      0.327590\n      -0.001670\n      -1.597657\n    \n    \n      998\n      -0.035563\n      -0.489252\n      1.930498\n      -0.262645\n      0.825932\n      1.968971\n    \n    \n      999\n      -0.643267\n      -0.828981\n      -0.202735\n      -0.257866\n      0.070815\n      -1.862035\n    \n  \n\n1000 rows × 6 columns\n\n\n\n\ndf.query(\"f > 5\")[\"f\"].std()\n\n0.6609257763922614\n\n\n\ndf.query(\"f <= 5\")[\"f\"].std()\n\n2.1891090850524444\n\n\n\n\"tolist\" in dir(df)\n\nFalse\n\n\n\ndef search(obj, query):\n    import re\n\n    return list(filter(lambda x: re.search(query, x), dir(obj)))\n\n\nsearch(a, \"lis\")\n\n['tolist']\n\n\n\nimport numpy as np\nimport pandas as pd\n\n\ndef search(obj, query):\n    import re\n    from rich import inspect\n    from rich.pretty import Pretty\n    from rich.panel import Panel\n\n    z = list(filter(lambda x: re.search(query, x), dir(obj)))\n    p = Panel(Pretty(\"a\"), title=f\"Searching for `{query}`\")\n    # return p\n    ps = []\n    for q in z:\n        ps.append(Panel(Pretty(inspect(getattr(obj, q), methods=True, docs=True))))\n\n\nsearch(np.random, \"normal\")\n\n╭─ <built-in method lognormal of numpy.random.mtrand.RandomState object at 0x10c627840> ─╮\n│ def RandomState.lognormal(...)                                                         │\n│                                                                                        │\n│ lognormal(mean=0.0, sigma=1.0, size=None)                                              │\n│                                                                                        │\n│ 29 attribute(s) not shown. Run inspect(inspect) for options.                           │\n╰────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n╭─ <built-in method multivariate_normal of numpy.random.mtrand.RandomState object at 0x10c627840> ─╮\n│ def RandomState.multivariate_normal(...)                                                         │\n│                                                                                                  │\n│ multivariate_normal(mean, cov, size=None, check_valid='warn', tol=1e-8)                          │\n│                                                                                                  │\n│ 29 attribute(s) not shown. Run inspect(inspect) for options.                                     │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n╭─ <built-in method normal of numpy.random.mtrand.RandomState object at 0x10c627840> ─╮\n│ def RandomState.normal(...)                                                         │\n│                                                                                     │\n│ normal(loc=0.0, scale=1.0, size=None)                                               │\n│                                                                                     │\n│ 29 attribute(s) not shown. Run inspect(inspect) for options.                        │\n╰─────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n╭─ <built-in method standard_normal of numpy.random.mtrand.RandomState object at 0x10c627840> ─╮\n│ def RandomState.standard_normal(...)                                                         │\n│                                                                                              │\n│ standard_normal(size=None)                                                                   │\n│                                                                                              │\n│ 29 attribute(s) not shown. Run inspect(inspect) for options.                                 │\n╰──────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\ngetattr(pd.DataFrame().values, \"tolist\")\n\n<function ndarray.tolist>\n\n\n\npd.DataFrame.to\n\n\n\n\n\n  \n    \n      \n    \n  \n  \n  \n\n\n\n\n\ndf = pd.DataFrame()\nsearch(df.values, \"list\")\n\n╭───────────────────────────────────────────── Searching for {query} ─────────────────────────────────────────────╮\n│ ['tolist']                                                                                                      │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\nsearch(pd.DataFrame, \"to\")\n\n╭─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ [                                                                                                               │\n│     '_constructor',                                                                                             │\n│     '_constructor_sliced',                                                                                      │\n│     '_to_dict_of_blocks',                                                                                       │\n│     'kurtosis',                                                                                                 │\n│     'to_clipboard',                                                                                             │\n│     'to_csv',                                                                                                   │\n│     'to_dict',                                                                                                  │\n│     'to_excel',                                                                                                 │\n│     'to_feather',                                                                                               │\n│     'to_gbq',                                                                                                   │\n│     'to_hdf',                                                                                                   │\n│     'to_html',                                                                                                  │\n│     'to_json',                                                                                                  │\n│     'to_latex',                                                                                                 │\n│     'to_markdown',                                                                                              │\n│     'to_numpy',                                                                                                 │\n│     'to_orc',                                                                                                   │\n│     'to_parquet',                                                                                               │\n│     'to_period',                                                                                                │\n│     'to_pickle',                                                                                                │\n│     'to_records',                                                                                               │\n│     'to_sql',                                                                                                   │\n│     'to_stata',                                                                                                 │\n│     'to_string',                                                                                                │\n│     'to_timestamp',                                                                                             │\n│     'to_xarray',                                                                                                │\n│     'to_xml'                                                                                                    │\n│ ]                                                                                                               │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\nq = \"normal\"\n\n\nnp.random.normal\n\n<function RandomState.normal>\n\n\n\nfrom rich import inspect\n\ninspect(eval(f\"np.random.{q}\"), methods=True, all=True)\n\n╭─────────────── <built-in method normal of numpy.random.mtrand.RandomState object at 0x10c627840> ───────────────╮\n│ def RandomState.normal(...)                                                                                     │\n│                                                                                                                 │\n│ normal(loc=0.0, scale=1.0, size=None)                                                                           │\n│                                                                                                                 │\n│            __doc__ = '\\n        normal(loc=0.0, scale=1.0, size=None)\\n\\n        Draw random samples from a     │\n│                      normal (Gaussian) distribution.\\n\\n        The probability density function of the normal  │\n│                      distribution, first\\n        derived by De Moivre and 200 years later by both Gauss and    │\n│                      Laplace\\n        independently [2]_, is often called the bell curve because of\\n           │\n│                      its characteristic shape (see the example below).\\n\\n        The normal distributions      │\n│                      occurs often in nature.  For example, it\\n        describes the commonly occurring         │\n│                      distribution of samples influenced\\n        by a large number of tiny, random              │\n│                      disturbances, each with its own\\n        unique distribution [2]_.\\n\\n        .. note::\\n  │\n│                      New code should use the ``normal`` method of a ``default_rng()``\\n            instance     │\n│                      instead; please see the :ref:`random-quick-start`.\\n\\n        Parameters\\n                 │\n│                      ----------\\n        loc : float or array_like of floats\\n            Mean (\"centre\") of    │\n│                      the distribution.\\n        scale : float or array_like of floats\\n            Standard     │\n│                      deviation (spread or \"width\") of the distribution. Must be\\n            non-negative.\\n    │\n│                      size : int or tuple of ints, optional\\n            Output shape.  If the given shape is,   │\n│                      e.g., ``(m, n, k)``, then\\n            ``m * n * k`` samples are drawn.  If size is        │\n│                      ``None`` (default),\\n            a single value is returned if ``loc`` and ``scale`` are   │\n│                      both scalars.\\n            Otherwise, ``np.broadcast(loc, scale).size`` samples are        │\n│                      drawn.\\n\\n        Returns\\n        -------\\n        out : ndarray or scalar\\n              │\n│                      Drawn samples from the parameterized normal distribution.\\n\\n        See Also\\n            │\n│                      --------\\n        scipy.stats.norm : probability density function, distribution or\\n       │\n│                      cumulative density function, etc.\\n        random.Generator.normal: which should be used   │\n│                      for new code.\\n\\n        Notes\\n        -----\\n        The probability density for the     │\n│                      Gaussian distribution is\\n\\n        .. math:: p(x) = \\\\frac{1}{\\\\sqrt{ 2 \\\\pi \\\\sigma^2    │\n│                      }}\\n                         e^{ - \\\\frac{ (x - \\\\mu)^2 } {2 \\\\sigma^2} },\\n\\n             │\n│                      where :math:`\\\\mu` is the mean and :math:`\\\\sigma` the standard\\n        deviation. The    │\n│                      square of the standard deviation, :math:`\\\\sigma^2`,\\n        is called the variance.\\n\\n  │\n│                      The function has its peak at the mean, and its \"spread\" increases with\\n        the        │\n│                      standard deviation (the function reaches 0.607 times its maximum at\\n        :math:`x +    │\n│                      \\\\sigma` and :math:`x - \\\\sigma` [2]_).  This implies that\\n        normal is more likely  │\n│                      to return samples lying close to the mean, rather\\n        than those far away.\\n\\n        │\n│                      References\\n        ----------\\n        .. [1] Wikipedia, \"Normal distribution\",\\n         │\n│                      https://en.wikipedia.org/wiki/Normal_distribution\\n        .. [2] P. R. Peebles Jr.,       │\n│                      \"Central Limit Theorem\" in \"Probability,\\n               Random Variables and Random       │\n│                      Signal Principles\", 4th ed., 2001,\\n               pp. 51, 51, 125.\\n\\n        Examples\\n  │\n│                      --------\\n        Draw samples from the distribution:\\n\\n        >>> mu, sigma = 0, 0.1 #  │\n│                      mean and standard deviation\\n        >>> s = np.random.normal(mu, sigma, 1000)\\n\\n         │\n│                      Verify the mean and the variance:\\n\\n        >>> abs(mu - np.mean(s))\\n        0.0  # may  │\n│                      vary\\n\\n        >>> abs(sigma - np.std(s, ddof=1))\\n        0.1  # may vary\\n\\n            │\n│                      Display the histogram of the samples, along with\\n        the probability density          │\n│                      function:\\n\\n        >>> import matplotlib.pyplot as plt\\n        >>> count, bins, ignored │\n│                      = plt.hist(s, 30, density=True)\\n        >>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) │\n│                      *\\n        ...                np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\\n        ...    │\n│                      linewidth=2, color=\\'r\\')\\n        >>> plt.show()\\n\\n        Two-by-four array of samples  │\n│                      from N(3, 6.25):\\n\\n        >>> np.random.normal(3, 2.5, size=(2, 4))\\n                    │\n│                      array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\\n               [  │\n│                      0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random\\n\\n        '                │\n│         __module__ = None                                                                                       │\n│           __name__ = 'normal'                                                                                   │\n│       __qualname__ = 'RandomState.normal'                                                                       │\n│           __self__ = RandomState(MT19937) at 0x10C627840                                                        │\n│ __text_signature__ = None                                                                                       │\n│           __call__ = def __call__(*args, **kwargs): Call self as a function.                                    │\n│          __class__ = class __class__():                                                                         │\n│        __delattr__ = def __delattr__(name, /): Implement delattr(self, name).                                   │\n│            __dir__ = def __dir__(): Default dir() implementation.                                               │\n│             __eq__ = def __eq__(value, /): Return self==value.                                                  │\n│         __format__ = def __format__(format_spec, /): Default object formatter.                                  │\n│             __ge__ = def __ge__(value, /): Return self>=value.                                                  │\n│   __getattribute__ = def __getattribute__(name, /): Return getattr(self, name).                                 │\n│             __gt__ = def __gt__(value, /): Return self>value.                                                   │\n│           __hash__ = def __hash__(): Return hash(self).                                                         │\n│           __init__ = def __init__(*args, **kwargs): Initialize self.  See help(type(self)) for accurate         │\n│                      signature.                                                                                 │\n│  __init_subclass__ = def __init_subclass__(...) This method is called when a class is subclassed.               │\n│             __le__ = def __le__(value, /): Return self<=value.                                                  │\n│             __lt__ = def __lt__(value, /): Return self<value.                                                   │\n│             __ne__ = def __ne__(value, /): Return self!=value.                                                  │\n│            __new__ = def __new__(*args, **kwargs): Create and return a new object.  See help(type) for accurate │\n│                      signature.                                                                                 │\n│         __reduce__ = def __reduce__(...) Helper for pickle.                                                     │\n│      __reduce_ex__ = def __reduce_ex__(protocol, /): Helper for pickle.                                         │\n│           __repr__ = def __repr__(): Return repr(self).                                                         │\n│        __setattr__ = def __setattr__(name, value, /): Implement setattr(self, name, value).                     │\n│         __sizeof__ = def __sizeof__(): Size of object in memory, in bytes.                                      │\n│            __str__ = def __str__(): Return str(self).                                                           │\n│   __subclasshook__ = def __subclasshook__(...) Abstract classes can override this to customize issubclass().    │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\ninspect(inspect)\n\n╭─────────────────────────────────────── <function inspect at 0x10f3fc550> ───────────────────────────────────────╮\n│ def inspect(obj: Any, *, console: Optional[ForwardRef('Console')] = None, title: Optional[str] = None, help:    │\n│ bool = False, methods: bool = False, docs: bool = True, private: bool = False, dunder: bool = False, sort: bool │\n│ = True, all: bool = False, value: bool = True) -> None:                                                         │\n│                                                                                                                 │\n│ Inspect any Python object.                                                                                      │\n│                                                                                                                 │\n│ * inspect(<OBJECT>) to see summarized info.                                                                     │\n│ * inspect(<OBJECT>, methods=True) to see methods.                                                               │\n│ * inspect(<OBJECT>, help=True) to see full (non-abbreviated) help.                                              │\n│ * inspect(<OBJECT>, private=True) to see private attributes (single underscore).                                │\n│ * inspect(<OBJECT>, dunder=True) to see attributes beginning with double underscore.                            │\n│ * inspect(<OBJECT>, all=True) to see all attributes.                                                            │\n│                                                                                                                 │\n│ Args:                                                                                                           │\n│     obj (Any): An object to inspect.                                                                            │\n│     title (str, optional): Title to display over inspect result, or None use type. Defaults to None.            │\n│     help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.             │\n│     methods (bool, optional): Enable inspection of callables. Defaults to False.                                │\n│     docs (bool, optional): Also render doc strings. Defaults to True.                                           │\n│     private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.           │\n│     dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.                │\n│     sort (bool, optional): Sort attributes alphabetically. Defaults to True.                                    │\n│     all (bool, optional): Show all attributes. Defaults to False.                                               │\n│     value (bool, optional): Pretty print value. Defaults to True.                                               │\n│                                                                                                                 │\n│ 35 attribute(s) not shown. Run inspect(inspect) for options.                                                    │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass InventoryItem:\n    \"\"\"Class for keeping track of an item in inventory.\"\"\"\n\n    name: str\n    unit_price: float\n    quantity_on_hand: int = 0\n\n\nc = InventoryItem(\"A\", 20)\n\n\nc\n\nInventoryItem(name='A', unit_price=20, quantity_on_hand=0)\n\n\n\nclass InventoryItemOld:\n    def __init__(self, name: str, unit_price: float, \n                 quantity_on_hand: int = 0):\n        self.name = name\n        self.unit_price = unit_price\n        self.quantity_on_hand = quantity_on_hand\n\n\nd = InventoryItemOld(\"A\", 2)\nd\n\n<__main__.InventoryItemOld at 0x166340430>\n\n\n\ndef greeting(name: str) -> str:\n    return 'Hello ' + name\n\n\ngreeting(\"Abc\")\n\n'Hello Abc'\n\n\n\ngreeting(10)\n\nTypeError: can only concatenate str (not \"int\") to str"
  },
  {
    "objectID": "notebooks/posts/hyperparameter-1.html",
    "href": "notebooks/posts/hyperparameter-1.html",
    "title": "Grid Search",
    "section": "",
    "text": "Hyperparameter Tuning\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\n\n\n\nDataset creation\n\n# Create a DataFrame for classification containing four real features and one binary target\n\ndf = pd.DataFrame({\n    'feature1': np.random.randint(0, 100, 100),\n    'feature2': np.random.randint(0, 100, 100),\n    'feature3': np.random.randint(0, 100, 100),\n    'feature4': np.random.randint(0, 100, 100),\n    'target': np.random.randint(0, 2, 100)\n})\n\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      feature1\n      feature2\n      feature3\n      feature4\n      target\n    \n  \n  \n    \n      0\n      29\n      14\n      66\n      83\n      1\n    \n    \n      1\n      68\n      70\n      87\n      72\n      1\n    \n    \n      2\n      42\n      5\n      40\n      67\n      1\n    \n    \n      3\n      2\n      54\n      79\n      0\n      1\n    \n    \n      4\n      81\n      36\n      35\n      75\n      0\n    \n  \n\n\n\n\n\ntrain_df = df[:50]\nvalidation_df = df[50:80]\n\n\ndt = DecisionTreeClassifier()\ndt.fit(train_df[['feature1', 'feature2', 'feature3', 'feature4']], train_df['target'])\ndt\n\nDecisionTreeClassifier()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.DecisionTreeClassifierDecisionTreeClassifier()\n\n\n\ndt.score(validation_df[['feature1', 'feature2', 'feature3', 'feature4']], validation_df['target'])\n\n0.5333333333333333\n\n\n\ndt = DecisionTreeClassifier(criterion='entropy', max_depth=2)\ndt.fit(train_df[['feature1', 'feature2', 'feature3', 'feature4']], train_df['target'])\ndt.score(validation_df[['feature1', 'feature2', 'feature3', 'feature4']], validation_df['target'])\n\n0.5666666666666667\n\n\n\nhyperparams = {'criterion': ['gini', 'entropy'],\n               'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10],\n               'min_samples_split': [2, 3, 4, 5, 6, 7, 8, 9, 10]}\n\n\nout = {}\nfor c in hyperparams['criterion']:\n    for d in hyperparams['max_depth']:\n        for s in hyperparams['min_samples_split']:\n            dt = DecisionTreeClassifier(criterion=c, max_depth=d, min_samples_split=s)\n            dt.fit(train_df[['feature1', 'feature2', 'feature3', 'feature4']], train_df['target'])\n            out[(c, d, s)] = dt.score(validation_df[['feature1', 'feature2', 'feature3', 'feature4']], validation_df['target'])\n\n\nhp_ser = pd.Series(out)\nhp_ser.sort_values(ascending=False)\n\nentropy  10  10    0.766667\n         7   7     0.766667\n         9   8     0.766667\n         8   10    0.766667\n             9     0.766667\n                     ...   \ngini     10  5     0.500000\n         8   3     0.500000\n         7   4     0.500000\n             3     0.500000\n         5   2     0.500000\nLength: 162, dtype: float64\n\n\n\nhp_ser.idxmax()\n\n('entropy', 4, 6)\n\n\n\nbest_dt = DecisionTreeClassifier(criterion='entropy', max_depth=4, min_samples_split=6)\n\n\nbest_dt.fit(df[:80][['feature1', 'feature2', 'feature3', 'feature4']], df[:80]['target'])\n\nDecisionTreeClassifier(criterion='entropy', max_depth=4, min_samples_split=6)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.DecisionTreeClassifierDecisionTreeClassifier(criterion='entropy', max_depth=4, min_samples_split=6)\n\n\n\nbest_dt.score(df[80:][['feature1', 'feature2', 'feature3', 'feature4']], df[80:]['target'])\n\n0.45\n\n\n\n\nWithout using multiple nested loops\n\nprint(hyperparams.items(), len(hyperparams.items()))\n\ndict_items([('criterion', ['gini', 'entropy']), ('max_depth', [2, 3, 4, 5, 6, 7, 8, 9, 10]), ('min_samples_split', [2, 3, 4, 5, 6, 7, 8, 9, 10])]) 3\n\n\n\nprint_vec(*hyperparams.items())\n\n[('criterion', ['gini', 'entropy']) \n('max_depth', [2, 3, 4, 5, 6, 7, 8, 9, 10]) \n('min_samples_split', [2, 3, 4, 5, 6, 7, 8, 9, 10])]\n\n\n\nlist(zip(*hyperparams.items()))\n\n[('criterion', 'max_depth', 'min_samples_split'),\n (['gini', 'entropy'],\n  [2, 3, 4, 5, 6, 7, 8, 9, 10],\n  [2, 3, 4, 5, 6, 7, 8, 9, 10])]\n\n\n\nkeys, values = zip(*hyperparams.items())\n\n\nkeys\n\n('criterion', 'max_depth', 'min_samples_split')\n\n\n\nvalues\n\n(['gini', 'entropy'],\n [2, 3, 4, 5, 6, 7, 8, 9, 10],\n [2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\nlist(itertools.product(*values))[::10]\n\n[('gini', 2, 2),\n ('gini', 3, 3),\n ('gini', 4, 4),\n ('gini', 5, 5),\n ('gini', 6, 6),\n ('gini', 7, 7),\n ('gini', 8, 8),\n ('gini', 9, 9),\n ('gini', 10, 10),\n ('entropy', 3, 2),\n ('entropy', 4, 3),\n ('entropy', 5, 4),\n ('entropy', 6, 5),\n ('entropy', 7, 6),\n ('entropy', 8, 7),\n ('entropy', 9, 8),\n ('entropy', 10, 9)]\n\n\n\nv = next(itertools.product(*values))\nprint(v)\n\n('gini', 2, 2)\n\n\n\nprint_vec(*zip(keys, v))\n\n[('criterion', 'gini') \n('max_depth', 2) \n('min_samples_split', 2)]\n\n\n\ndef print_dict(**kwargs):\n    print(kwargs)\n\nprint_dict(**(dict(zip(keys, v))))\n\n{'criterion': 'gini', 'max_depth': 2, 'min_samples_split': 2}\n\n\n\nout = {}\nfor v in itertools.product(*values):\n    params = (dict(zip(keys, v)))\n    dt= DecisionTreeClassifier(**params)\n    dt.fit(train_df[['feature1', 'feature2', 'feature3', 'feature4']], train_df['target'])\n    out[(params['criterion'], params['max_depth'], params['min_samples_split'])] = dt.score(validation_df[['feature1', 'feature2', 'feature3', 'feature4']], validation_df['target'])\n    \n\n\npd.Series(out).sort_values(ascending=False)\n\ngini     9   6     0.666667\n         7   6     0.666667\n         8   6     0.666667\n         10  6     0.666667\n         6   6     0.666667\n                     ...   \nentropy  2   10    0.400000\n             7     0.400000\n             8     0.400000\n             9     0.400000\n             2     0.400000\nLength: 162, dtype: float64"
  },
  {
    "objectID": "notebooks/posts/python-utils.html",
    "href": "notebooks/posts/python-utils.html",
    "title": "Some Python Utilities",
    "section": "",
    "text": "Function Argument Unpacking\nReference: https://www.youtube.com/watch?v=YWY4BZi_o28\n\ndef print_vec(x, y, z):\n    print(f\"[{x} \\n{y} \\n{z}]\")\n\n\nprint_vec(1, 2, 3)\n\n[1 \n2 \n3]\n\n\n\ntuple_vec = (1, 0, 1)\n#print_vec(tuple_vec)\nprint_vec(tuple_vec[0], tuple_vec[1], tuple_vec[2])\n\n[1 \n0 \n1]\n\n\n\nlist_vec = [1, 0, 1]\n\nprint_vec(tuple_vec[0], tuple_vec[1], tuple_vec[2])\nprint(\"*\"*20)\nprint_vec(*tuple_vec)\nprint(\"*\"*20)\n\nprint_vec(*list_vec)\n\n[1 \n0 \n1]\n********************\n[1 \n0 \n1]\n********************\n[1 \n0 \n1]\n\n\n\ndictionary_vec = {\"x\": 1, \"y\": 0, \"z\": 1}\nprint_vec(**dictionary_vec)\n\n[1 \n0 \n1]\n\n\n\ndictionary_vec = {\"a\": 1, \"b\": 0, \"c\":1}\nprint_vec(**dictionary_vec)\n\nTypeError: print_vec() got an unexpected keyword argument 'a'\n\n\n\nprint(*dictionary_vec)\n\na b c\n\n\n\n\nZip\n\nlist(zip([1, 2, 3], ['a', 'b', 'c'], [7, 8, 9]))\n\n[(1, 'a', 7), (2, 'b', 8), (3, 'c', 9)]\n\n\n\n\nItertools Product\n\nimport itertools\nlist(itertools.product([1, 2], ['a', 'b', 'c'], [7, 8, 9]))\n\n[(1, 'a', 7),\n (1, 'a', 8),\n (1, 'a', 9),\n (1, 'b', 7),\n (1, 'b', 8),\n (1, 'b', 9),\n (1, 'c', 7),\n (1, 'c', 8),\n (1, 'c', 9),\n (2, 'a', 7),\n (2, 'a', 8),\n (2, 'a', 9),\n (2, 'b', 7),\n (2, 'b', 8),\n (2, 'b', 9),\n (2, 'c', 7),\n (2, 'c', 8),\n (2, 'c', 9)]"
  },
  {
    "objectID": "notebooks/posts/dt-reg.html",
    "href": "notebooks/posts/dt-reg.html",
    "title": "ES654",
    "section": "",
    "text": "import pandas as pd\n\n\ndf = pd.read_csv(\"mins-played.csv\")\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      Day\n      Outlook\n      Temp\n      Humidity\n      Wind\n      Minutes Played\n    \n  \n  \n    \n      0\n      D1\n      Sunny\n      Hot\n      High\n      Weak\n      20\n    \n    \n      1\n      D2\n      Sunny\n      Hot\n      High\n      Strong\n      24\n    \n    \n      2\n      D3\n      Overcast\n      Hot\n      High\n      Weak\n      40\n    \n    \n      3\n      D4\n      Rain\n      Mild\n      High\n      Weak\n      50\n    \n    \n      4\n      D5\n      Rain\n      Cool\n      Normal\n      Weak\n      60\n    \n    \n      5\n      D6\n      Rain\n      Cool\n      Normal\n      Strong\n      10\n    \n    \n      6\n      D7\n      Overcast\n      Cool\n      Normal\n      Strong\n      4\n    \n    \n      7\n      D8\n      Sunny\n      Mild\n      High\n      Weak\n      10\n    \n    \n      8\n      D9\n      Sunny\n      Cool\n      Normal\n      Weak\n      60\n    \n    \n      9\n      D10\n      Rain\n      Mild\n      Normal\n      Weak\n      40\n    \n    \n      10\n      D11\n      Sunny\n      Mild\n      High\n      Strong\n      45\n    \n    \n      11\n      D12\n      Overcast\n      Mild\n      High\n      Strong\n      40\n    \n    \n      12\n      D13\n      Overcast\n      Hot\n      Normal\n      Weak\n      35\n    \n    \n      13\n      D14\n      Rain\n      Mild\n      High\n      Strong\n      20\n    \n  \n\n\n\n\n\ndf[\"Minutes Played\"].std()\n\n18.3111087402348\n\n\n\nimport numpy as np\n# np.std(df[\"Minutes Played\"].values)\n\n\ndf.query(\"Wind=='Weak'\")[\"Minutes Played\"].std()*len(df.query(\"Wind=='Weak'\"))/len(df)\n\n10.180585192846463\n\n\n\ndf.query(\"Wind=='Strong'\")[\"Minutes Played\"].std()*len(df.query(\"Wind=='Strong'\"))/len(df)\n\n6.933944897151599\n\n\n\nout = {}\nfor temp in df[\"Temp\"].unique():\n    print(temp)\n    out[temp] = df.query(\"Temp==@temp\")[\"Minutes Played\"].std()*len(df.query(\"Temp==@temp\"))/len(df)\n    print(out[temp])\n    print()\n\nHot\n2.6636888135137133\n\nMild\n6.696785704762413\n\nCool\n8.770699519880226\n\n\n\n\ndf[\"Minutes Played\"].std() - pd.Series(out).sum()\n\n0.17993470207844808"
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "FAQ",
    "section": "",
    "text": "Prerequisites\n\nWhat are the course prerequisites?\n\nThe course has no “formal” prerequisites like all courses at IITGn. However, it is assumed that you have a basic understanding of:\n\nprogramming (Python), and data structures (ES242 equivalent)\nprobability and statistics\nlinear algebra\ncalculus\n\n\nHow can I prepare for the prerequisite exam?\n\nYour UG course material should be sufficient to prepare for the exam.\nYou may additionally refer to the “prerequisite” reading section on the course homepage.\n\nWhat happens if I do not clear the prerequisite exam?\n\nYou will not be allowed to take the course.\n\nWhat do you mean by “clear” the exam?\n\nLike all courses at IITGn, the instructor will decide the cut-off for the exam. You will have to score above the cut-off to clear the exam. No cut-off will be revealed to the students apriori.\n\n\n\n\n\nQuizzes\n\nWhat happens if I miss a quiz due to any reason?\n\nThe quiz will be marked as 0.\nThe provision of best 6 out of 8 quizzes is designed keeping in mind such scenarios.\n\nWill the quizzes and end-semester exam be open book? Will I be allowed to carry notes?\n\nNo, the exams and quizzes will be closed book. You are not permitted to carry notes.\n\nHow soon can I expect to receive my answer sheets back?\n\nYou should expect to receive answer sheets back in 4-5 working days.\n\nIs there an end-semester exam or mid-semester exam?\n\nNo, there is no end-semester exam or mid-semester exam. However, some of the quizzes may be held in the exam slot. In total we will have 8 equal weightage quizzes. The best 6 out of them will be considered for the final grade.\n\nWill the quizzes be MCQs or subjective?\n\nThe quizzes may contain both the MCQs and subjective questions.\n\n\n\n\n\nAssignments\n\nWhat happens if I miss an assignment due to any reason?\n\nThere will no extensions for assignments.\n\nI have a doubt in the assignment. Whom should I write to?\n\nAsk on the slack General channel. If you don’t get a response within 2 days, write to the course instructor.\n\nI do not know Python. Can I code assignments in some other language?\n\nUnfortunately, no. You have to stick to Python.\n\nHow will you evaluate the assignment?\n\nThe assignments would be followed by a viva. The TAs would first check the code and compare against the submission. Any change from the submitted code is not allowed and any instance of the same would culminate in a warning. The TAs would run the code and ask a few questions. About 75% of these questions would be based on the assignment in question and about 25% would be based on the theory behind the concepts covered in the assignment.\nThe grade breakup would be: i) code runs correctly and solves the problem [50% marks]; ii) questions based on the assignment and student understanding of code [25% marks]; iii) code quality [12.5% marks]; iv) questions based on the theory behind the concepts covered in the assignments [12.5% marks]\n\nIs the assignment individual or group?\n\nThe assignment is TBA. In case of group, all team members get the same grade for the assignment.\n\n\n\n\n\nAttendance\n\nAttendance policy\n\nAttendance is not mandatory, but highly encouraged. Marks often correlated with attendance.\n\n\n\n\n\nProjects\n\nIs there a project component in the course?\n\nNo. There is no project component in the course.\n\n\n\n\n\nBonus\n\nCan I choose a PR of my choice.\n\nYes, you can choose a PR of your choice from a list of PRs decided by the teaching staff. The teaching staff hold the right to decide whether a PR is suitable or not."
  },
  {
    "objectID": "exams/prereq.html",
    "href": "exams/prereq.html",
    "title": "Prerequsite test",
    "section": "",
    "text": "Instructions\n\nThis test is open book, open internet, open notes. You can use any resources you want to solve the problems.\nYou should be typing your answers in a Jupyter notebook.\nThe submission would be a link to a public GitHub repository containing the notebook. Fill this form to submit your solution.\nA random subset of students may have a viva post the exam. The viva would be based on the notebook and the solutions you have provided.\nThe test is open till 6th January 2022 9 PM. You can submit your solutions anytime before that.\nThis problem has to be solved individually. You cannot collaborate with anyone else.\nThe code should be written using Python.\nSome questions may require you to answer in text. You can use markdown cells to write your answers. Some questions may require you to write code. You can use code cells to write your code. Some questions may require you to write mathematical expressions. You can use LaTeX to write your expressions. You can write such LaTeX expressions in markdown cells.\nFor any other questions, please ask on the General channel on Slack.\n\n\n\n\nQuestions\n\nHow many multiplications and additions do you need to perform a matrix multiplication between a (n, k) and (k, m) matrix? Explain.\nWrite Python code to multiply the above two matrices. Solve using list of lists and then use numpy. Compare the timing of both solutions. Which one is faster? Why?\nFinding the highest element in a list requires one pass of the array. Finding the second highest element requires 2 passes of the the array. Using this method, what is the time complexity of finding the median of the array? Can you suggest a better method? Can you implement both these methods in Python and compare against numpy.median routine in terms of time?\nWhat is the gradient of the following function with respect to x and y? \\[\nx^2y+y^3\\sin(x)\n\\]\nUse JAX to confirm the gradient evaluated by your method matches the analytical solution corresponding to a few random values of x and y\nUse sympy to confirm that you obtain the same gradient analytically.\nCreate a Python nested dictionary to represent hierarchical information. We want to store record of students and their marks. Something like:\n\n2022\n\nBranch 1\n\nRoll Number: 1, Name: N, Marks:\n\nMaths: 100, English: 70 …\n\n\nBranch 2\n\n2023\n\nBranch 1\nBranch 2\n\n2024\n\nBranch 1\nBranch 2\n\n2025\n\nBranch 1\nBranch 2\n\n\nStore the same information using Python classes. We have an overall database which is a list of year objects. Each year contains a list of branches. Each branch contains a list of students. Each student has some properties like name, roll number and has marks in some subjects.\nUsing matplotlib plot the following functions on the domain: x = 0.5 to 100.0 in steps of 0.5.\n\n\\(y = x\\)\n\\(y = x^2\\)\n\\(y = \\frac{x^3}{100}\\)\n\\(y = \\sin(x)\\)\n\\(y = \\frac{\\sin(x)}{x}\\)\n\\(y = \\log(x)\\)\n\\(y = e^x\\)\n\nUsing numpy generate a matrix of size 20X5 containing random numbers drawn uniformly from the range of 1 to 2. Using Pandas create a dataframe out of this matrix. Name the columns of the dataframe as “a”, “b”, “c”, “d”, “e”. Find the column with the highest standard deviation. Find the row with the lowest mean.\nAdd a new column to the dataframe called “f” which is the sum of the columns “a”, “b”, “c”, “d”, “e”. Create another column called “g”. The value in the column “g” should be “LT8” if the value in the column “f” is less than 8 and “GT8” otherwise. Find the number of rows in the dataframe where the value in the column “g” is “LT8”. Find the standard deviation of the column “f” for the rows where the value in the column “g” is “LT8” and “GT8” respectively.\nWrite a small piece of code to explain broadcasting in numpy.\nWrite a function to compute the argmin of a numpy array. The function should take a numpy array as input and return the index of the minimum element. You can use the np.argmin function to verify your solution."
  },
  {
    "objectID": "quizzes.html",
    "href": "quizzes.html",
    "title": "Quizzes",
    "section": "",
    "text": "Prerequisites quiz, Released 4 Jan 2022"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Lecture #\nDate\nTopic\n\n\n\n\n1\n3 Jan\nIntroduction and Logistics [Slides]\n\n\nNone\n4 Jan\nPre-requisites quiz released\n\n\n2\n5 Jan\nConvention, Metrics, Classification, Regression [Slides]\n\n\n3\n10 Jan\nDecision Trees - 1[Slides][Notebook]\n\n\n4\n12 Jan\nDecision Trees - 2[Slides][Notebook]\n\n\n5\n17 Jan\nBias and Variance[Slides][Notebook on Python utils][Notebook on Grid Search]\n\n\nNone\n18 Jan\nQuiz 1"
  },
  {
    "objectID": "grading.html",
    "href": "grading.html",
    "title": "Grading Policy",
    "section": "",
    "text": "Quizzes: 60%\n\n10% each\nBest 6 out of 8\n\n\n\n\nAssignments: 40%\n\nVariable weight (e.g. some assignments would be 5%, some 10%, etc.)\nSome assignments would involve:\n\nMaking pull requests to public repositories\nWriting Hugging Face Spaces like demos\n\n\n\n\n\nBonus: up to 6%\n\nMaking a non-trivial pull request to a well-starred public repo (4%)\nGetting the PR accepted (2%)"
  }
]