[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Lecture #\nDate\nTopic\n\n\n\n\n1\n3 Jan\nIntroduction and Logistics [Slides]\n\n\nNone\n4 Jan\nPre-requisites quiz released\n\n\n2\n5 Jan\nConvention, Metrics, Classification, Regression [Slides]\n\n\n3\n10 Jan\nDecision Trees - 1[Slides][Notebook]\n\n\n4\n12 Jan\nDecision Trees - 2[Slides][Notebook]\n\n\n5\n17 Jan\nBias and Variance[Slides][Notebook on Python utils][Notebook on Grid Search]\n\n\nNone\n18 Jan\nQuiz 1\n\n\n6\n19 Jan\nBias, Variance 2, Cross Validation[Slides]\n\n\n7\n24 Jan\nEnsemble Methods[Slides]\n\n\n8\n31 Jan\nEnsemble Methods[Slides], Weighted samples in decision trees[Slides], Maths for ML-1 [Slides] [Notebook-1] [Notebook 2], [Streamlit app] Linear Regression [Slides]\n\n\n9\n2 Feb\nLinear Regression [Slides], Contour Plots [Slides], Geometric View of Linear Regression [Slides]\n\n\n10\n9 Feb\nLinear Regression II [Slides]\n\n\n11\n14 Feb\nGradient Descent [Slides], Taylor’s Series, Notebook on Taylor’s series, Reference on relationship between Taylor’s series and GD, Reference 2\n\n\n12\n16 Feb\nGradient Descent [Slides] Notebook\n\n\n13\n21 Feb\nGradient Descent continued, [Ridge Regression], [Streamlit demo], [Additional reading on SGD being an unbiased estimator]\n\n\n14\n23 Feb\nRidge regression, LASSO, [Interactive article on Optimization algorithms]\n\n\n15\n28 Feb\nLogistic regression [Slides], [Notebook] (best run locally to render interactive visualisations)\n\n\n16\n2 Mar\nLogistic regression [Slides]\n\n\n17\n14 Mar\nLogistic regression [Slides]\n\n\n18\n16 Mar\nMLP [Slides]"
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "FAQ",
    "section": "",
    "text": "Prerequisites\n\nWhat are the course prerequisites?\n\nThe course has no “formal” prerequisites like all courses at IITGn. However, it is assumed that you have a basic understanding of:\n\nprogramming (Python), and data structures (ES242 equivalent)\nprobability and statistics\nlinear algebra\ncalculus\n\n\nHow can I prepare for the prerequisite exam?\n\nYour UG course material should be sufficient to prepare for the exam.\nYou may additionally refer to the “prerequisite” reading section on the course homepage.\n\nWhat happens if I do not clear the prerequisite exam?\n\nYou will not be allowed to take the course.\n\nWhat do you mean by “clear” the exam?\n\nLike all courses at IITGn, the instructor will decide the cut-off for the exam. You will have to score above the cut-off to clear the exam. No cut-off will be revealed to the students apriori.\n\n\n\n\n\nQuizzes\n\nWhat happens if I miss a quiz due to any reason?\n\nThe quiz will be marked as 0.\nThe provision of best 6 out of 8 quizzes is designed keeping in mind such scenarios.\n\nWill the quizzes and end-semester exam be open book? Will I be allowed to carry notes?\n\nNo, the exams and quizzes will be closed book. You are not permitted to carry notes.\n\nHow soon can I expect to receive my answer sheets back?\n\nYou should expect to receive answer sheets back in 4-5 working days.\n\nIs there an end-semester exam or mid-semester exam?\n\nNo, there is no end-semester exam or mid-semester exam. However, some of the quizzes may be held in the exam slot. In total we will have 8 equal weightage quizzes. The best 6 out of them will be considered for the final grade.\n\nWill the quizzes be MCQs or subjective?\n\nThe quizzes may contain both the MCQs and subjective questions.\n\n\n\n\n\nAssignments\n\nWhat happens if I miss an assignment due to any reason?\n\nThere will no extensions for assignments.\n\nI have a doubt in the assignment. Whom should I write to?\n\nAsk on the slack General channel. If you don’t get a response within 2 days, write to the course instructor.\n\nI do not know Python. Can I code assignments in some other language?\n\nUnfortunately, no. You have to stick to Python.\n\nHow will you evaluate the assignment?\n\nThe assignments would be followed by a viva. The TAs would first check the code and compare against the submission. Any change from the submitted code is not allowed and any instance of the same would culminate in a warning. The TAs would run the code and ask a few questions. About 75% of these questions would be based on the assignment in question and about 25% would be based on the theory behind the concepts covered in the assignment.\nThe grade breakup would be: i) code runs correctly and solves the problem [50% marks]; ii) questions based on the assignment and student understanding of code [25% marks]; iii) code quality [12.5% marks]; iv) questions based on the theory behind the concepts covered in the assignments [12.5% marks]\n\nIs the assignment individual or group?\n\nThe assignment is TBA. In case of group, all team members get the same grade for the assignment.\n\n\n\n\n\nAttendance\n\nAttendance policy\n\nAttendance is not mandatory, but highly encouraged. Marks often correlated with attendance.\n\n\n\n\n\nProjects\n\nIs there a project component in the course?\n\nNo. There is no project component in the course.\n\n\n\n\n\nBonus\n\nCan I choose a PR of my choice.\n\nYes, you can choose a PR of your choice from a list of PRs decided by the teaching staff. The teaching staff hold the right to decide whether a PR is suitable or not."
  },
  {
    "objectID": "notebooks/posts/split.html",
    "href": "notebooks/posts/split.html",
    "title": "Dataset splitting for machine learning",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\n\n\n# Create a dataset with 3 features and 1000 samples for a classification problem\n\ndf = pd.DataFrame(np.random.randn(1000, 3), columns=['A', 'B', 'C'])\ndf['D'] = np.random.randint(0, 2, 1000)\n\ndf\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      0\n      0.112981\n      -0.033889\n      0.348708\n      1\n    \n    \n      1\n      1.821601\n      1.267423\n      0.274915\n      1\n    \n    \n      2\n      0.148040\n      -1.412712\n      -0.271345\n      1\n    \n    \n      3\n      0.004766\n      -1.209944\n      0.122512\n      1\n    \n    \n      4\n      0.854442\n      -0.559497\n      -0.605376\n      1\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      995\n      0.161444\n      -0.969567\n      -2.079664\n      0\n    \n    \n      996\n      1.615938\n      0.219218\n      -0.322223\n      0\n    \n    \n      997\n      0.501970\n      -0.874313\n      1.571102\n      1\n    \n    \n      998\n      0.386063\n      -1.481215\n      -1.974313\n      1\n    \n    \n      999\n      0.468528\n      1.060850\n      0.612252\n      1\n    \n  \n\n1000 rows × 4 columns\n\n\n\n\nX, y = df[['A', 'B', 'C']], df['D']\n\n\ntrain_X, test_X = X[:800], X[800:]\ntrain_y, test_y = y[:800], y[800:]\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\n\ndt = DecisionTreeClassifier(max_depth=2)\ndt.fit(train_X, train_y)\n\nDecisionTreeClassifier(max_depth=2)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.DecisionTreeClassifierDecisionTreeClassifier(max_depth=2)\n\n\n\nfrom sklearn import tree\ntree.plot_tree(dt)\n\n[Text(0.5, 0.8333333333333334, 'X[0] <= -0.17\\ngini = 0.5\\nsamples = 800\\nvalue = [400, 400]'),\n Text(0.25, 0.5, 'X[0] <= -0.307\\ngini = 0.495\\nsamples = 348\\nvalue = [157, 191]'),\n Text(0.125, 0.16666666666666666, 'gini = 0.499\\nsamples = 316\\nvalue = [153, 163]'),\n Text(0.375, 0.16666666666666666, 'gini = 0.219\\nsamples = 32\\nvalue = [4, 28]'),\n Text(0.75, 0.5, 'X[2] <= 1.656\\ngini = 0.497\\nsamples = 452\\nvalue = [243, 209]'),\n Text(0.625, 0.16666666666666666, 'gini = 0.495\\nsamples = 434\\nvalue = [239, 195]'),\n Text(0.875, 0.16666666666666666, 'gini = 0.346\\nsamples = 18\\nvalue = [4, 14]')]\n\n\n\n\n\n\ny_hat = dt.predict(test_X)\npd.DataFrame({\"y_true\": test_y, \"y_hat\": y_hat})\n\n\n\n\n\n  \n    \n      \n      y_true\n      y_hat\n    \n  \n  \n    \n      800\n      0\n      1\n    \n    \n      801\n      0\n      0\n    \n    \n      802\n      1\n      1\n    \n    \n      803\n      1\n      1\n    \n    \n      804\n      0\n      1\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      995\n      0\n      1\n    \n    \n      996\n      0\n      0\n    \n    \n      997\n      1\n      0\n    \n    \n      998\n      1\n      1\n    \n    \n      999\n      1\n      1\n    \n  \n\n200 rows × 2 columns\n\n\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\ntrain_scores = {}\ntest_scores = {}\n\nfor i in range(1, 20):\n    dt = DecisionTreeClassifier(max_depth=i)\n    dt.fit(train_X, train_y)\n    train_scores[i] = dt.score(train_X, train_y)\n    \n    test_scores[i] = dt.score(test_X, test_y)\n\n\nscores_df = pd.DataFrame({'train': train_scores, 'test': test_scores})\nscores_df.plot()\n\n<AxesSubplot:>"
  },
  {
    "objectID": "notebooks/posts/cnn-edge.html",
    "href": "notebooks/posts/cnn-edge.html",
    "title": "CNN",
    "section": "",
    "text": "import torch\nimport torch.nn.functional as F\nfrom torch import nn\nimport pandas as pd\nimport matplotlib.pyplot as plt # for making figures\nimport seaborn as sns\n%matplotlib inline\n\n\n# Create a tensor of size 6x6 with first three columns as 1 and rest as 0\nx = torch.zeros(6, 6)\nx[:, :3] = 1\nprint(x)\n\ntensor([[1., 1., 1., 0., 0., 0.],\n        [1., 1., 1., 0., 0., 0.],\n        [1., 1., 1., 0., 0., 0.],\n        [1., 1., 1., 0., 0., 0.],\n        [1., 1., 1., 0., 0., 0.],\n        [1., 1., 1., 0., 0., 0.]])\n\n\n\nx.shape\n\ntorch.Size([6, 6])\n\n\n\n# Plot the tensor with equal aspect ratio\nplt.figure(figsize=(6, 6))\nsns.heatmap(x, cbar=False, xticklabels=False, yticklabels=False, cmap='gray', annot=True)\n\n<AxesSubplot: >\n\n\n\n\n\n\n# Create a 3x3 kernel with first column as 1, second as 0 and third as -1\n\nk = torch.tensor([[1, 0, -1], [1, 0, -1], [1, 0, -1]]).float()\nprint(k)\n\ntensor([[ 1.,  0., -1.],\n        [ 1.,  0., -1.],\n        [ 1.,  0., -1.]])\n\n\n\n# Apply the kernel to the image\n\n\ny = F.conv2d(x.view(1, 1, 6, 6), k.view(1, 1, 3, 3))\nprint(y)\n\n# Create figure of size of y\nplt.figure(figsize=(y.shape[2], y.shape[3]))\nsns.heatmap(y[0, 0], cbar=False, xticklabels=False, yticklabels=False, cmap='gray', annot=True)\n\ntensor([[[[0., 3., 3., 0.],\n          [0., 3., 3., 0.],\n          [0., 3., 3., 0.],\n          [0., 3., 3., 0.]]]])\n\n\n<AxesSubplot: >\n\n\n\n\n\n\nim = plt.imread('lm.jpeg')\nplt.imshow(im)\n\n<matplotlib.image.AxesImage at 0x151220670>\n\n\n\n\n\n\n# Crop to left 180 X 180 pixels\n\nim = im[:180, :180]\nplt.imshow(im, cmap='gray')\n\n<matplotlib.image.AxesImage at 0x1512b3cd0>\n\n\n\n\n\n\n# Convert to grayscale\nim = im.mean(axis=2)\nplt.imshow(im, cmap='gray')\n\n<matplotlib.image.AxesImage at 0x15133dac0>\n\n\n\n\n\n\nim.shape\n\n(180, 180)\n\n\n\n# Detect edges using our filter\n\nk = torch.tensor([[1, 0, -1], [1, 0, -1], [1, 0, -1]]).float()\n\n# Apply the kernel to the image\ny = F.conv2d(torch.tensor(im).float().view(1, 1, 180, 180), k.view(1, 1, 3, 3))\n\n\n\n# plot the result\n#plt.figure(figsize=(y.shape[2], y.shape[3]))\nplt.imshow(y[0, 0], cmap='gray')\n\n<matplotlib.image.AxesImage at 0x197097430>\n\n\n\n\n\n\n# Detect horizontal edges using our filter\n\nk = torch.tensor([[1, 0, -1], [1, 0, -1], [1, 0, -1]]).float().T\n\n# Apply the kernel to the image\ny = F.conv2d(torch.tensor(im).float().view(1, 1, 180, 180), k.view(1, 1, 3, 3))\nplt.imshow(y[0, 0], cmap='gray')\n\n<matplotlib.image.AxesImage at 0x197105730>"
  },
  {
    "objectID": "notebooks/posts/projection.html",
    "href": "notebooks/posts/projection.html",
    "title": "Linear Regression: Geometric Perspective",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\n# Two three-dimensional vectors\nv1 = np.array([1, 1, 1])\nv2 = np.array([2, -2, 2])\n\n# y-vector\ny = np.array([2.5, -0.8, 1.2])\n\n\n# plot the vectors in 3D\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, projection='3d')\nax.quiver(0, 0, 0, v1[0], v1[1], v1[2], color='r', label='v1')\nax.quiver(0, 0, 0, v2[0], v2[1], v2[2], color='b', label='v2')\nax.quiver(0, 0, 0, y[0], y[1], y[2], color='g', label='y')\n\nax.set_xlim(0, 3)\nax.set_ylim(0, 4)\nax.set_zlim(0, 3)\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.legend()\n\nax.view_init(elev=45, azim=60)\n\n\n\n\n\ntheta = np.linalg.lstsq(np.array([v1, v2]).T, y, rcond=None)[0]\ntheta\n\narray([0.525 , 0.6625])\n\n\n\n# Projection of y onto the plane spanned by v1 and v2\ny_proj = np.dot(np.array([v1, v2]).T, theta)\ny_proj\n\narray([ 1.85, -0.8 ,  1.85])\n\n\n\n# Plot the x=z plane filled with color black\nfig, ax = plt.subplots(figsize=(8, 8))\n# 3d projection\nax = fig.add_subplot(111, projection='3d')\nxx, zz = np.meshgrid(np.linspace(-1, 4, 100), np.linspace(-1, 4, 100))\nyy = np.zeros_like(xx)\nax.plot_surface(xx, yy, zz, alpha=0.2, color='k')\n\n\n# plot the vectors in 3D\nax.quiver(0, 0, 0, v1[0], v1[1], v1[2], color='r', label='v1')\nax.quiver(0, 0, 0, v2[0], v2[1], v2[2], color='b', label='v2')\nax.quiver(0, 0, 0, y[0], y[1], y[2], color='g', label='y')\n\n\n# Limit the view to the x-z plane\n\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\n\n# Set the view angle so that we can see the x-z plane appear at a 45 degree angle\n#ax.view_init(azim=70, elev=200)\nax.view_init(elev=60, azim=-80, roll=90)\nax.view_init(120, -120, -120)\n#ax.view_init(roll=45)\n#ax.view_init(elev=30, azim=45, roll=15)\nax.set_ylim(-4, 4)\nax.set_xlim(0, 4)\nax.set_zlim(0, 4)\n\n\n# Plot the projection of y onto the plane spanned by v1 and v2\nax.quiver(0, 0, 0, y_proj[0], y_proj[1], y_proj[2], color='k', label='Projection of y onto\\n the plane spanned by v1 and v2')\nplt.legend()\n\n<matplotlib.legend.Legend at 0x111d52730>"
  },
  {
    "objectID": "notebooks/posts/dt-reg.html",
    "href": "notebooks/posts/dt-reg.html",
    "title": "DT Regression",
    "section": "",
    "text": "import pandas as pd\n\n\ndf = pd.read_csv(\"mins-played.csv\")\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      Day\n      Outlook\n      Temp\n      Humidity\n      Wind\n      Minutes Played\n    \n  \n  \n    \n      0\n      D1\n      Sunny\n      Hot\n      High\n      Weak\n      20\n    \n    \n      1\n      D2\n      Sunny\n      Hot\n      High\n      Strong\n      24\n    \n    \n      2\n      D3\n      Overcast\n      Hot\n      High\n      Weak\n      40\n    \n    \n      3\n      D4\n      Rain\n      Mild\n      High\n      Weak\n      50\n    \n    \n      4\n      D5\n      Rain\n      Cool\n      Normal\n      Weak\n      60\n    \n    \n      5\n      D6\n      Rain\n      Cool\n      Normal\n      Strong\n      10\n    \n    \n      6\n      D7\n      Overcast\n      Cool\n      Normal\n      Strong\n      4\n    \n    \n      7\n      D8\n      Sunny\n      Mild\n      High\n      Weak\n      10\n    \n    \n      8\n      D9\n      Sunny\n      Cool\n      Normal\n      Weak\n      60\n    \n    \n      9\n      D10\n      Rain\n      Mild\n      Normal\n      Weak\n      40\n    \n    \n      10\n      D11\n      Sunny\n      Mild\n      High\n      Strong\n      45\n    \n    \n      11\n      D12\n      Overcast\n      Mild\n      High\n      Strong\n      40\n    \n    \n      12\n      D13\n      Overcast\n      Hot\n      Normal\n      Weak\n      35\n    \n    \n      13\n      D14\n      Rain\n      Mild\n      High\n      Strong\n      20\n    \n  \n\n\n\n\n\ndf[\"Minutes Played\"].std()\n\n18.3111087402348\n\n\n\nimport numpy as np\n# np.std(df[\"Minutes Played\"].values)\n\n\ndf.query(\"Wind=='Weak'\")[\"Minutes Played\"].std()*len(df.query(\"Wind=='Weak'\"))/len(df)\n\n10.180585192846463\n\n\n\ndf.query(\"Wind=='Strong'\")[\"Minutes Played\"].std()*len(df.query(\"Wind=='Strong'\"))/len(df)\n\n6.933944897151599\n\n\n\nout = {}\nfor temp in df[\"Temp\"].unique():\n    print(temp)\n    out[temp] = df.query(\"Temp==@temp\")[\"Minutes Played\"].std()*len(df.query(\"Temp==@temp\"))/len(df)\n    print(out[temp])\n    print()\n\nHot\n2.6636888135137133\n\nMild\n6.696785704762413\n\nCool\n8.770699519880226\n\n\n\n\ndf[\"Minutes Played\"].std() - pd.Series(out).sum()\n\n0.17993470207844808"
  },
  {
    "objectID": "notebooks/posts/autodiff-jax-torch.html",
    "href": "notebooks/posts/autodiff-jax-torch.html",
    "title": "AutoDiff in JAX and PyTorch",
    "section": "",
    "text": "import jax.numpy as jnp\nimport jax\n\nimport torch\nprint(torch.__version__)\nprint(jax.__version__)\n\nArray(1., dtype=float32, weak_type=True)\n\n\n\ndef f(x):\n    return jnp.sin(x)\n\nArray(1., dtype=float32, weak_type=True)\n\n\n\nz = torch.tensor(0.0, requires_grad=True)\ntorch.sin(z).backward()\nprint(jax.grad(f)(0.0), z.grad)\n\ntensor(1.)\n\n\n\ndef f(x):\n    return jnp.abs(x)\n\n\nz1 = torch.tensor(0.0001, requires_grad=True)\ntorch.abs(z1).backward()\n\nz2 = torch.tensor(-0.0001, requires_grad=True)\ntorch.abs(z2).backward()\n\nz3 = torch.tensor(0.0, requires_grad=True)\ntorch.abs(z3).backward()\n\nprint(jax.grad(f)(0.0), z1.grad, z2.grad, z3.grad)\n\n1.0 tensor(1.) tensor(-1.) tensor(0.)\n\n\n\n# Use functorch\n\nimport functorch\n\nImportError: dlopen(/Users/nipun/miniconda3/lib/python3.9/site-packages/functorch/_C.cpython-39-darwin.so, 0x0002): Symbol not found: __ZN2at4_ops10as_strided4callERKNS_6TensorEN3c108ArrayRefINS5_6SymIntEEES8_NS5_8optionalIS7_EE\n  Referenced from: <12715304-4308-3E9B-A374-E4ADB3345E65> /Users/nipun/miniconda3/lib/python3.9/site-packages/functorch/_C.cpython-39-darwin.so\n  Expected in:     <22ECBAD5-EEDD-3C80-9B5A-0564B60B6811> /Users/nipun/miniconda3/lib/python3.9/site-packages/torch/lib/libtorch_cpu.dylib\n\n\n\n\n\n'1.12.1'"
  },
  {
    "objectID": "notebooks/posts/taylor.html",
    "href": "notebooks/posts/taylor.html",
    "title": "Taylor Series",
    "section": "",
    "text": "import jax.numpy as jnp\nfrom jax import random, jit, vmap, grad, jacfwd, jacrev, hessian, value_and_grad\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\n# Define the function to be approximated\n\ndef f(x):\n    return jnp.sin(x)\n\n\n# Plot the function\n\nx = jnp.linspace(-jnp.pi, jnp.pi, 100)\nplt.plot(x, f(x))\n\n\n\n\n\n# First order Taylor approximation for f(x) at x = 0\n\ndef taylor1(f, x, x0=0.):\n    return f(x0) + grad(f)(x0) * (x - x0)\n\n\n# Plot the Taylor approximation\n\nplt.plot(x, f(x), label='f(x)')\nplt.plot(x, taylor1(f, x), label='Taylor approximation')\n\n\n\n\n\n# factorial function in JAX\n\ndef factorial(n):\n    return jnp.prod(jnp.arange(1, n + 1))\n\n\n# Find the nth order Taylor approximation for f(x) at x = 0\n\ndef taylor(f, x, n, x0=0.):\n    grads = {0:f}\n    output = f(x0)\n    for i in range(1, n+1):\n        grads[i] = grad(grads[i-1])\n        output += grads[i](x0) * (x - x0)**i / factorial(i)\n    return output\n\n\nplt.plot(x, f(x), label='f(x)', lw=5)\nplt.plot(x, taylor(f, x, 1), label='Taylor approximation, n=1')\nplt.plot(x, taylor(f, x, 3), label='Taylor approximation, n=3')\nplt.plot(x, taylor(f, x, 5), label='Taylor approximation, n=5')\nplt.legend()\n\n<matplotlib.legend.Legend at 0x1aea5ea90>\n\n\n\n\n\n\nx = jnp.linspace(-4, 4, 100)\n\ndef g(x):\n    return x**2\n\nplt.plot(x, g(x), label='g(x)', lw=4, alpha=0.5)\nplt.plot(x, taylor(g, x, 1), label='Taylor approximation, n=1')\nplt.plot(x, taylor(g, x, 2), label='Taylor approximation, n=3', ls='--')\n\n\n\n\n\nplt.plot(x, g(x), label='g(x)', lw=4, alpha=0.5)\nplt.plot(x, taylor(g, x, 1, 4.1), label='Taylor approximation, n=1')\nplt.plot(x, taylor(g, x, 2, 4.1), label='Taylor approximation, n=3', ls='--')\nplt.ylim((-2, 20))\n\n(-2.0, 20.0)"
  },
  {
    "objectID": "notebooks/posts/hyperparameter-1.html",
    "href": "notebooks/posts/hyperparameter-1.html",
    "title": "Grid Search",
    "section": "",
    "text": "Hyperparameter Tuning\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\n\n\n\nDataset creation\n\n# Create a DataFrame for classification containing four real features and one binary target\n\ndf = pd.DataFrame({\n    'feature1': np.random.randint(0, 100, 100),\n    'feature2': np.random.randint(0, 100, 100),\n    'feature3': np.random.randint(0, 100, 100),\n    'feature4': np.random.randint(0, 100, 100),\n    'target': np.random.randint(0, 2, 100)\n})\n\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      feature1\n      feature2\n      feature3\n      feature4\n      target\n    \n  \n  \n    \n      0\n      29\n      14\n      66\n      83\n      1\n    \n    \n      1\n      68\n      70\n      87\n      72\n      1\n    \n    \n      2\n      42\n      5\n      40\n      67\n      1\n    \n    \n      3\n      2\n      54\n      79\n      0\n      1\n    \n    \n      4\n      81\n      36\n      35\n      75\n      0\n    \n  \n\n\n\n\n\ntrain_df = df[:50]\nvalidation_df = df[50:80]\n\n\ndt = DecisionTreeClassifier()\ndt.fit(train_df[['feature1', 'feature2', 'feature3', 'feature4']], train_df['target'])\ndt\n\nDecisionTreeClassifier()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.DecisionTreeClassifierDecisionTreeClassifier()\n\n\n\ndt.score(validation_df[['feature1', 'feature2', 'feature3', 'feature4']], validation_df['target'])\n\n0.5333333333333333\n\n\n\ndt = DecisionTreeClassifier(criterion='entropy', max_depth=2)\ndt.fit(train_df[['feature1', 'feature2', 'feature3', 'feature4']], train_df['target'])\ndt.score(validation_df[['feature1', 'feature2', 'feature3', 'feature4']], validation_df['target'])\n\n0.5666666666666667\n\n\n\nhyperparams = {'criterion': ['gini', 'entropy'],\n               'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10],\n               'min_samples_split': [2, 3, 4, 5, 6, 7, 8, 9, 10]}\n\n\nout = {}\nfor c in hyperparams['criterion']:\n    for d in hyperparams['max_depth']:\n        for s in hyperparams['min_samples_split']:\n            dt = DecisionTreeClassifier(criterion=c, max_depth=d, min_samples_split=s)\n            dt.fit(train_df[['feature1', 'feature2', 'feature3', 'feature4']], train_df['target'])\n            out[(c, d, s)] = dt.score(validation_df[['feature1', 'feature2', 'feature3', 'feature4']], validation_df['target'])\n\n\nhp_ser = pd.Series(out)\nhp_ser.sort_values(ascending=False)\n\nentropy  10  10    0.766667\n         7   7     0.766667\n         9   8     0.766667\n         8   10    0.766667\n             9     0.766667\n                     ...   \ngini     10  5     0.500000\n         8   3     0.500000\n         7   4     0.500000\n             3     0.500000\n         5   2     0.500000\nLength: 162, dtype: float64\n\n\n\nhp_ser.idxmax()\n\n('entropy', 4, 6)\n\n\n\nbest_dt = DecisionTreeClassifier(criterion='entropy', max_depth=4, min_samples_split=6)\n\n\nbest_dt.fit(df[:80][['feature1', 'feature2', 'feature3', 'feature4']], df[:80]['target'])\n\nDecisionTreeClassifier(criterion='entropy', max_depth=4, min_samples_split=6)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.DecisionTreeClassifierDecisionTreeClassifier(criterion='entropy', max_depth=4, min_samples_split=6)\n\n\n\nbest_dt.score(df[80:][['feature1', 'feature2', 'feature3', 'feature4']], df[80:]['target'])\n\n0.45\n\n\n\n\nWithout using multiple nested loops\n\nprint(hyperparams.items(), len(hyperparams.items()))\n\ndict_items([('criterion', ['gini', 'entropy']), ('max_depth', [2, 3, 4, 5, 6, 7, 8, 9, 10]), ('min_samples_split', [2, 3, 4, 5, 6, 7, 8, 9, 10])]) 3\n\n\n\ndef print_vec(x, y, z):\n    print(f\"[{x} \\n{y} \\n{z}]\")\nprint_vec(*hyperparams.items())\n\n[('criterion', ['gini', 'entropy']) \n('max_depth', [2, 3, 4, 5, 6, 7, 8, 9, 10]) \n('min_samples_split', [2, 3, 4, 5, 6, 7, 8, 9, 10])]\n\n\n\nlist(zip(*hyperparams.items()))\n\n[('criterion', 'max_depth', 'min_samples_split'),\n (['gini', 'entropy'],\n  [2, 3, 4, 5, 6, 7, 8, 9, 10],\n  [2, 3, 4, 5, 6, 7, 8, 9, 10])]\n\n\n\nkeys, values = zip(*hyperparams.items())\n\n\nkeys\n\n('criterion', 'max_depth', 'min_samples_split')\n\n\n\nvalues\n\n(['gini', 'entropy'],\n [2, 3, 4, 5, 6, 7, 8, 9, 10],\n [2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\nimport itertools\nlist(itertools.product(*values))[::10]\n\n[('gini', 2, 2),\n ('gini', 3, 3),\n ('gini', 4, 4),\n ('gini', 5, 5),\n ('gini', 6, 6),\n ('gini', 7, 7),\n ('gini', 8, 8),\n ('gini', 9, 9),\n ('gini', 10, 10),\n ('entropy', 3, 2),\n ('entropy', 4, 3),\n ('entropy', 5, 4),\n ('entropy', 6, 5),\n ('entropy', 7, 6),\n ('entropy', 8, 7),\n ('entropy', 9, 8),\n ('entropy', 10, 9)]\n\n\n\nv = next(itertools.product(*values))\nprint(v)\n\n('gini', 2, 2)\n\n\n\nprint_vec(*zip(keys, v))\n\n[('criterion', 'gini') \n('max_depth', 2) \n('min_samples_split', 2)]\n\n\n\ndef print_dict(**kwargs):\n    print(kwargs)\n\nprint_dict(**(dict(zip(keys, v))))\n\n{'criterion': 'gini', 'max_depth': 2, 'min_samples_split': 2}\n\n\n\nout = {}\nfor v in itertools.product(*values):\n    params = dict(zip(keys, v))\n    dt= DecisionTreeClassifier(**params)\n    dt.fit(train_df[['feature1', 'feature2', 'feature3', 'feature4']], train_df['target'])\n    out[(params['criterion'], params['max_depth'], params['min_samples_split'])] = dt.score(validation_df[['feature1', 'feature2', 'feature3', 'feature4']], validation_df['target'])\n    \n\n\npd.Series(out).sort_values(ascending=False)\n\nentropy  10  10    0.766667\n         7   7     0.766667\n         9   8     0.766667\n         8   10    0.766667\n             9     0.766667\n                     ...   \n         3   3     0.500000\n             4     0.500000\n             5     0.500000\ngini     10  5     0.500000\n             3     0.500000\nLength: 162, dtype: float64"
  },
  {
    "objectID": "notebooks/posts/gd.html",
    "href": "notebooks/posts/gd.html",
    "title": "Gradient Descent",
    "section": "",
    "text": "import jax.numpy as jnp\nfrom jax import random, jit, vmap, grad, jacfwd, jacrev, hessian, value_and_grad\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\n# Simple 2D quadratic function\ndef f(theta_0, theta_1):\n    return theta_0**2 + theta_1**2\n\n\n# Plot surface and contour plots for f using jax.vmap\ndef create_plot(f):\n    theta_0 = jnp.linspace(-2, 2, 100)\n    theta_1 = jnp.linspace(-2, 2, 100)\n    theta_0, theta_1 = jnp.meshgrid(theta_0, theta_1)\n    f_vmap = jnp.vectorize(f, signature='(),()->()')\n    f_vals = f_vmap(theta_0, theta_1)\n\n    # Create a figure with 2 subplots (3d surface and 2d contour)\n    fig = plt.figure(figsize=(12, 4))\n    ax1 = fig.add_subplot(121, projection='3d')\n    ax2 = fig.add_subplot(122)\n\n    # Plot surface and contour plots\n    temp = ax1.plot_surface(theta_0, theta_1, f_vals, cmap='viridis')\n\n    # Filled contour plot and marked level set values using clabel\n    # Set 20 levels between min and max of f_vals\n    levels = jnp.linspace(0.5, int(jnp.max(f_vals))+0.5, 11)\n\n    contours = ax2.contour(theta_0, theta_1, f_vals, levels=levels, cmap='viridis')\n    ax2.clabel(contours, inline=True, fontsize=8)\n\n    # Fill using imshow\n    ax2.imshow(f_vals, extent=[-2, 2, -2, 2], origin='lower', cmap='viridis', alpha=0.5)\n  \n    # Find the global minimum of f using jax.scipy.optimize.minimize\n    from jax.scipy.optimize import minimize\n    def f_min(theta):\n        return f(theta[0], theta[1])\n    res = minimize(f_min, jnp.array([0., 0.]), method='BFGS')\n    theta_min = res.x\n    f_min = res.fun\n    print(f'Global minimum: {f_min} at {theta_min}')\n    # Plot the global minimum\n    ax2.scatter(theta_min[0], theta_min[1], marker='x', color='red', s=100)\n\n    \n\n    ax2.set_aspect('equal')\n\n    # Add labels\n    ax1.set_xlabel(r'$\\theta_0$')\n    ax1.set_ylabel(r'$\\theta_1$')\n    ax1.set_zlabel(r'$f(\\theta_0, \\theta_1)$')\n    ax2.set_xlabel(r'$\\theta_0$')\n    ax2.set_ylabel(r'$\\theta_1$')\n\n    # Add colorbar\n    fig.colorbar(temp, ax=ax1, shrink=0.5, aspect=5)\n\n    # Tight layout\n    plt.tight_layout()\n\n\ncreate_plot(f)\n\nGlobal minimum: 0.0 at [0. 0.]\n\n\n\n\n\n\n# Gradient of f at a given point\ndef grad_f(theta_0, theta_1):\n    return grad(f, argnums=(0, 1))(theta_0, theta_1)\n\n\ngrad_f(2., 1.)\n\n(Array(4., dtype=float32, weak_type=True),\n Array(2., dtype=float32, weak_type=True))\n\n\n\ntheta = jnp.array([2., 1.])\ntheta\n\nArray([2., 1.], dtype=float32)\n\n\n\nf(*theta)\n\nArray(5., dtype=float32)\n\n\n\njnp.array(grad_f(*theta))\n\nArray([4., 2.], dtype=float32)\n\n\n\nlr = 0.1\ntheta = theta- lr * jnp.array(grad_f(*theta))\ntheta\n\nArray([1.6, 0.8], dtype=float32)\n\n\n\nf(*theta)\n\nArray(3.2000003, dtype=float32)\n\n\n\n# Gradient descent loop\n\n# Initial parameters\ntheta = jnp.array([2., 1.])\n\n# Store parameters and function values for plotting\ntheta_vals = [theta]\nf_vals = [f(*theta)]\n\nfor i in range(10):\n    theta = theta - lr * jnp.array(grad_f(*theta))\n    theta_vals.append(theta)\n    f_vals.append(f(*theta))\n    print(f'Iteration {i}: theta = {theta}, f = {f(*theta)}')\n\ntheta_vals = jnp.array(theta_vals)\nf_vals = jnp.array(f_vals)\n\nIteration 0: theta = [1.6 0.8], f = 3.200000286102295\nIteration 1: theta = [1.28 0.64], f = 2.047999858856201\nIteration 2: theta = [1.0239999  0.51199996], f = 1.3107198476791382\nIteration 3: theta = [0.8191999  0.40959996], f = 0.8388606309890747\nIteration 4: theta = [0.6553599  0.32767996], f = 0.5368707776069641\nIteration 5: theta = [0.52428794 0.26214397], f = 0.34359729290008545\nIteration 6: theta = [0.41943035 0.20971517], f = 0.21990226209163666\nIteration 7: theta = [0.3355443  0.16777214], f = 0.14073745906352997\nIteration 8: theta = [0.26843542 0.13421771], f = 0.09007196873426437\nIteration 9: theta = [0.21474834 0.10737417], f = 0.05764605849981308\n\n\n\n# Plot the cost vs iterations\nplt.plot(f_vals)\n\n\n\n\n\n# Simple dataset for linear regression\n\nX = jnp.array([[1.], [2.], [3.]])\ny = jnp.array([1., 2.2, 2.8])\n\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X, y)\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LinearRegressionLinearRegression()\n\n\n\nlr.coef_, lr.intercept_\n\n(array([0.9000001], dtype=float32), 0.19999981)\n\n\n\n# Cost function for linear regression using jax.vmap\ndef cost(theta_0, theta_1):\n    y_hat = (theta_0 + theta_1 * X).flatten()\n    #print(y_hat, y, y-y_hat, (y-y_hat)**2)\n    return jnp.mean((y_hat- y)**2)\n    \n# Plot surface and contour plots for cost function\n#create_plot(cost)\n\n\ncost(2.0, 2.0)\n\nArray(16.826666, dtype=float32)\n\n\n\n(3**2 + 3.8**2 + 5.2**2)/3.\n\n16.826666666666668\n\n\n\n# Gradient of cost function at a given point\ndef grad_cost(theta_0, theta_1):\n    return jnp.array(grad(cost, argnums=(0, 1))(theta_0, theta_1))\n\ngrad_cost(2.0, 2.0)\n\nArray([ 8.      , 17.466667], dtype=float32)\n\n\n\ndef grad_cost_manual(theta_0, theta_1):\n    y_hat = (theta_0 + theta_1 * X).flatten()\n    return jnp.array([2*jnp.mean(y_hat - y), 2*jnp.mean((y_hat - y) * X.flatten())])\n\n\ngrad_cost_manual(2.0, 2.0)\n\nArray([ 8.      , 17.466667], dtype=float32)\n\n\n\n# Plotting cost surface and contours for three points in X individually\n\ndef cost_i(theta_0, theta_1, i = 1):\n    y_hat = theta_0 + theta_1 * X[i-1:i]\n    return jnp.mean((y_hat- y[i-1:i])**2)\n\n\n(cost_i(2.0, 2.0, 1) + cost_i(2.0, 2.0, 2) + cost_i(2.0, 2.0, 3))/3.0\n\nArray(16.826666, dtype=float32)\n\n\n\nfrom functools import partial\n\n\n# Plot surface and contour plots for cost function\nfor i in range(1, 4):\n    cost_i_p = partial(cost_i, i=i)\n    create_plot(cost_i_p)\n\nGlobal minimum: 0.0 at [0.5 0.5]\nGlobal minimum: 0.0 at [0.44000003 0.88000005]\nGlobal minimum: 0.0 at [0.28000003 0.84      ]\n\n\n\n\n\n\n\n\n\n\n\n\ngrad_cost_1 = grad(cost_i, argnums=(0, 1))\ngrad_cost_1(2.0, 2.0)\n\n(Array(6., dtype=float32, weak_type=True),\n Array(6., dtype=float32, weak_type=True))\n\n\n\njnp.array(grad_cost_1(2.0, 2.0, 1)), jnp.array(grad_cost_1(2.0, 2.0, 2)), jnp.array(grad_cost_1(2.0, 2.0, 3))\n\n(Array([6., 6.], dtype=float32),\n Array([ 7.6, 15.2], dtype=float32),\n Array([10.4     , 31.199999], dtype=float32))"
  },
  {
    "objectID": "notebooks/posts/mle.html",
    "href": "notebooks/posts/mle.html",
    "title": "ES654",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\ndata = np.array([1, 1, 1, 1, 1, 1, 1, 1, 0, 0])\n\n\nn_h = np.sum(data)\nn_t = len(data) - n_h\n    \n\n\nn_h, n_t\n\n(8, 2)\n\n\n\ndef likelihood(theta):\n    return theta**n_h * (1-theta)**n_t\n\n\ndef log_likelihood(theta):\n    return n_h * np.log(theta) + n_t * np.log(1-theta)\n\n\nlikelihood(0.1)\n\n8.100000000000005e-09\n\n\n\nlikelihood(0.9)\n\n0.004304672099999999\n\n\n\nlikelihood(0.8)\n\n0.0067108864\n\n\n\nfig, ax = plt.subplots(nrows=2, sharex=True)\nx_lin = np.linspace(0.01, 0.99, 100)\ny_lin = likelihood(x_lin)\ny_lin_ll = log_likelihood(x_lin)\nax[0].plot(x_lin, y_lin)\nax[1].plot(x_lin, y_lin_ll)\n\n\n\n\n\nimport torch\n\ntheta = 0.2\nbn = torch.distributions.Bernoulli(probs= theta)\n\ndata = []\nfor i in range(100):\n    data.append(bn.sample())\n\ntensor(59.)"
  },
  {
    "objectID": "notebooks/posts/log-sum-exp.html",
    "href": "notebooks/posts/log-sum-exp.html",
    "title": "ES654",
    "section": "",
    "text": "import torch\n\n\nxs = torch.linspace(0.01, 1, 1000)\nxs\n\ntensor([0.0100, 0.0110, 0.0120, 0.0130, 0.0140, 0.0150, 0.0159, 0.0169, 0.0179,\n        0.0189, 0.0199, 0.0209, 0.0219, 0.0229, 0.0239, 0.0249, 0.0259, 0.0268,\n        0.0278, 0.0288, 0.0298, 0.0308, 0.0318, 0.0328, 0.0338, 0.0348, 0.0358,\n        0.0368, 0.0377, 0.0387, 0.0397, 0.0407, 0.0417, 0.0427, 0.0437, 0.0447,\n        0.0457, 0.0467, 0.0477, 0.0486, 0.0496, 0.0506, 0.0516, 0.0526, 0.0536,\n        0.0546, 0.0556, 0.0566, 0.0576, 0.0586, 0.0595, 0.0605, 0.0615, 0.0625,\n        0.0635, 0.0645, 0.0655, 0.0665, 0.0675, 0.0685, 0.0695, 0.0705, 0.0714,\n        0.0724, 0.0734, 0.0744, 0.0754, 0.0764, 0.0774, 0.0784, 0.0794, 0.0804,\n        0.0814, 0.0823, 0.0833, 0.0843, 0.0853, 0.0863, 0.0873, 0.0883, 0.0893,\n        0.0903, 0.0913, 0.0923, 0.0932, 0.0942, 0.0952, 0.0962, 0.0972, 0.0982,\n        0.0992, 0.1002, 0.1012, 0.1022, 0.1032, 0.1041, 0.1051, 0.1061, 0.1071,\n        0.1081, 0.1091, 0.1101, 0.1111, 0.1121, 0.1131, 0.1141, 0.1150, 0.1160,\n        0.1170, 0.1180, 0.1190, 0.1200, 0.1210, 0.1220, 0.1230, 0.1240, 0.1250,\n        0.1259, 0.1269, 0.1279, 0.1289, 0.1299, 0.1309, 0.1319, 0.1329, 0.1339,\n        0.1349, 0.1359, 0.1368, 0.1378, 0.1388, 0.1398, 0.1408, 0.1418, 0.1428,\n        0.1438, 0.1448, 0.1458, 0.1468, 0.1477, 0.1487, 0.1497, 0.1507, 0.1517,\n        0.1527, 0.1537, 0.1547, 0.1557, 0.1567, 0.1577, 0.1586, 0.1596, 0.1606,\n        0.1616, 0.1626, 0.1636, 0.1646, 0.1656, 0.1666, 0.1676, 0.1686, 0.1695,\n        0.1705, 0.1715, 0.1725, 0.1735, 0.1745, 0.1755, 0.1765, 0.1775, 0.1785,\n        0.1795, 0.1805, 0.1814, 0.1824, 0.1834, 0.1844, 0.1854, 0.1864, 0.1874,\n        0.1884, 0.1894, 0.1904, 0.1914, 0.1923, 0.1933, 0.1943, 0.1953, 0.1963,\n        0.1973, 0.1983, 0.1993, 0.2003, 0.2013, 0.2023, 0.2032, 0.2042, 0.2052,\n        0.2062, 0.2072, 0.2082, 0.2092, 0.2102, 0.2112, 0.2122, 0.2132, 0.2141,\n        0.2151, 0.2161, 0.2171, 0.2181, 0.2191, 0.2201, 0.2211, 0.2221, 0.2231,\n        0.2241, 0.2250, 0.2260, 0.2270, 0.2280, 0.2290, 0.2300, 0.2310, 0.2320,\n        0.2330, 0.2340, 0.2350, 0.2359, 0.2369, 0.2379, 0.2389, 0.2399, 0.2409,\n        0.2419, 0.2429, 0.2439, 0.2449, 0.2459, 0.2468, 0.2478, 0.2488, 0.2498,\n        0.2508, 0.2518, 0.2528, 0.2538, 0.2548, 0.2558, 0.2568, 0.2577, 0.2587,\n        0.2597, 0.2607, 0.2617, 0.2627, 0.2637, 0.2647, 0.2657, 0.2667, 0.2677,\n        0.2686, 0.2696, 0.2706, 0.2716, 0.2726, 0.2736, 0.2746, 0.2756, 0.2766,\n        0.2776, 0.2786, 0.2795, 0.2805, 0.2815, 0.2825, 0.2835, 0.2845, 0.2855,\n        0.2865, 0.2875, 0.2885, 0.2895, 0.2905, 0.2914, 0.2924, 0.2934, 0.2944,\n        0.2954, 0.2964, 0.2974, 0.2984, 0.2994, 0.3004, 0.3014, 0.3023, 0.3033,\n        0.3043, 0.3053, 0.3063, 0.3073, 0.3083, 0.3093, 0.3103, 0.3113, 0.3123,\n        0.3132, 0.3142, 0.3152, 0.3162, 0.3172, 0.3182, 0.3192, 0.3202, 0.3212,\n        0.3222, 0.3232, 0.3241, 0.3251, 0.3261, 0.3271, 0.3281, 0.3291, 0.3301,\n        0.3311, 0.3321, 0.3331, 0.3341, 0.3350, 0.3360, 0.3370, 0.3380, 0.3390,\n        0.3400, 0.3410, 0.3420, 0.3430, 0.3440, 0.3450, 0.3459, 0.3469, 0.3479,\n        0.3489, 0.3499, 0.3509, 0.3519, 0.3529, 0.3539, 0.3549, 0.3559, 0.3568,\n        0.3578, 0.3588, 0.3598, 0.3608, 0.3618, 0.3628, 0.3638, 0.3648, 0.3658,\n        0.3668, 0.3677, 0.3687, 0.3697, 0.3707, 0.3717, 0.3727, 0.3737, 0.3747,\n        0.3757, 0.3767, 0.3777, 0.3786, 0.3796, 0.3806, 0.3816, 0.3826, 0.3836,\n        0.3846, 0.3856, 0.3866, 0.3876, 0.3886, 0.3895, 0.3905, 0.3915, 0.3925,\n        0.3935, 0.3945, 0.3955, 0.3965, 0.3975, 0.3985, 0.3995, 0.4005, 0.4014,\n        0.4024, 0.4034, 0.4044, 0.4054, 0.4064, 0.4074, 0.4084, 0.4094, 0.4104,\n        0.4114, 0.4123, 0.4133, 0.4143, 0.4153, 0.4163, 0.4173, 0.4183, 0.4193,\n        0.4203, 0.4213, 0.4223, 0.4232, 0.4242, 0.4252, 0.4262, 0.4272, 0.4282,\n        0.4292, 0.4302, 0.4312, 0.4322, 0.4332, 0.4341, 0.4351, 0.4361, 0.4371,\n        0.4381, 0.4391, 0.4401, 0.4411, 0.4421, 0.4431, 0.4441, 0.4450, 0.4460,\n        0.4470, 0.4480, 0.4490, 0.4500, 0.4510, 0.4520, 0.4530, 0.4540, 0.4550,\n        0.4559, 0.4569, 0.4579, 0.4589, 0.4599, 0.4609, 0.4619, 0.4629, 0.4639,\n        0.4649, 0.4659, 0.4668, 0.4678, 0.4688, 0.4698, 0.4708, 0.4718, 0.4728,\n        0.4738, 0.4748, 0.4758, 0.4768, 0.4777, 0.4787, 0.4797, 0.4807, 0.4817,\n        0.4827, 0.4837, 0.4847, 0.4857, 0.4867, 0.4877, 0.4886, 0.4896, 0.4906,\n        0.4916, 0.4926, 0.4936, 0.4946, 0.4956, 0.4966, 0.4976, 0.4986, 0.4995,\n        0.5005, 0.5015, 0.5025, 0.5035, 0.5045, 0.5055, 0.5065, 0.5075, 0.5085,\n        0.5095, 0.5105, 0.5114, 0.5124, 0.5134, 0.5144, 0.5154, 0.5164, 0.5174,\n        0.5184, 0.5194, 0.5204, 0.5214, 0.5223, 0.5233, 0.5243, 0.5253, 0.5263,\n        0.5273, 0.5283, 0.5293, 0.5303, 0.5313, 0.5323, 0.5332, 0.5342, 0.5352,\n        0.5362, 0.5372, 0.5382, 0.5392, 0.5402, 0.5412, 0.5422, 0.5432, 0.5441,\n        0.5451, 0.5461, 0.5471, 0.5481, 0.5491, 0.5501, 0.5511, 0.5521, 0.5531,\n        0.5541, 0.5550, 0.5560, 0.5570, 0.5580, 0.5590, 0.5600, 0.5610, 0.5620,\n        0.5630, 0.5640, 0.5650, 0.5659, 0.5669, 0.5679, 0.5689, 0.5699, 0.5709,\n        0.5719, 0.5729, 0.5739, 0.5749, 0.5759, 0.5768, 0.5778, 0.5788, 0.5798,\n        0.5808, 0.5818, 0.5828, 0.5838, 0.5848, 0.5858, 0.5868, 0.5877, 0.5887,\n        0.5897, 0.5907, 0.5917, 0.5927, 0.5937, 0.5947, 0.5957, 0.5967, 0.5977,\n        0.5986, 0.5996, 0.6006, 0.6016, 0.6026, 0.6036, 0.6046, 0.6056, 0.6066,\n        0.6076, 0.6086, 0.6095, 0.6105, 0.6115, 0.6125, 0.6135, 0.6145, 0.6155,\n        0.6165, 0.6175, 0.6185, 0.6195, 0.6205, 0.6214, 0.6224, 0.6234, 0.6244,\n        0.6254, 0.6264, 0.6274, 0.6284, 0.6294, 0.6304, 0.6314, 0.6323, 0.6333,\n        0.6343, 0.6353, 0.6363, 0.6373, 0.6383, 0.6393, 0.6403, 0.6413, 0.6423,\n        0.6432, 0.6442, 0.6452, 0.6462, 0.6472, 0.6482, 0.6492, 0.6502, 0.6512,\n        0.6522, 0.6532, 0.6541, 0.6551, 0.6561, 0.6571, 0.6581, 0.6591, 0.6601,\n        0.6611, 0.6621, 0.6631, 0.6641, 0.6650, 0.6660, 0.6670, 0.6680, 0.6690,\n        0.6700, 0.6710, 0.6720, 0.6730, 0.6740, 0.6750, 0.6759, 0.6769, 0.6779,\n        0.6789, 0.6799, 0.6809, 0.6819, 0.6829, 0.6839, 0.6849, 0.6859, 0.6868,\n        0.6878, 0.6888, 0.6898, 0.6908, 0.6918, 0.6928, 0.6938, 0.6948, 0.6958,\n        0.6968, 0.6977, 0.6987, 0.6997, 0.7007, 0.7017, 0.7027, 0.7037, 0.7047,\n        0.7057, 0.7067, 0.7077, 0.7086, 0.7096, 0.7106, 0.7116, 0.7126, 0.7136,\n        0.7146, 0.7156, 0.7166, 0.7176, 0.7186, 0.7195, 0.7205, 0.7215, 0.7225,\n        0.7235, 0.7245, 0.7255, 0.7265, 0.7275, 0.7285, 0.7295, 0.7305, 0.7314,\n        0.7324, 0.7334, 0.7344, 0.7354, 0.7364, 0.7374, 0.7384, 0.7394, 0.7404,\n        0.7414, 0.7423, 0.7433, 0.7443, 0.7453, 0.7463, 0.7473, 0.7483, 0.7493,\n        0.7503, 0.7513, 0.7523, 0.7532, 0.7542, 0.7552, 0.7562, 0.7572, 0.7582,\n        0.7592, 0.7602, 0.7612, 0.7622, 0.7632, 0.7641, 0.7651, 0.7661, 0.7671,\n        0.7681, 0.7691, 0.7701, 0.7711, 0.7721, 0.7731, 0.7741, 0.7750, 0.7760,\n        0.7770, 0.7780, 0.7790, 0.7800, 0.7810, 0.7820, 0.7830, 0.7840, 0.7850,\n        0.7859, 0.7869, 0.7879, 0.7889, 0.7899, 0.7909, 0.7919, 0.7929, 0.7939,\n        0.7949, 0.7959, 0.7968, 0.7978, 0.7988, 0.7998, 0.8008, 0.8018, 0.8028,\n        0.8038, 0.8048, 0.8058, 0.8068, 0.8077, 0.8087, 0.8097, 0.8107, 0.8117,\n        0.8127, 0.8137, 0.8147, 0.8157, 0.8167, 0.8177, 0.8186, 0.8196, 0.8206,\n        0.8216, 0.8226, 0.8236, 0.8246, 0.8256, 0.8266, 0.8276, 0.8286, 0.8295,\n        0.8305, 0.8315, 0.8325, 0.8335, 0.8345, 0.8355, 0.8365, 0.8375, 0.8385,\n        0.8395, 0.8405, 0.8414, 0.8424, 0.8434, 0.8444, 0.8454, 0.8464, 0.8474,\n        0.8484, 0.8494, 0.8504, 0.8514, 0.8523, 0.8533, 0.8543, 0.8553, 0.8563,\n        0.8573, 0.8583, 0.8593, 0.8603, 0.8613, 0.8623, 0.8632, 0.8642, 0.8652,\n        0.8662, 0.8672, 0.8682, 0.8692, 0.8702, 0.8712, 0.8722, 0.8732, 0.8741,\n        0.8751, 0.8761, 0.8771, 0.8781, 0.8791, 0.8801, 0.8811, 0.8821, 0.8831,\n        0.8841, 0.8850, 0.8860, 0.8870, 0.8880, 0.8890, 0.8900, 0.8910, 0.8920,\n        0.8930, 0.8940, 0.8950, 0.8959, 0.8969, 0.8979, 0.8989, 0.8999, 0.9009,\n        0.9019, 0.9029, 0.9039, 0.9049, 0.9059, 0.9068, 0.9078, 0.9088, 0.9098,\n        0.9108, 0.9118, 0.9128, 0.9138, 0.9148, 0.9158, 0.9168, 0.9177, 0.9187,\n        0.9197, 0.9207, 0.9217, 0.9227, 0.9237, 0.9247, 0.9257, 0.9267, 0.9277,\n        0.9286, 0.9296, 0.9306, 0.9316, 0.9326, 0.9336, 0.9346, 0.9356, 0.9366,\n        0.9376, 0.9386, 0.9395, 0.9405, 0.9415, 0.9425, 0.9435, 0.9445, 0.9455,\n        0.9465, 0.9475, 0.9485, 0.9495, 0.9505, 0.9514, 0.9524, 0.9534, 0.9544,\n        0.9554, 0.9564, 0.9574, 0.9584, 0.9594, 0.9604, 0.9614, 0.9623, 0.9633,\n        0.9643, 0.9653, 0.9663, 0.9673, 0.9683, 0.9693, 0.9703, 0.9713, 0.9723,\n        0.9732, 0.9742, 0.9752, 0.9762, 0.9772, 0.9782, 0.9792, 0.9802, 0.9812,\n        0.9822, 0.9832, 0.9841, 0.9851, 0.9861, 0.9871, 0.9881, 0.9891, 0.9901,\n        0.9911, 0.9921, 0.9931, 0.9941, 0.9950, 0.9960, 0.9970, 0.9980, 0.9990,\n        1.0000])\n\n\n\nxs.prod()\n\ntensor(0.)\n\n\n\nxs = torch.linspace(0.01, 1, 100)\nxs.prod()\n\ntensor(9.3326e-43)\n\n\n\nxs = torch.linspace(0.01, 1, 1000)\na = xs.log().sum()\n\nb = torch.linspace(0.01, 1, 10000).log().sum()\nprint(a, b)\n\ntensor(-954.8404) tensor(-9536.1816)\n\n\n\ntorch.linspace(0.01, 1, 1000).log().sum()\n\ntensor(-954.8404)\n\n\n\ntorch.linspace(0.01, 1, 10000).log().sum()\n\ntensor(-9536.1816)\n\n\n\n# Trivial example to test the binary cross entropy loss\n\ny_true = torch.tensor([0., 1., 1., 0.])\nlogits = torch.tensor([0.1, 0.9, 0.8, 0.2])\n\nloss = torch.nn.BCEWithLogitsLoss()\nloss(logits, y_true)\n\ntensor(0.5637)\n\n\n\n\ny_hat = torch.nn.Sigmoid()(logits)\ny_hat\n\ntensor([0.5250, 0.7109, 0.6900, 0.5498])\n\n\n\n# BCE\n-(y_true * torch.log(y_hat) + (1 - y_true) * torch.log(1 - y_hat)).mean()\n\ntensor(0.5637)\n\n\n\ndef our_bce(y_true, logits):\n    y_hat = torch.nn.Sigmoid()(logits)\n    return -(y_true * torch.log(y_hat) + (1 - y_true) * torch.log(1 - y_hat)).mean()\n\n\n# check that our implementation is correct\nassert our_bce(y_true, logits) == loss(logits, y_true)\n\n\n# Larger logits\nlogits = torch.tensor([100., 200., 300., 400.])\n\nassert our_bce(y_true, logits) == loss(logits, y_true)\n\n\nAssertionError: \n\n\n\ntorch.nn.Sigmoid()(logits)\n\ntensor([1., 1., 1., 1.])\n\n\n\ntorch.exp(logits)/(1 + torch.exp(logits))\n\ntensor([nan, nan, nan, nan])\n\n\n\ntorch.exp(-logits)\n\ntensor([3.7835e-44, 0.0000e+00, 0.0000e+00, 0.0000e+00])\n\n\n\n1/(1+torch.exp(-logits))\n\ntensor([1., 1., 1., 1.])"
  },
  {
    "objectID": "notebooks/posts/logistic.html",
    "href": "notebooks/posts/logistic.html",
    "title": "Logistic Regression",
    "section": "",
    "text": "# Create linearly separable data in 2d\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n%config InlineBackend.figure_format = 'retina'\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification(n_samples=100, n_features=2, n_redundant=0, n_informative=2,\n                            n_clusters_per_class=2, class_sep=1.5, random_state=42)\n\nplt.scatter(X[:, 0], X[:, 1], marker='o', c=y, s=25, edgecolor='k')\n\n<matplotlib.collections.PathCollection at 0x12b5ed280>\n\n\n\n\n\n\nfrom sklearn.linear_model import LogisticRegression\n\n# Without regularization\nclf = LogisticRegression(random_state=0, penalty='none').fit(X, y)\nclf.coef_, clf.intercept_\n\n(array([[26.23339925, -5.01002931]]), array([1.74951957]))\n\n\n\n# Create a surface plot of the decision boundary for any theta_0, theta_1, theta_2\n\ndef plot_decision_boundary(theta_0, theta_1, theta_2):\n    x_lin = np.linspace(-4, 4, 100)\n    y_lin = -(theta_0 + theta_1 * x_lin) / theta_2\n    plt.plot(x_lin, y_lin, 'k--', label='Decision boundary ($\\sigma(z) = 0.5$))', lw=5)\n    plt.xlim(-4, 4)\n    plt.ylim(-4, 4)\n    plt.xlabel(r'$x_1$')\n    plt.ylabel(r'$x_2$')\n    plt.title(r'$\\theta_0 = {:.2f}, \\theta_1 = {:.2f}, \\theta_2 = {:.2f}$'.format(theta_0, theta_1, theta_2))\n\n    # Plot the probability of class 1 contour\n    x1, x2 = np.meshgrid(np.linspace(-4, 4, 100), np.linspace(-4, 4, 100))\n    z = 1 / (1 + np.exp(-(theta_0 + theta_1 * x1 + theta_2 * x2)))\n    plt.contourf(x1, x2, z, linestyles='dashed')\n    plt.colorbar()\n\n    # Plot the data\n    plt.scatter(X[:, 0], X[:, 1], marker='o', c=y, s=25, edgecolor='k')\n    plt.legend(loc='best')\n\n\n# Create a slider widget to explore the decision boundary\n\nfrom ipywidgets import interact, FloatSlider\n\ninteract(plot_decision_boundary,\n            theta_0=FloatSlider(min=-2, max=3, step=0.1, value=0.1),\n            theta_1=FloatSlider(min=-5, max=40, step=0.5, value=0.1),\n            theta_2=FloatSlider(min=-10, max=5, step=0.1, value=0.1))\n\n\n\n\n\n\n<function __main__.plot_decision_boundary(theta_0, theta_1, theta_2)>\n\n\n\n# Create a 3d plot of the decision boundary for any theta_0, theta_1, theta_2\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndef plot_decision_boundary_3d(theta_0, theta_1, theta_2, azim=30, elev=30):\n    fig = plt.figure(figsize=(10, 8))\n    ax = fig.add_subplot(111, projection='3d')\n    x_lin = np.linspace(-4, 4, 100)\n    y_lin = np.linspace(-4, 4, 100)\n    X_g, Y_g = np.meshgrid(x_lin, y_lin)\n    Z_g = -(theta_0 + theta_1 * X_g + theta_2 * Y_g)\n    #ax.plot_surface(X_g, Y_g, Z_g, alpha=0.2)\n    ax.set_xlabel(r'$x_1$')\n    ax.set_ylabel(r'$x_2$')\n    ax.set_zlabel(r'$x_3$')\n    ax.set_title(r'$\\theta_0 = {:.2f}, \\theta_1 = {:.2f}, \\theta_2 = {:.2f}$'.format(theta_0, theta_1, theta_2))\n    \n    # Scatter plot of data (class 1 is Z = 1, class 0 is Z = 0)\n    ax.scatter(X[y == 1, 0], X[y == 1, 1], 1, marker='o', c='b', s=25, edgecolor='k')\n    ax.scatter(X[y == 0, 0], X[y == 0, 1], 0, marker='o', c='y', s=25, edgecolor='k')\n\n    # Plot the 3d sigmoid function\n    x1, x2 = np.meshgrid(np.linspace(-4, 4, 100), np.linspace(-4, 4, 100))\n    z = 1 / (1 + np.exp(-(theta_0 + theta_1 * x1 + theta_2 * x2)))\n    ax.plot_surface(x1, x2, z, alpha=0.2, color='green')\n    \n    # Rotate the plot so that the sigmoid function is visible\n    ax.view_init(azim, elev)\n\n    # Plot the decision plane\n    ax.plot_surface(X_g, Y_g, Z_g, alpha=0.2, color='k')\n\n\n\n# Create a slider widget to explore the decision boundary\n\nfrom ipywidgets import interact, FloatSlider\n\ninteract(plot_decision_boundary_3d,\n            theta_0=FloatSlider(min=-2, max=3, step=0.1, value=0.1),\n            theta_1=FloatSlider(min=-5, max=40, step=0.5, value=0.1),\n            theta_2=FloatSlider(min=-10, max=5, step=0.1, value=0.1),\n            azim=FloatSlider(min=-180, max=180, step=1, value=30),\n            elev=FloatSlider(min=-180, max=180, step=1, value=30))\n\n\n\n\n\n\n<function __main__.plot_decision_boundary_3d(theta_0, theta_1, theta_2, azim=30, elev=30)>\n\n\n\n# Create two 3d plot any theta_0, theta_1, theta_2\n# First showing the decision boundary\n# Second showing the probability of class 1\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndef plot_decision_boundary_3d(theta_0, theta_1, theta_2, azim=30, elev=30):\n    fig = plt.figure(figsize=(10, 8))\n    ax1 = fig.add_subplot(121, projection='3d')\n    ax2 = fig.add_subplot(122, projection='3d')\n\n    x_lin = np.linspace(-4, 4, 100)\n    y_lin = np.linspace(-4, 4, 100)\n    X_g, Y_g = np.meshgrid(x_lin, y_lin)\n    Z_g = -(theta_0 + theta_1 * X_g + theta_2 * Y_g)\n    #ax.plot_surface(X_g, Y_g, Z_g, alpha=0.2)\n    ax1.set_xlabel(r'$x_1$')\n    ax1.set_ylabel(r'$x_2$')\n    ax1.set_zlabel(r'$x_3$')\n    ax1.set_title(r'$\\theta_0 = {:.2f}, \\theta_1 = {:.2f}, \\theta_2 = {:.2f}$'.format(theta_0, theta_1, theta_2))\n\n    # Scatter plot of data (class 1 is Z = 1, class 0 is Z = 0)\n    ax1.scatter(X[y == 1, 0], X[y == 1, 1], 1, marker='o', c='b', s=25, edgecolor='k')\n    ax1.scatter(X[y == 0, 0], X[y == 0, 1], 0, marker='o', c='y', s=25, edgecolor='k')\n\n    # Plot the 3d sigmoid function\n    x1, x2 = np.meshgrid(np.linspace(-4, 4, 100), np.linspace(-4, 4, 100))\n    z = 1 / (1 + np.exp(-(theta_0 + theta_1 * x1 + theta_2 * x2)))\n\n    # Plot the decision plane\n    ax1.plot_surface(X_g, Y_g, Z_g, alpha=0.2, color='k')\n\n    # Plot the probability of class 1\n    ax2.plot_surface(x1, x2, z, alpha=0.2, color='black')\n    ax2.scatter(X[y == 1, 0], X[y == 1, 1], 1, marker='o', c='b', s=25, edgecolor='k')\n    ax2.scatter(X[y == 0, 0], X[y == 0, 1], 0, marker='o', c='y', s=25, edgecolor='k')\n\n\n     # Rotate the plot so that the sigmoid function is visible\n    ax1.view_init(azim, elev)\n    ax2.view_init(azim, elev)\n\n\n# Create a slider widget to explore the decision boundary\n\nfrom ipywidgets import interact, FloatSlider\n\ninteract(plot_decision_boundary_3d,\n            theta_0=FloatSlider(min=-2, max=3, step=0.1, value=0.1),\n            theta_1=FloatSlider(min=-5, max=40, step=0.5, value=0.1),\n            theta_2=FloatSlider(min=-10, max=5, step=0.1, value=0.1),\n            azim=FloatSlider(min=-180, max=180, step=1, value=30),\n            elev=FloatSlider(min=-180, max=180, step=1, value=30))\n\n\n\n\n\n\n<function __main__.plot_decision_boundary_3d(theta_0, theta_1, theta_2, azim=30, elev=30)>"
  },
  {
    "objectID": "notebooks/posts/lowrank-matrix.html",
    "href": "notebooks/posts/lowrank-matrix.html",
    "title": "Maths and JAX: Low Rank",
    "section": "",
    "text": "Multiplying a matrix A with a vector x transforms x\n\n\n\n\nTransforming a vector via a low rank matrix in the shown examples leads to a line\n\nWe first study Goal 1. The interpretation of matrix vector product is borrowed from the excellent videos from the 3Blue1Brown channel. I’ll first set up the environment by importing a few relevant libraries.\n\n\n\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.patches as mpatches\nimport matplotlib.pyplot as plt\nfrom sympy import Matrix, MatrixSymbol, Eq, MatMul\n\nsns.reset_defaults()\nsns.set_context(context=\"talk\", font_scale=0.75)\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\n\n\nsympy_A = MatrixSymbol(\"A\", 2, 2)\nsympy_x = MatrixSymbol(\"x\", 2, 1)\ny = MatrixSymbol(\"y\", 2, 1)\n\nEq(y, sympy_A*sympy_x, evaluate=False)\n\n\\(\\displaystyle y = A x\\)\n\n\nGiven a matrix A and a vector x, we are trying to get y=Ax. Let us first see the values for a specific instance in the 2d space.\n\nA = np.array([[2, 1], [1, 4]])\n\nx = np.array([1, 1])\nAx = A @ x\n\nEq(Matrix(Ax), MatMul(Matrix(A), Matrix(x)),evaluate=False)\n\n\\(\\displaystyle \\left[\\begin{matrix}3\\\\5\\end{matrix}\\right] = \\left[\\begin{matrix}2 & 1\\\\1 & 4\\end{matrix}\\right] \\left[\\begin{matrix}1\\\\1\\end{matrix}\\right]\\)\n\n\nHere, we have A = \\(\\left[\\begin{matrix}2 & 1\\\\1 & 4\\end{matrix}\\right]\\) and x = \\({\\text{[1 1]}}\\)\nNow some code to create arrows to represent arrows.\n\ndef plot_arrow(ax, x, color, label):\n    x_head, y_head = x[0], x[1]\n    x_tail = 0.0\n    y_tail = 0.0\n    dx = x_head - x_tail\n    dy = y_head - y_tail\n\n    arrow = mpatches.FancyArrowPatch(\n        (x_tail, y_tail), (x_head, y_head), mutation_scale=10, color=color, label=label\n    )\n\n    ax.add_patch(arrow)\n    ax.legend(bbox_to_anchor=(1.6, 1), borderaxespad=0)\n\nNow some code to plot the vector corresponding to Ax\n\ndef plot_transform(A, x):\n    Ax = A @ x\n    fig, ax = plt.subplots()\n    plot_arrow(ax, x, \"k\", f\"Original (x) {x}\")\n    plot_arrow(ax, Ax, \"g\", f\"Transformed (Ax) {Ax}\")\n    plt.xlim((-5, 5))\n    plt.ylim((-5, 5))\n    plt.grid(alpha=0.1)\n    ax.set_aspect(\"equal\")\n    plt.title(f\"A = {A}\")\n    sns.despine(left=True, bottom=True)\n    plt.tight_layout()\n\n\nplot_transform(np.array([[1.0, 1.0], [1.0, -1.0]]), [1.0, 2.0])\nplt.savefig(\"Ax1.png\", dpi=100)\n\n\n\n\nIn the plot above, we can see that the vector [1, 2] is transformed to [3, -1] via the matrix A.\nLet us now write some code to create the rotation matrix and apply it on our input x\n\ndef rot(angle):\n    theta = np.radians(angle)\n    c, s = np.cos(theta), np.sin(theta)\n    R = np.array(((c, -s), (s, c)))\n    return np.round(R, 2)\n\n\nx = np.array([1.0, 2.0])\nplot_transform(rot(90), x)\nplt.savefig(\"Ax2\", dpi=100)\n\n\n\n\nAs we can see above, creating the 90 degree rotation matrix indeed transforms our vector anticlockwise 90 degrees.\nNow let us talk about matrices A that are low rank. I am creating a simple low rank matrix where the second row is some constant times the first row.\n\ndef plot_lr(x, slope):\n    low_rank = np.array([1.0, 2.0])\n    low_rank = np.vstack((low_rank, slope * low_rank))\n    plot_transform(low_rank, x)\n    x_lin = np.linspace(-5, 5, 100)\n    y = x_lin * slope\n    plt.plot(x_lin, y, alpha=0.4, lw=5, label=f\"y = {slope}x\")\n    plt.legend(bbox_to_anchor=(1.2, 1), borderaxespad=0)\n\n\nplot_lr(x, 1.01)\nplt.tight_layout()\nplt.savefig(\"lr-1.png\", bbox_inches=\"tight\", dpi=100)\n\n\n\n\n\nplot_lr([1.0, -1.0], 1.01)\nplt.tight_layout()\nplt.savefig(\"lr-2.png\", bbox_inches=\"tight\", dpi=100)\n\n\n\n\n\nplot_lr([0.5, -0.7], 1.01)\nplt.tight_layout()\nplt.savefig(\"lr-3.png\", bbox_inches=\"tight\", dpi=100)\n\n\n\n\n\nplot_lr([-1.0, 0.0], 1.01)\nplt.tight_layout()\nplt.savefig(\"lr-4.png\", bbox_inches=\"tight\", dpi=100)\n\n\n\n\nTo summarize\n\nIn the above plots we can see that changing our x to any vector in the 2d space leads to us to transformed vector not covering the whole 2d space, but on line in the 2d space. One can easily take this learning to higher dimensional matrices A."
  },
  {
    "objectID": "notebooks/posts/python-utils.html",
    "href": "notebooks/posts/python-utils.html",
    "title": "Some Python Utilities",
    "section": "",
    "text": "Function Argument Unpacking\nReference: https://www.youtube.com/watch?v=YWY4BZi_o28\n\ndef print_vec(x, y, z):\n    print(f\"[{x} \\n{y} \\n{z}]\")\n\n\nprint_vec(1, 2, 3)\n\n[1 \n2 \n3]\n\n\n\ntuple_vec = (1, 0, 1)\n#print_vec(tuple_vec)\nprint_vec(tuple_vec[0], tuple_vec[1], tuple_vec[2])\n\n[1 \n0 \n1]\n\n\n\nlist_vec = [1, 0, 1]\n\nprint_vec(tuple_vec[0], tuple_vec[1], tuple_vec[2])\nprint(\"*\"*20)\nprint_vec(*tuple_vec)\nprint(\"*\"*20)\n\nprint_vec(*list_vec)\n\n[1 \n0 \n1]\n********************\n[1 \n0 \n1]\n********************\n[1 \n0 \n1]\n\n\n\ndictionary_vec = {\"x\": 1, \"y\": 0, \"z\": 1}\nprint_vec(**dictionary_vec)\n\n[1 \n0 \n1]\n\n\n\ndictionary_vec = {\"a\": 1, \"b\": 0, \"c\":1}\nprint_vec(**dictionary_vec)\n\nTypeError: print_vec() got an unexpected keyword argument 'a'\n\n\n\nprint(*dictionary_vec)\n\na b c\n\n\n\n\nZip\n\nlist(zip([1, 2, 3], ['a', 'b', 'c'], [7, 8, 9]))\n\n[(1, 'a', 7), (2, 'b', 8), (3, 'c', 9)]\n\n\n\n\nItertools Product\n\nimport itertools\nlist(itertools.product([1, 2], ['a', 'b', 'c'], [7, 8, 9]))\n\n[(1, 'a', 7),\n (1, 'a', 8),\n (1, 'a', 9),\n (1, 'b', 7),\n (1, 'b', 8),\n (1, 'b', 9),\n (1, 'c', 7),\n (1, 'c', 8),\n (1, 'c', 9),\n (2, 'a', 7),\n (2, 'a', 8),\n (2, 'a', 9),\n (2, 'b', 7),\n (2, 'b', 8),\n (2, 'b', 9),\n (2, 'c', 7),\n (2, 'c', 8),\n (2, 'c', 9)]"
  },
  {
    "objectID": "notebooks/posts/nn.html",
    "href": "notebooks/posts/nn.html",
    "title": "Neural Network",
    "section": "",
    "text": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom torch.utils.data import DataLoader, TensorDataset\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n# Set random seed for reproducibility\ntorch.manual_seed(0)\n\n# Torch version\ntorch.__version__\n\n'2.0.0'\n\n\n\n# MNIST dataset\n\nfrom torchvision import datasets, transforms\nimport torchvision\n\n# Split MNIST into train, validation, and test sets\ntrain_data = datasets.MNIST(root='data', train=True, download=True, transform=transforms.ToTensor())\ntest_data = datasets.MNIST(root='data', train=False, download=True, transform=transforms.ToTensor())\n\n# Split train_data into train and validation sets\nval_data = torch.utils.data.Subset(train_data, range(50000, 51000))\n\n# Reduce the size of the training set to 5,000\ntrain_data = torch.utils.data.Subset(train_data, range(0, 5000))\n\n\n# Create data loaders\nbatch_size = 64\n\ntrain_loader = DataLoader(train_data, batch_size=batch_size, shuffle=True)\nval_loader = DataLoader(val_data, batch_size=batch_size, shuffle=True)\ntest_loader = DataLoader(test_data, batch_size=batch_size, shuffle=True)\n\n\nimg, target = next(iter(train_loader))\nprint(img.shape)\nprint(target.shape)\n\ntorch.Size([64, 1, 28, 28])\ntorch.Size([64])\n\n\n\nplt.imshow(img[0].numpy().squeeze(), cmap='gray_r');\n\n\n\n\n\ntarget\n\ntensor([9, 1, 2, 6, 7, 1, 6, 7, 0, 7, 0, 6, 9, 2, 8, 3, 7, 5, 5, 6, 9, 7, 6, 4,\n        9, 4, 1, 4, 1, 0, 1, 0, 4, 8, 2, 8, 4, 8, 0, 2, 9, 6, 7, 1, 3, 0, 0, 8,\n        0, 1, 6, 1, 9, 8, 3, 7, 1, 0, 3, 2, 3, 3, 6, 0])\n\n\n\n# Store the labels and Images in TensorBoard\n\nfrom torch.utils.tensorboard import SummaryWriter\n\n# Clean up any old runs\n!rm -rf runs\n\n# Default `log_dir` is \"runs\"\nwriter = SummaryWriter('runs/mnist')\n\n# Add images to tensorboard in the form of a grid in batches of 64\ndataiter = iter(DataLoader(train_data, batch_size=64, shuffle=True))\n\n# Add a slider in tensorboard to iterate through the batches\nfor i in range(10):\n    images, labels = next(dataiter)\n    images = torchvision.utils.make_grid(images)\n    # Add images with labels to tensorboard\n    writer.add_image(f'mnist_images_{i}', images, global_step=i)\n\n\n# Define model for 10-class MNIST classification\n\nclass MNISTClassifier(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = nn.Linear(784, 64)\n        self.fc2 = nn.Linear(64, 32)\n        self.fc3 = nn.Linear(32, 10)\n        \n    def forward(self, x):\n        z1 = self.fc1(x)\n        a1 = F.relu(z1)\n        z2 = self.fc2(a1)\n        a2 = F.relu(z2)\n        z3 = self.fc3(a2) # logits\n        return z3\n\n\nmodel = MNISTClassifier()\n\n\n# Get model summary\nfrom torchsummary import summary\nsummary(model, (1, 784))\n\n----------------------------------------------------------------\n        Layer (type)               Output Shape         Param #\n================================================================\n            Linear-1                [-1, 1, 64]          50,240\n            Linear-2                [-1, 1, 32]           2,080\n            Linear-3                [-1, 1, 10]             330\n================================================================\nTotal params: 52,650\nTrainable params: 52,650\nNon-trainable params: 0\n----------------------------------------------------------------\nInput size (MB): 0.00\nForward/backward pass size (MB): 0.00\nParams size (MB): 0.20\nEstimated Total Size (MB): 0.20\n----------------------------------------------------------------\n\n\n\n# Forward pass through the model\n\n\n\nsaved_img, saved_target = next(iter(train_loader))\nsaved_img = saved_img.view(saved_img.shape[0], -1)\nprint(saved_img.shape)\n\nplt.imshow(saved_img[0].reshape(28, 28), cmap='gray_r')\nplt.title(saved_target[0].item())\n\n\nwith torch.no_grad():\n    out = model(saved_img.view(saved_img.shape[0], -1))\n\n\n\nprint(out[0])\n\n# Softmax\nprobas = F.softmax(out, dim=1)\nprint(probas[0])\n\ntorch.Size([64, 784])\ntensor([-0.1530, -0.1150,  0.0052, -0.1495,  0.1777, -0.1248,  0.1724,  0.1506,\n         0.0998, -0.0954])\ntensor([0.0853, 0.0886, 0.0999, 0.0856, 0.1188, 0.0878, 0.1181, 0.1156, 0.1099,\n        0.0904])\n\n\n\n\n\n\nprobas[0:1]\n\ntensor([[0.0853, 0.0886, 0.0999, 0.0856, 0.1188, 0.0878, 0.1181, 0.1156, 0.1099,\n         0.0904]])\n\n\n\n# Predicted label before training\n\npred = torch.argmax(probas[0:1], dim=1).item()\nprint(f\"Prediction:  {pred}, True label: {saved_target[0].item()}\")\n\nPrediction:  4, True label: 1\n\n\n\nmodel.fc1.weight.shape, model.fc1.bias.shape\n\n(torch.Size([64, 784]), torch.Size([64]))\n\n\n\n# Number of parameters in fc1\nprint(\"fc1\", model.fc1.weight.numel() + model.fc1.bias.numel())\n\n# Number of parameters in fc2\nprint(\"fc2\", model.fc2.weight.numel() + model.fc2.bias.numel())\n\n# Number of parameters in fc3\nprint(\"fc3\", model.fc3.weight.numel() + model.fc3.bias.numel())\n\nfc1 50240\nfc2 2080\nfc3 330\n\n\n\nlen(train_loader)\n\n79\n\n\n\n# Forward pass through the model and writing to tensorboard\n\nlr = 0.001\noptimizer = optim.Adam(model.parameters(), lr=lr)\ncriterion = nn.CrossEntropyLoss()\n\nnum_epochs = 1\nfor epoch in range(num_epochs):\n    for batch_idx, (data_test, target) in enumerate(train_loader):\n        # Reshape data to input to the network\n        data_test = data_test.view(data_test.shape[0], -1)\n        # Forward pass\n        output = model(data_test)\n        loss = criterion(output, target)\n        # Backward and optimize\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        iteration_num = epoch * len(train_loader) + batch_idx\n        \n        # Write to tensorboard\n        writer.add_scalar('Loss/train', loss.item(), iteration_num)\n        writer.add_scalar('Accuracy/train', (output.argmax(dim=1) == target).float().mean(), iteration_num)\n\n        # Find test loss and accuracy\n        runing_loss = 0.0\n        running_acc = 0.0\n        with torch.no_grad():\n            for data_test, target_test in val_loader:\n                data_test = data_test.view(data_test.shape[0], -1)\n                output_test = model(data_test)\n                loss_test = criterion(output_test, target_test)\n                runing_loss += loss_test.item()\n                running_acc += (output_test.argmax(dim=1) == target_test).float().mean()\n        writer.add_scalar('Loss/validation', runing_loss / len(val_loader), iteration_num)\n        writer.add_scalar('Accuracy/validation', running_acc / len(val_loader), iteration_num)\n\n        if batch_idx % 100 == 0:\n            print (f'Epoch [{epoch+1}/{num_epochs}], Step [{batch_idx}/{len(train_loader)}], Loss: {loss.item():.4f}')\n\nEpoch [1/1], Step [0/79], Loss: 2.3027\n\n\n\n# Prediction on the saved image\n\nwith torch.no_grad():\n    out = model(saved_img[0:1])\n    probas = F.softmax(out, dim=1)\n    pred = torch.argmax(probas, dim=1).item()\n    print(pred, saved_target[0].item())\n\n1 1\n\n\n\n# Create a HParam dictionary for batch size and learning rate for tensorboard\n\nb_sizes = [32, 64, 512]\nlrs = [0.001, 0.01, 0.1]\n\n\nnum_epochs  = 1\nfor epoch in range(num_epochs):\n    for b_size in b_sizes:\n        train_loader = DataLoader(train_data, batch_size=b_size, shuffle=True)\n        model = MNISTClassifier()\n        for lr in lrs:\n            print(f\"Batch size: {b_size}, Learning rate: {lr}\")\n            optimizer = optim.Adam(model.parameters(), lr=lr)\n            criterion = nn.CrossEntropyLoss()\n            for batch_idx, (data, target) in enumerate(train_loader):\n                # Reshape data to input to the network\n                data = data.view(data.shape[0], -1)\n                # Forward pass\n                output = model(data)\n                loss = criterion(output, target)\n                # Backward and optimize\n                optimizer.zero_grad()\n                loss.backward()\n                optimizer.step()\n                \n\n                # Write loss as scalar to Tensorboard and hyperparameters to HParams\n                writer.add_scalar('training loss',\n                                loss.item(),\n                                epoch * len(train_loader) + batch_idx)\n                writer.add_hparams({'lr': lr, 'bsize': b_size},\n                                { 'hparam/loss': loss.item()})\n                \n\n    \n\nBatch size: 32, Learning rate: 0.001\nBatch size: 32, Learning rate: 0.01\nBatch size: 32, Learning rate: 0.1\nBatch size: 64, Learning rate: 0.001\nBatch size: 64, Learning rate: 0.01\nBatch size: 64, Learning rate: 0.1\nBatch size: 512, Learning rate: 0.001\nBatch size: 512, Learning rate: 0.01\nBatch size: 512, Learning rate: 0.1"
  },
  {
    "objectID": "notebooks/posts/pivot-cross.html",
    "href": "notebooks/posts/pivot-cross.html",
    "title": "Pandas tips",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\nDataset creation\n\n# Create a DataFrame for whether or not a person plays tennis. \n# It has discrete features and 14 rows.\n\ndf = pd.DataFrame({\n    'Outlook': ['Sunny', 'Sunny', 'Overcast', 'Rain', 'Rain', 'Rain', 'Overcast', 'Sunny', 'Sunny', 'Rain', 'Sunny', 'Overcast', 'Overcast', 'Rain'],\n    'Temperature': ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool', 'Mild', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild'],\n    'Humidity': ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'High'],\n    'Wind': ['Weak', 'Strong', 'Weak', 'Weak', 'Weak', 'Strong', 'Strong', 'Weak', 'Weak', 'Weak', 'Strong', 'Strong', 'Weak', 'Strong'],\n    'PlayTennis': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']\n})\n\n\n\nCounting values of outcome variable (useful for calculating entropy)\n\nser = df['PlayTennis'].value_counts()\nser\n\nYes    9\nNo     5\nName: PlayTennis, dtype: int64\n\n\n\n\nUsing cross tab to quickly capture the relationship between two variables\n\ndf_out = pd.crosstab(df['Outlook'], df['PlayTennis'])\ndf_out\n\n\n\n\n\n  \n    \n      PlayTennis\n      No\n      Yes\n    \n    \n      Outlook\n      \n      \n    \n  \n  \n    \n      Overcast\n      0\n      4\n    \n    \n      Rain\n      2\n      3\n    \n    \n      Sunny\n      3\n      2\n    \n  \n\n\n\n\n\ndf_out.index, df_out.columns\n\n(Index(['Overcast', 'Rain', 'Sunny'], dtype='object', name='Outlook'),\n Index(['No', 'Yes'], dtype='object', name='PlayTennis'))\n\n\n\ne = df_out.sum(axis=1)\ne\n\nOutlook\nOvercast    4\nRain        5\nSunny       5\ndtype: int64\n\n\n\n# Find the fraction of each row that is a 'Yes' and 'No' for PlayTennis\ndf_out['Yes'] = df_out['Yes'] / e\ndf_out['No'] = df_out['No'] / e\ndf_out\n\n\n\n\n\n  \n    \n      PlayTennis\n      No\n      Yes\n    \n    \n      Outlook\n      \n      \n    \n  \n  \n    \n      Overcast\n      0.0\n      1.0\n    \n    \n      Rain\n      0.4\n      0.6\n    \n    \n      Sunny\n      0.6\n      0.4\n    \n  \n\n\n\n\n\n\nMore efficient cross tabulation (using normalize)\n\npd.crosstab(df['Outlook'], df['PlayTennis'], normalize='index')\n\n\n\n\n\n  \n    \n      PlayTennis\n      No\n      Yes\n    \n    \n      Outlook\n      \n      \n    \n  \n  \n    \n      Overcast\n      0.0\n      1.0\n    \n    \n      Rain\n      0.4\n      0.6\n    \n    \n      Sunny\n      0.6\n      0.4\n    \n  \n\n\n\n\n\n\nUsing pd.groupby()\n\ndf.groupby([\"Outlook\"]).groups\n\n{'Overcast': [2, 6, 11, 12], 'Rain': [3, 4, 5, 9, 13], 'Sunny': [0, 1, 7, 8, 10]}\n\n\n\ndf.groupby([\"Outlook\"]).get_group(\"Sunny\")\n\n\n\n\n\n  \n    \n      \n      Outlook\n      Temperature\n      Humidity\n      Wind\n      PlayTennis\n    \n  \n  \n    \n      0\n      Sunny\n      Hot\n      High\n      Weak\n      No\n    \n    \n      1\n      Sunny\n      Hot\n      High\n      Strong\n      No\n    \n    \n      7\n      Sunny\n      Mild\n      High\n      Weak\n      No\n    \n    \n      8\n      Sunny\n      Cool\n      Normal\n      Weak\n      Yes\n    \n    \n      10\n      Sunny\n      Mild\n      Normal\n      Strong\n      Yes\n    \n  \n\n\n\n\n\ndf.groupby([\"Outlook\"]).get_group(\"Sunny\")[\"PlayTennis\"]\n\n0      No\n1      No\n7      No\n8     Yes\n10    Yes\nName: PlayTennis, dtype: object\n\n\n\ndf.groupby([\"Outlook\"]).get_group(\"Sunny\")[\"PlayTennis\"].value_counts()\n\nNo     3\nYes    2\nName: PlayTennis, dtype: int64\n\n\n\ndf.groupby([\"Outlook\", \"PlayTennis\"]).groups\n\n{('Overcast', 'Yes'): [2, 6, 11, 12], ('Rain', 'No'): [5, 13], ('Rain', 'Yes'): [3, 4, 9], ('Sunny', 'No'): [0, 1, 7], ('Sunny', 'Yes'): [8, 10]}\n\n\n\ndf.groupby([\"Outlook\", \"PlayTennis\"]).get_group((\"Sunny\", \"Yes\"))\n\n\n\n\n\n  \n    \n      \n      Outlook\n      Temperature\n      Humidity\n      Wind\n      PlayTennis\n    \n  \n  \n    \n      8\n      Sunny\n      Cool\n      Normal\n      Weak\n      Yes\n    \n    \n      10\n      Sunny\n      Mild\n      Normal\n      Strong\n      Yes\n    \n  \n\n\n\n\n\ndf.groupby([\"Outlook\", \"PlayTennis\"]).size()\n\nOutlook   PlayTennis\nOvercast  Yes           4\nRain      No            2\n          Yes           3\nSunny     No            3\n          Yes           2\ndtype: int64\n\n\n\ndf.groupby([\"Outlook\", \"PlayTennis\"]).size().index\n\nMultiIndex([('Overcast', 'Yes'),\n            (    'Rain',  'No'),\n            (    'Rain', 'Yes'),\n            (   'Sunny',  'No'),\n            (   'Sunny', 'Yes')],\n           names=['Outlook', 'PlayTennis'])\n\n\n\ndf.groupby([\"Outlook\", \"PlayTennis\"]).size().unstack()\n\n\n\n\n\n  \n    \n      PlayTennis\n      No\n      Yes\n    \n    \n      Outlook\n      \n      \n    \n  \n  \n    \n      Overcast\n      NaN\n      4.0\n    \n    \n      Rain\n      2.0\n      3.0\n    \n    \n      Sunny\n      3.0\n      2.0\n    \n  \n\n\n\n\n\ndf.groupby([\"Outlook\", \"PlayTennis\"]).size().unstack(fill_value=0)\n\n\n\n\n\n  \n    \n      PlayTennis\n      No\n      Yes\n    \n    \n      Outlook\n      \n      \n    \n  \n  \n    \n      Overcast\n      0\n      4\n    \n    \n      Rain\n      2\n      3\n    \n    \n      Sunny\n      3\n      2\n    \n  \n\n\n\n\n\n\nUsing pd.pivot_table\n\npivot_table = df.pivot_table(index='Outlook', columns='PlayTennis', aggfunc='size', fill_value=0)\npivot_table\n\n\n\n\n\n  \n    \n      PlayTennis\n      No\n      Yes\n    \n    \n      Outlook\n      \n      \n    \n  \n  \n    \n      Overcast\n      0\n      4\n    \n    \n      Rain\n      2\n      3\n    \n    \n      Sunny\n      3\n      2\n    \n  \n\n\n\n\n\ndf_out.plot(kind='bar', stacked=True)\n\n<AxesSubplot:xlabel='Outlook'>\n\n\n\n\n\n\ndf_out.plot(kind='bar', stacked=False)\n\n<AxesSubplot:xlabel='Outlook'>"
  },
  {
    "objectID": "notebooks/posts/names.html",
    "href": "notebooks/posts/names.html",
    "title": "Generating names using MLPs",
    "section": "",
    "text": "import torch\nimport torch.nn.functional as F\nfrom torch import nn\nimport pandas as pd\nimport matplotlib.pyplot as plt # for making figures\n%matplotlib inline\n\n\n# Get some names from https://github.com/MASTREX/List-of-Indian-Names\n\n\n!wget https://raw.githubusercontent.com/balasahebgulave/Dataset-Indian-Names/master/Indian_Names.csv -O names-long.csv\n\n--2023-03-30 10:44:24--  https://raw.githubusercontent.com/balasahebgulave/Dataset-Indian-Names/master/Indian_Names.csv\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.111.133, 185.199.110.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 85538 (84K) [text/plain]\nSaving to: ‘names-long.csv’\n\nnames-long.csv      100%[===================>]  83.53K  --.-KB/s    in 0.02s   \n\n2023-03-30 10:44:25 (4.09 MB/s) - ‘names-long.csv’ saved [85538/85538]\n\n\n\n\n!head names-long.csv\n\n,Name\n0,aabid\n1,aabida\n2,aachal\n3,aadesh\n4,aadil\n5,aadish\n6,aaditya\n7,aaenab\n8,aafreen\n\n\n\nwords = pd.read_csv('names-long.csv')[\"Name\"]\nwords = words.str.lower()\nwords = words.str.strip()\nwords = words.str.replace(\" \", \"\")\n\nwords = words[words.str.len() > 2]\nwords = words[words.str.len() < 10]\n\n# Randomly shuffle the words\nwords = words.sample(frac=1).reset_index(drop=True)\nwords = words.tolist()\n\n# Remove words having non alphabets\nwords = [word for word in words if word.isalpha()]\nwords[:10]\n\n['mahender',\n 'jit',\n 'aashu',\n 'shadab',\n 'sahun',\n 'harish',\n 'satya',\n 'gulnanj',\n 'ganesi',\n 'dalima']\n\n\n\nlen(words)\n\n6184\n\n\n\n# build the vocabulary of characters and mappings to/from integers\nchars = sorted(list(set(''.join(words))))\nstoi = {s:i+1 for i,s in enumerate(chars)}\nstoi['.'] = 0\nitos = {i:s for s,i in stoi.items()}\nprint(itos)\n\n{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 0: '.'}\n\n\n\nblock_size = 3 # context length: how many characters do we take to predict the next one?\nX, Y = [], []\nfor w in words[:1000]:\n  \n  #print(w)\n  context = [0] * block_size\n  for ch in w + '.':\n    ix = stoi[ch]\n    X.append(context)\n    Y.append(ix)\n    print(''.join(itos[i] for i in context), '--->', itos[ix])\n    context = context[1:] + [ix] # crop and append\n  \nX = torch.tensor(X)\nY = torch.tensor(Y)\n\n... ---> m\n..m ---> a\n.ma ---> h\nmah ---> e\nahe ---> n\nhen ---> d\nend ---> e\nnde ---> r\nder ---> .\n... ---> j\n..j ---> i\n.ji ---> t\njit ---> .\n... ---> a\n..a ---> a\n.aa ---> s\naas ---> h\nash ---> u\nshu ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> d\nhad ---> a\nada ---> b\ndab ---> .\n... ---> s\n..s ---> a\n.sa ---> h\nsah ---> u\nahu ---> n\nhun ---> .\n... ---> h\n..h ---> a\n.ha ---> r\nhar ---> i\nari ---> s\nris ---> h\nish ---> .\n... ---> s\n..s ---> a\n.sa ---> t\nsat ---> y\naty ---> a\ntya ---> .\n... ---> g\n..g ---> u\n.gu ---> l\ngul ---> n\nuln ---> a\nlna ---> n\nnan ---> j\nanj ---> .\n... ---> g\n..g ---> a\n.ga ---> n\ngan ---> e\nane ---> s\nnes ---> i\nesi ---> .\n... ---> d\n..d ---> a\n.da ---> l\ndal ---> i\nali ---> m\nlim ---> a\nima ---> .\n... ---> k\n..k ---> o\n.ko ---> s\nkos ---> y\nosy ---> l\nsyl ---> a\nyla ---> y\nlay ---> a\naya ---> .\n... ---> p\n..p ---> o\n.po ---> o\npoo ---> r\noor ---> a\nora ---> n\nran ---> .\n... ---> m\n..m ---> o\n.mo ---> h\nmoh ---> a\noha ---> m\nham ---> m\namm ---> a\nmma ---> d\nmad ---> .\n... ---> s\n..s ---> i\n.si ---> n\nsin ---> t\nint ---> a\nnta ---> .\n... ---> y\n..y ---> a\n.ya ---> k\nyak ---> s\naks ---> h\nksh ---> .\n... ---> p\n..p ---> e\n.pe ---> r\nper ---> d\nerd ---> e\nrde ---> e\ndee ---> p\neep ---> .\n... ---> t\n..t ---> i\n.ti ---> s\ntis ---> h\nish ---> a\nsha ---> .\n... ---> v\n..v ---> a\n.va ---> s\nvas ---> h\nash ---> i\nshi ---> l\nhil ---> a\nila ---> .\n... ---> d\n..d ---> e\n.de ---> v\ndev ---> r\nevr ---> a\nvra ---> j\nraj ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> h\nhah ---> b\nahb ---> a\nhba ---> z\nbaz ---> .\n... ---> r\n..r ---> a\n.ra ---> m\nram ---> u\namu ---> l\nmul ---> u\nulu ---> .\n... ---> d\n..d ---> h\n.dh ---> i\ndhi ---> r\nhir ---> e\nire ---> n\nren ---> d\nend ---> e\nnde ---> r\nder ---> .\n... ---> j\n..j ---> u\n.ju ---> n\njun ---> e\nune ---> b\nneb ---> .\n... ---> g\n..g ---> i\n.gi ---> l\ngil ---> b\nilb ---> a\nlba ---> h\nbah ---> a\naha ---> r\nhar ---> .\n... ---> a\n..a ---> y\n.ay ---> u\nayu ---> s\nyus ---> h\nush ---> i\nshi ---> .\n... ---> d\n..d ---> r\n.dr ---> u\ndru ---> g\nrug ---> a\nuga ---> .\n... ---> k\n..k ---> u\n.ku ---> s\nkus ---> o\nuso ---> .\n... ---> a\n..a ---> t\n.at ---> e\nate ---> e\ntee ---> k\neek ---> .\n... ---> n\n..n ---> a\n.na ---> j\nnaj ---> r\najr ---> e\njre ---> e\nree ---> n\neen ---> .\n... ---> s\n..s ---> w\n.sw ---> i\nswi ---> t\nwit ---> i\niti ---> .\n... ---> s\n..s ---> a\n.sa ---> n\nsan ---> a\nana ---> m\nnam ---> .\n... ---> c\n..c ---> h\n.ch ---> h\nchh ---> a\nhha ---> b\nhab ---> i\nabi ---> .\n... ---> n\n..n ---> i\n.ni ---> l\nnil ---> a\nila ---> m\nlam ---> .\n... ---> s\n..s ---> r\n.sr ---> i\nsri ---> t\nrit ---> a\nita ---> .\n... ---> c\n..c ---> h\n.ch ---> a\ncha ---> n\nhan ---> d\nand ---> a\nnda ---> n\ndan ---> i\nani ---> .\n... ---> p\n..p ---> a\n.pa ---> r\npar ---> n\narn ---> a\nrna ---> v\nnav ---> .\n... ---> s\n..s ---> u\n.su ---> d\nsud ---> h\nudh ---> a\ndha ---> t\nhat ---> a\nata ---> .\n... ---> s\n..s ---> a\n.sa ---> r\nsar ---> i\nari ---> k\nrik ---> a\nika ---> .\n... ---> r\n..r ---> a\n.ra ---> n\nran ---> k\nank ---> i\nnki ---> .\n... ---> s\n..s ---> a\n.sa ---> h\nsah ---> a\naha ---> b\nhab ---> .\n... ---> k\n..k ---> a\n.ka ---> l\nkal ---> a\nala ---> .\n... ---> s\n..s ---> u\n.su ---> r\nsur ---> g\nurg ---> y\nrgy ---> a\ngya ---> n\nyan ---> .\n... ---> j\n..j ---> i\n.ji ---> n\njin ---> c\ninc ---> y\nncy ---> .\n... ---> m\n..m ---> a\n.ma ---> q\nmaq ---> s\naqs ---> o\nqso ---> o\nsoo ---> d\nood ---> .\n... ---> s\n..s ---> a\n.sa ---> n\nsan ---> i\nani ---> a\nnia ---> .\n... ---> n\n..n ---> a\n.na ---> v\nnav ---> e\nave ---> e\nvee ---> n\neen ---> .\n... ---> n\n..n ---> i\n.ni ---> t\nnit ---> u\nitu ---> .\n... ---> s\n..s ---> a\n.sa ---> w\nsaw ---> a\nawa ---> n\nwan ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> k\nank ---> u\nnku ---> .\n... ---> b\n..b ---> a\n.ba ---> l\nbal ---> i\nali ---> r\nlir ---> a\nira ---> m\nram ---> .\n... ---> a\n..a ---> r\n.ar ---> i\nari ---> b\nrib ---> a\niba ---> .\n... ---> g\n..g ---> u\n.gu ---> n\ngun ---> g\nung ---> u\nngu ---> n\ngun ---> .\n... ---> r\n..r ---> a\n.ra ---> m\nram ---> n\namn ---> i\nmni ---> h\nnih ---> o\niho ---> r\nhor ---> .\n... ---> k\n..k ---> a\n.ka ---> w\nkaw ---> i\nawi ---> t\nwit ---> a\nita ---> .\n... ---> s\n..s ---> a\n.sa ---> v\nsav ---> i\navi ---> n\nvin ---> a\nina ---> .\n... ---> s\n..s ---> o\n.so ---> n\nson ---> i\noni ---> a\nnia ---> .\n... ---> s\n..s ---> e\n.se ---> v\nsev ---> a\neva ---> .\n... ---> s\n..s ---> u\n.su ---> j\nsuj ---> a\nuja ---> l\njal ---> .\n... ---> k\n..k ---> i\n.ki ---> s\nkis ---> h\nish ---> a\nsha ---> n\nhan ---> .\n... ---> p\n..p ---> e\n.pe ---> r\nper ---> v\nerv ---> e\nrve ---> z\nvez ---> .\n... ---> k\n..k ---> r\n.kr ---> i\nkri ---> s\nris ---> h\nish ---> a\nsha ---> n\nhan ---> a\nana ---> .\n... ---> j\n..j ---> y\n.jy ---> o\njyo ---> t\nyot ---> s\nots ---> a\ntsa ---> n\nsan ---> a\nana ---> .\n... ---> n\n..n ---> a\n.na ---> s\nnas ---> h\nash ---> i\nshi ---> m\nhim ---> a\nima ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> k\nhak ---> u\naku ---> n\nkun ---> a\nuna ---> .\n... ---> c\n..c ---> h\n.ch ---> e\nche ---> e\nhee ---> t\neet ---> e\nete ---> .\n... ---> h\n..h ---> a\n.ha ---> b\nhab ---> i\nabi ---> b\nbib ---> .\n... ---> s\n..s ---> a\n.sa ---> h\nsah ---> l\nahl ---> e\nhle ---> s\nles ---> h\nesh ---> .\n... ---> j\n..j ---> a\n.ja ---> g\njag ---> r\nagr ---> t\ngrt ---> i\nrti ---> .\n... ---> v\n..v ---> a\n.va ---> s\nvas ---> h\nash ---> a\nsha ---> n\nhan ---> a\nana ---> v\nnav ---> i\navi ---> .\n... ---> p\n..p ---> u\n.pu ---> j\npuj ---> a\nuja ---> .\n... ---> a\n..a ---> a\n.aa ---> r\naar ---> i\nari ---> f\nrif ---> .\n... ---> v\n..v ---> i\n.vi ---> j\nvij ---> e\nije ---> n\njen ---> d\nend ---> e\nnde ---> r\nder ---> .\n... ---> j\n..j ---> i\n.ji ---> b\njib ---> a\niba ---> n\nban ---> t\nant ---> i\nnti ---> .\n... ---> n\n..n ---> a\n.na ---> b\nnab ---> i\nabi ---> j\nbij ---> a\nija ---> n\njan ---> .\n... ---> r\n..r ---> o\n.ro ---> m\nrom ---> a\noma ---> .\n... ---> h\n..h ---> a\n.ha ---> i\nhai ---> d\naid ---> e\nide ---> r\nder ---> .\n... ---> c\n..c ---> h\n.ch ---> r\nchr ---> a\nhra ---> n\nran ---> .\n... ---> s\n..s ---> u\n.su ---> l\nsul ---> t\nult ---> a\nlta ---> n\ntan ---> .\n... ---> r\n..r ---> a\n.ra ---> b\nrab ---> h\nabh ---> i\nbhi ---> d\nhid ---> a\nida ---> .\n... ---> a\n..a ---> s\n.as ---> m\nasm ---> a\nsma ---> n\nman ---> .\n... ---> h\n..h ---> a\n.ha ---> z\nhaz ---> a\naza ---> r\nzar ---> i\nari ---> .\n... ---> n\n..n ---> a\n.na ---> j\nnaj ---> m\najm ---> i\njmi ---> n\nmin ---> .\n... ---> a\n..a ---> b\n.ab ---> h\nabh ---> a\nbha ---> .\n... ---> s\n..s ---> e\n.se ---> m\nsem ---> a\nema ---> .\n... ---> k\n..k ---> u\n.ku ---> n\nkun ---> d\nund ---> a\nnda ---> .\n... ---> v\n..v ---> i\n.vi ---> s\nvis ---> h\nish ---> a\nsha ---> m\nham ---> .\n... ---> s\n..s ---> a\n.sa ---> e\nsae ---> s\naes ---> h\nesh ---> t\nsht ---> a\nhta ---> .\n... ---> m\n..m ---> e\n.me ---> e\nmee ---> s\nees ---> h\nesh ---> .\n... ---> a\n..a ---> k\n.ak ---> h\nakh ---> t\nkht ---> a\nhta ---> r\ntar ---> i\nari ---> .\n... ---> m\n..m ---> i\n.mi ---> t\nmit ---> t\nitt ---> h\ntth ---> u\nthu ---> n\nhun ---> .\n... ---> t\n..t ---> a\n.ta ---> r\ntar ---> a\nara ---> n\nran ---> n\nann ---> u\nnnu ---> m\nnum ---> .\n... ---> b\n..b ---> a\n.ba ---> c\nbac ---> h\nach ---> c\nchc ---> h\nhch ---> a\ncha ---> .\n... ---> s\n..s ---> u\n.su ---> b\nsub ---> h\nubh ---> o\nbho ---> d\nhod ---> h\nodh ---> .\n... ---> s\n..s ---> h\n.sh ---> i\nshi ---> l\nhil ---> .\n... ---> b\n..b ---> e\n.be ---> b\nbeb ---> y\neby ---> .\n... ---> s\n..s ---> h\n.sh ---> u\nshu ---> l\nhul ---> e\nule ---> k\nlek ---> h\nekh ---> a\nkha ---> .\n... ---> m\n..m ---> o\n.mo ---> s\nmos ---> h\nosh ---> r\nshr ---> i\nhri ---> .\n... ---> r\n..r ---> a\n.ra ---> f\nraf ---> e\nafe ---> d\nfed ---> d\nedd ---> i\nddi ---> n\ndin ---> .\n... ---> g\n..g ---> o\n.go ---> k\ngok ---> u\noku ---> l\nkul ---> .\n... ---> t\n..t ---> e\n.te ---> e\ntee ---> k\neek ---> a\neka ---> m\nkam ---> .\n... ---> n\n..n ---> a\n.na ---> u\nnau ---> s\naus ---> h\nush ---> i\nshi ---> .\n... ---> a\n..a ---> b\n.ab ---> d\nabd ---> u\nbdu ---> l\ndul ---> l\null ---> a\nlla ---> h\nlah ---> .\n... ---> h\n..h ---> a\n.ha ---> n\nhan ---> n\nann ---> y\nnny ---> .\n... ---> k\n..k ---> i\n.ki ---> r\nkir ---> a\nira ---> n\nran ---> t\nant ---> i\nnti ---> .\n... ---> p\n..p ---> r\n.pr ---> e\npre ---> m\nrem ---> s\nems ---> i\nmsi ---> n\nsin ---> g\ning ---> h\nngh ---> .\n... ---> i\n..i ---> l\n.il ---> e\nile ---> m\nlem ---> a\nema ---> .\n... ---> a\n..a ---> m\n.am ---> z\namz ---> a\nmza ---> d\nzad ---> .\n... ---> s\n..s ---> a\n.sa ---> h\nsah ---> i\nahi ---> b\nhib ---> .\n... ---> b\n..b ---> a\n.ba ---> a\nbaa ---> m\naam ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> j\nhaj ---> i\naji ---> d\njid ---> .\n... ---> t\n..t ---> e\n.te ---> e\ntee ---> n\neen ---> u\nenu ---> .\n... ---> t\n..t ---> a\n.ta ---> m\ntam ---> a\nama ---> n\nman ---> n\nann ---> a\nnna ---> .\n... ---> m\n..m ---> a\n.ma ---> m\nmam ---> c\namc ---> h\nmch ---> a\ncha ---> n\nhan ---> d\nand ---> .\n... ---> a\n..a ---> b\n.ab ---> d\nabd ---> u\nbdu ---> l\ndul ---> l\null ---> a\nlla ---> .\n... ---> a\n..a ---> m\n.am ---> l\naml ---> e\nmle ---> s\nles ---> h\nesh ---> .\n... ---> s\n..s ---> i\n.si ---> k\nsik ---> e\nike ---> n\nken ---> d\nend ---> e\nnde ---> r\nder ---> .\n... ---> b\n..b ---> h\n.bh ---> e\nbhe ---> e\nhee ---> m\neem ---> a\nema ---> .\n... ---> d\n..d ---> e\n.de ---> e\ndee ---> p\neep ---> a\nepa ---> .\n... ---> i\n..i ---> b\n.ib ---> a\niba ---> r\nbar ---> h\narh ---> i\nrhi ---> m\nhim ---> .\n... ---> n\n..n ---> a\n.na ---> v\nnav ---> e\nave ---> d\nved ---> .\n... ---> m\n..m ---> a\n.ma ---> m\nmam ---> t\namt ---> .\n... ---> s\n..s ---> a\n.sa ---> h\nsah ---> a\naha ---> j\nhaj ---> a\naja ---> d\njad ---> .\n... ---> p\n..p ---> h\n.ph ---> o\npho ---> l\nhol ---> .\n... ---> t\n..t ---> i\n.ti ---> k\ntik ---> k\nikk ---> u\nkku ---> .\n... ---> g\n..g ---> u\n.gu ---> d\ngud ---> y\nudy ---> a\ndya ---> .\n... ---> n\n..n ---> a\n.na ---> z\nnaz ---> m\nazm ---> a\nzma ---> a\nmaa ---> .\n... ---> i\n..i ---> n\n.in ---> d\nind ---> r\nndr ---> a\ndra ---> j\nraj ---> .\n... ---> r\n..r ---> u\n.ru ---> p\nrup ---> a\nupa ---> m\npam ---> .\n... ---> p\n..p ---> a\n.pa ---> r\npar ---> a\nara ---> s\nras ---> h\nash ---> r\nshr ---> a\nhra ---> m\nram ---> .\n... ---> f\n..f ---> a\n.fa ---> t\nfat ---> e\nate ---> h\nteh ---> .\n... ---> s\n..s ---> a\n.sa ---> b\nsab ---> e\nabe ---> e\nbee ---> n\neen ---> a\nena ---> .\n... ---> b\n..b ---> a\n.ba ---> r\nbar ---> k\nark ---> h\nrkh ---> a\nkha ---> .\n... ---> s\n..s ---> a\n.sa ---> r\nsar ---> i\nari ---> p\nrip ---> .\n... ---> l\n..l ---> a\n.la ---> d\nlad ---> l\nadl ---> i\ndli ---> .\n... ---> m\n..m ---> u\n.mu ---> k\nmuk ---> a\nuka ---> r\nkar ---> a\nara ---> m\nram ---> .\n... ---> s\n..s ---> o\n.so ---> m\nsom ---> .\n... ---> g\n..g ---> u\n.gu ---> l\ngul ---> a\nula ---> s\nlas ---> h\nash ---> a\nsha ---> n\nhan ---> .\n... ---> p\n..p ---> r\n.pr ---> a\npra ---> n\nran ---> n\nann ---> a\nnna ---> b\nnab ---> .\n... ---> a\n..a ---> l\n.al ---> s\nals ---> e\nlse ---> e\nsee ---> p\neep ---> a\nepa ---> .\n... ---> s\n..s ---> i\n.si ---> s\nsis ---> h\nish ---> p\nshp ---> a\nhpa ---> l\npal ---> .\n... ---> n\n..n ---> a\n.na ---> r\nnar ---> e\nare ---> s\nres ---> h\nesh ---> .\n... ---> r\n..r ---> a\n.ra ---> n\nran ---> j\nanj ---> e\nnje ---> e\njee ---> t\neet ---> a\neta ---> .\n... ---> d\n..d ---> h\n.dh ---> a\ndha ---> n\nhan ---> j\nanj ---> a\nnja ---> y\njay ---> .\n... ---> a\n..a ---> n\n.an ---> i\nani ---> t\nnit ---> a\nita ---> .\n... ---> p\n..p ---> r\n.pr ---> e\npre ---> m\nrem ---> c\nemc ---> h\nmch ---> a\ncha ---> n\nhan ---> d\nand ---> .\n... ---> m\n..m ---> i\n.mi ---> n\nmin ---> a\nina ---> k\nnak ---> s\naks ---> h\nksh ---> i\nshi ---> .\n... ---> s\n..s ---> u\n.su ---> s\nsus ---> m\nusm ---> i\nsmi ---> t\nmit ---> a\nita ---> .\n... ---> b\n..b ---> u\n.bu ---> d\nbud ---> d\nudd ---> h\nddh ---> a\ndha ---> .\n... ---> b\n..b ---> h\n.bh ---> o\nbho ---> l\nhol ---> i\noli ---> .\n... ---> a\n..a ---> l\n.al ---> t\nalt ---> m\nltm ---> a\ntma ---> s\nmas ---> h\nash ---> .\n... ---> s\n..s ---> a\n.sa ---> m\nsam ---> a\nama ---> d\nmad ---> .\n... ---> m\n..m ---> o\n.mo ---> o\nmoo ---> l\nool ---> i\noli ---> .\n... ---> p\n..p ---> u\n.pu ---> r\npur ---> v\nurv ---> a\nrva ---> .\n... ---> s\n..s ---> a\n.sa ---> k\nsak ---> u\naku ---> n\nkun ---> t\nunt ---> l\nntl ---> a\ntla ---> .\n... ---> m\n..m ---> o\n.mo ---> h\nmoh ---> h\nohh ---> m\nhhm ---> a\nhma ---> d\nmad ---> .\n... ---> j\n..j ---> a\n.ja ---> i\njai ---> d\naid ---> e\nide ---> v\ndev ---> .\n... ---> m\n..m ---> o\n.mo ---> t\nmot ---> i\noti ---> l\ntil ---> a\nila ---> l\nlal ---> .\n... ---> a\n..a ---> n\n.an ---> a\nana ---> r\nnar ---> o\naro ---> .\n... ---> g\n..g ---> o\n.go ---> u\ngou ---> r\nour ---> a\nura ---> v\nrav ---> .\n... ---> p\n..p ---> a\n.pa ---> m\npam ---> j\namj ---> e\nmje ---> e\njee ---> t\neet ---> .\n... ---> b\n..b ---> a\n.ba ---> t\nbat ---> a\nata ---> s\ntas ---> i\nasi ---> .\n... ---> s\n..s ---> a\n.sa ---> r\nsar ---> a\nara ---> d\nrad ---> .\n... ---> v\n..v ---> e\n.ve ---> e\nvee ---> r\neer ---> p\nerp ---> a\nrpa ---> l\npal ---> .\n... ---> m\n..m ---> i\n.mi ---> n\nmin ---> t\nint ---> u\nntu ---> .\n... ---> p\n..p ---> r\n.pr ---> a\npra ---> b\nrab ---> h\nabh ---> a\nbha ---> t\nhat ---> .\n... ---> r\n..r ---> i\n.ri ---> z\nriz ---> w\nizw ---> a\nzwa ---> n\nwan ---> .\n... ---> r\n..r ---> a\n.ra ---> t\nrat ---> w\natw ---> a\ntwa ---> r\nwar ---> i\nari ---> .\n... ---> s\n..s ---> a\n.sa ---> k\nsak ---> a\naka ---> l\nkal ---> .\n... ---> t\n..t ---> a\n.ta ---> r\ntar ---> a\nara ---> c\nrac ---> h\nach ---> a\ncha ---> n\nhan ---> d\nand ---> .\n... ---> k\n..k ---> m\n.km ---> l\nkml ---> e\nmle ---> s\nles ---> .\n... ---> g\n..g ---> a\n.ga ---> m\ngam ---> e\name ---> r\nmer ---> .\n... ---> n\n..n ---> u\n.nu ---> r\nnur ---> b\nurb ---> i\nrbi ---> .\n... ---> a\n..a ---> d\n.ad ---> n\nadn ---> a\ndna ---> n\nnan ---> .\n... ---> r\n..r ---> u\n.ru ---> m\nrum ---> e\nume ---> e\nmee ---> t\neet ---> .\n... ---> k\n..k ---> e\n.ke ---> l\nkel ---> i\neli ---> .\n... ---> a\n..a ---> m\n.am ---> a\nama ---> n\nman ---> d\nand ---> e\nnde ---> e\ndee ---> p\neep ---> .\n... ---> s\n..s ---> a\n.sa ---> n\nsan ---> n\nann ---> a\nnna ---> .\n... ---> a\n..a ---> s\n.as ---> i\nasi ---> f\nsif ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> h\nhah ---> n\nahn ---> a\nhna ---> w\nnaw ---> a\nawa ---> j\nwaj ---> .\n... ---> a\n..a ---> j\n.aj ---> i\naji ---> t\njit ---> .\n... ---> d\n..d ---> a\n.da ---> y\nday ---> a\naya ---> l\nyal ---> .\n... ---> a\n..a ---> n\n.an ---> o\nano ---> u\nnou ---> r\nour ---> a\nura ---> .\n... ---> m\n..m ---> a\n.ma ---> r\nmar ---> y\nary ---> a\nrya ---> m\nyam ---> .\n... ---> j\n..j ---> a\n.ja ---> m\njam ---> s\nams ---> h\nmsh ---> e\nshe ---> d\nhed ---> .\n... ---> k\n..k ---> a\n.ka ---> r\nkar ---> u\naru ---> n\nrun ---> a\nuna ---> .\n... ---> s\n..s ---> h\n.sh ---> e\nshe ---> l\nhel ---> l\nell ---> y\nlly ---> .\n... ---> g\n..g ---> u\n.gu ---> d\ngud ---> i\nudi ---> a\ndia ---> .\n... ---> j\n..j ---> a\n.ja ---> m\njam ---> a\nama ---> a\nmaa ---> l\naal ---> .\n... ---> a\n..a ---> v\n.av ---> i\navi ---> .\n... ---> m\n..m ---> a\n.ma ---> h\nmah ---> a\naha ---> s\nhas ---> i\nasi ---> n\nsin ---> g\ning ---> h\nngh ---> .\n... ---> k\n..k ---> e\n.ke ---> l\nkel ---> a\nela ---> s\nlas ---> h\nash ---> i\nshi ---> .\n... ---> h\n..h ---> u\n.hu ---> m\nhum ---> e\nume ---> r\nmer ---> a\nera ---> .\n... ---> k\n..k ---> a\n.ka ---> s\nkas ---> i\nasi ---> m\nsim ---> .\n... ---> s\n..s ---> u\n.su ---> k\nsuk ---> s\nuks ---> h\nksh ---> a\nsha ---> n\nhan ---> a\nana ---> .\n... ---> y\n..y ---> a\n.ya ---> m\nyam ---> i\nami ---> n\nmin ---> i\nini ---> .\n... ---> b\n..b ---> u\n.bu ---> n\nbun ---> d\nund ---> a\nnda ---> .\n... ---> c\n..c ---> h\n.ch ---> a\ncha ---> m\nham ---> a\nama ---> n\nman ---> .\n... ---> b\n..b ---> a\n.ba ---> l\nbal ---> .\n... ---> v\n..v ---> i\n.vi ---> j\nvij ---> a\nija ---> y\njay ---> .\n... ---> g\n..g ---> a\n.ga ---> j\ngaj ---> a\naja ---> l\njal ---> a\nala ---> .\n... ---> s\n..s ---> a\n.sa ---> r\nsar ---> d\nard ---> a\nrda ---> r\ndar ---> .\n... ---> k\n..k ---> u\n.ku ---> s\nkus ---> h\nush ---> m\nshm ---> i\nhmi ---> t\nmit ---> a\nita ---> .\n... ---> g\n..g ---> u\n.gu ---> r\ngur ---> .\n... ---> s\n..s ---> h\n.sh ---> u\nshu ---> s\nhus ---> i\nusi ---> l\nsil ---> a\nila ---> .\n... ---> m\n..m ---> o\n.mo ---> m\nmom ---> i\nomi ---> n\nmin ---> a\nina ---> .\n... ---> n\n..n ---> a\n.na ---> y\nnay ---> n\nayn ---> a\nyna ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> n\nhan ---> k\nank ---> a\nnka ---> r\nkar ---> .\n... ---> g\n..g ---> i\n.gi ---> t\ngit ---> a\nita ---> .\n... ---> e\n..e ---> n\n.en ---> g\neng ---> l\nngl ---> a\ngla ---> s\nlas ---> .\n... ---> d\n..d ---> h\n.dh ---> a\ndha ---> r\nhar ---> m\narm ---> v\nrmv ---> i\nmvi ---> r\nvir ---> .\n... ---> o\n..o ---> m\n.om ---> i\nomi ---> .\n... ---> a\n..a ---> a\n.aa ---> j\naaj ---> i\naji ---> v\njiv ---> .\n... ---> s\n..s ---> r\n.sr ---> i\nsri ---> n\nrin ---> i\nini ---> w\nniw ---> a\niwa ---> s\nwas ---> h\nash ---> .\n... ---> a\n..a ---> f\n.af ---> s\nafs ---> a\nfsa ---> r\nsar ---> .\n... ---> r\n..r ---> e\n.re ---> h\nreh ---> m\nehm ---> a\nhma ---> t\nmat ---> .\n... ---> c\n..c ---> h\n.ch ---> h\nchh ---> a\nhha ---> b\nhab ---> i\nabi ---> l\nbil ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> e\nane ---> e\nnee ---> s\nees ---> h\nesh ---> .\n... ---> t\n..t ---> u\n.tu ---> l\ntul ---> c\nulc ---> h\nlch ---> a\ncha ---> r\nhar ---> a\nara ---> m\nram ---> .\n... ---> r\n..r ---> a\n.ra ---> n\nran ---> i\nani ---> p\nnip ---> a\nipa ---> l\npal ---> .\n... ---> l\n..l ---> i\n.li ---> l\nlil ---> a\nila ---> d\nlad ---> e\nade ---> v\ndev ---> i\nevi ---> .\n... ---> c\n..c ---> h\n.ch ---> h\nchh ---> o\nhho ---> t\nhot ---> u\notu ---> .\n... ---> n\n..n ---> e\n.ne ---> e\nnee ---> s\nees ---> a\nesa ---> .\n... ---> k\n..k ---> b\n.kb ---> e\nkbe ---> t\nbet ---> a\neta ---> .\n... ---> s\n..s ---> u\n.su ---> k\nsuk ---> u\nuku ---> m\nkum ---> a\numa ---> r\nmar ---> .\n... ---> a\n..a ---> m\n.am ---> i\nami ---> t\nmit ---> a\nita ---> .\n... ---> v\n..v ---> e\n.ve ---> s\nves ---> a\nesa ---> l\nsal ---> i\nali ---> .\n... ---> v\n..v ---> a\n.va ---> s\nvas ---> i\nasi ---> m\nsim ---> .\n... ---> a\n..a ---> a\n.aa ---> s\naas ---> h\nash ---> m\nshm ---> a\nhma ---> .\n... ---> b\n..b ---> u\n.bu ---> d\nbud ---> h\nudh ---> a\ndha ---> n\nhan ---> .\n... ---> c\n..c ---> o\n.co ---> s\ncos ---> m\nosm ---> i\nsmi ---> c\nmic ---> .\n... ---> t\n..t ---> a\n.ta ---> s\ntas ---> h\nash ---> n\nshn ---> i\nhni ---> m\nnim ---> .\n... ---> i\n..i ---> s\n.is ---> h\nish ---> a\nsha ---> t\nhat ---> k\natk ---> a\ntka ---> r\nkar ---> .\n... ---> f\n..f ---> i\n.fi ---> t\nfit ---> r\nitr ---> a\ntra ---> t\nrat ---> .\n... ---> e\n..e ---> k\n.ek ---> t\nekt ---> a\nkta ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> b\nhab ---> i\nabi ---> r\nbir ---> .\n... ---> r\n..r ---> a\n.ra ---> j\nraj ---> s\najs ---> h\njsh ---> r\nshr ---> e\nhre ---> e\nree ---> .\n... ---> b\n..b ---> a\n.ba ---> d\nbad ---> a\nada ---> .\n... ---> m\n..m ---> a\n.ma ---> m\nmam ---> a\nama ---> n\nman ---> .\n... ---> m\n..m ---> u\n.mu ---> n\nmun ---> m\nunm ---> u\nnmu ---> n\nmun ---> .\n... ---> j\n..j ---> a\n.ja ---> v\njav ---> i\navi ---> t\nvit ---> r\nitr ---> i\ntri ---> .\n... ---> p\n..p ---> a\n.pa ---> p\npap ---> p\napp ---> e\nppe ---> .\n... ---> j\n..j ---> u\n.ju ---> n\njun ---> a\nuna ---> .\n... ---> s\n..s ---> c\n.sc ---> h\nsch ---> i\nchi ---> n\nhin ---> .\n... ---> a\n..a ---> k\n.ak ---> h\nakh ---> l\nkhl ---> a\nhla ---> q\nlaq ---> .\n... ---> i\n..i ---> n\n.in ---> d\nind ---> e\nnde ---> r\nder ---> n\nern ---> a\nrna ---> t\nnat ---> h\nath ---> .\n... ---> s\n..s ---> a\n.sa ---> n\nsan ---> d\nand ---> e\nnde ---> e\ndee ---> p\neep ---> a\nepa ---> .\n... ---> d\n..d ---> i\n.di ---> w\ndiw ---> a\niwa ---> n\nwan ---> .\n... ---> r\n..r ---> a\n.ra ---> m\nram ---> e\name ---> s\nmes ---> h\nesh ---> .\n... ---> j\n..j ---> y\n.jy ---> o\njyo ---> t\nyot ---> i\noti ---> .\n... ---> s\n..s ---> a\n.sa ---> m\nsam ---> u\namu ---> n\nmun ---> d\nund ---> r\nndr ---> i\ndri ---> .\n... ---> v\n..v ---> i\n.vi ---> m\nvim ---> l\niml ---> e\nmle ---> s\nles ---> h\nesh ---> .\n... ---> s\n..s ---> a\n.sa ---> r\nsar ---> o\naro ---> o\nroo ---> p\noop ---> .\n... ---> p\n..p ---> u\n.pu ---> l\npul ---> i\nuli ---> t\nlit ---> a\nita ---> .\n... ---> j\n..j ---> i\n.ji ---> n\njin ---> a\nina ---> t\nnat ---> .\n... ---> s\n..s ---> a\n.sa ---> z\nsaz ---> y\nazy ---> a\nzya ---> .\n... ---> s\n..s ---> u\n.su ---> k\nsuk ---> h\nukh ---> e\nkhe ---> e\nhee ---> y\neey ---> a\neya ---> .\n... ---> u\n..u ---> n\n.un ---> k\nunk ---> n\nnkn ---> o\nkno ---> w\nnow ---> n\nown ---> .\n... ---> g\n..g ---> o\n.go ---> n\ngon ---> a\nona ---> .\n... ---> s\n..s ---> h\n.sh ---> e\nshe ---> i\nhei ---> s\neis ---> h\nish ---> .\n... ---> p\n..p ---> u\n.pu ---> s\npus ---> p\nusp ---> h\nsph ---> a\npha ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> g\nang ---> u\nngu ---> b\ngub ---> a\nuba ---> i\nbai ---> .\n... ---> b\n..b ---> u\n.bu ---> s\nbus ---> h\nush ---> a\nsha ---> r\nhar ---> a\nara ---> .\n... ---> r\n..r ---> o\n.ro ---> z\nroz ---> i\nozi ---> .\n... ---> s\n..s ---> i\n.si ---> f\nsif ---> a\nifa ---> .\n... ---> g\n..g ---> a\n.ga ---> l\ngal ---> i\nali ---> y\nliy ---> a\niya ---> .\n... ---> h\n..h ---> e\n.he ---> t\nhet ---> a\neta ---> l\ntal ---> .\n... ---> l\n..l ---> a\n.la ---> l\nlal ---> i\nali ---> t\nlit ---> a\nita ---> .\n... ---> j\n..j ---> y\n.jy ---> o\njyo ---> t\nyot ---> y\noty ---> .\n... ---> j\n..j ---> a\n.ja ---> n\njan ---> i\nani ---> d\nnid ---> .\n... ---> m\n..m ---> u\n.mu ---> n\nmun ---> n\nunn ---> i\nnni ---> a\nnia ---> .\n... ---> s\n..s ---> a\n.sa ---> z\nsaz ---> i\nazi ---> d\nzid ---> .\n... ---> n\n..n ---> i\n.ni ---> t\nnit ---> t\nitt ---> i\ntti ---> n\ntin ---> .\n... ---> p\n..p ---> r\n.pr ---> a\npra ---> b\nrab ---> h\nabh ---> a\nbha ---> k\nhak ---> a\naka ---> r\nkar ---> .\n... ---> a\n..a ---> m\n.am ---> r\namr ---> t\nmrt ---> a\nrta ---> .\n... ---> a\n..a ---> n\n.an ---> u\nanu ---> p\nnup ---> u\nupu ---> m\npum ---> a\numa ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> k\nhak ---> e\nake ---> e\nkee ---> l\neel ---> a\nela ---> .\n... ---> m\n..m ---> i\n.mi ---> c\nmic ---> h\nich ---> a\ncha ---> e\nhae ---> l\nael ---> .\n... ---> s\n..s ---> u\n.su ---> p\nsup ---> y\nupy ---> a\npya ---> r\nyar ---> .\n... ---> s\n..s ---> e\n.se ---> e\nsee ---> b\neeb ---> a\neba ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> e\nane ---> e\nnee ---> s\nees ---> h\nesh ---> a\nsha ---> .\n... ---> v\n..v ---> i\n.vi ---> p\nvip ---> a\nipa ---> n\npan ---> .\n... ---> s\n..s ---> h\n.sh ---> i\nshi ---> m\nhim ---> l\niml ---> a\nmla ---> .\n... ---> g\n..g ---> u\n.gu ---> d\ngud ---> d\nudd ---> i\nddi ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> d\nand ---> o\nndo ---> t\ndot ---> h\noth ---> i\nthi ---> .\n... ---> f\n..f ---> a\n.fa ---> i\nfai ---> z\naiz ---> .\n... ---> r\n..r ---> i\n.ri ---> t\nrit ---> h\nith ---> i\nthi ---> k\nhik ---> .\n... ---> m\n..m ---> o\n.mo ---> i\nmoi ---> n\noin ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> u\nhau ---> r\naur ---> a\nura ---> b\nrab ---> h\nabh ---> .\n... ---> n\n..n ---> a\n.na ---> y\nnay ---> a\naya ---> n\nyan ---> .\n... ---> b\n..b ---> h\n.bh ---> a\nbha ---> w\nhaw ---> a\nawa ---> r\nwar ---> i\nari ---> .\n... ---> r\n..r ---> a\n.ra ---> n\nran ---> j\nanj ---> i\nnji ---> t\njit ---> a\nita ---> .\n... ---> b\n..b ---> a\n.ba ---> r\nbar ---> j\narj ---> .\n... ---> v\n..v ---> e\n.ve ---> e\nvee ---> n\neen ---> a\nena ---> .\n... ---> j\n..j ---> i\n.ji ---> m\njim ---> i\nimi ---> .\n... ---> s\n..s ---> h\n.sh ---> r\nshr ---> e\nhre ---> e\nree ---> e\neee ---> .\n... ---> s\n..s ---> h\n.sh ---> r\nshr ---> i\nhri ---> k\nrik ---> a\nika ---> n\nkan ---> t\nant ---> .\n... ---> p\n..p ---> r\n.pr ---> e\npre ---> m\nrem ---> l\neml ---> a\nmla ---> t\nlat ---> a\nata ---> .\n... ---> n\n..n ---> e\n.ne ---> e\nnee ---> m\neem ---> i\nemi ---> .\n... ---> h\n..h ---> a\n.ha ---> r\nhar ---> i\nari ---> b\nrib ---> .\n... ---> p\n..p ---> h\n.ph ---> o\npho ---> o\nhoo ---> l\nool ---> l\noll ---> a\nlla ---> .\n... ---> v\n..v ---> i\n.vi ---> d\nvid ---> y\nidy ---> a\ndya ---> w\nyaw ---> a\nawa ---> t\nwat ---> i\nati ---> .\n... ---> s\n..s ---> a\n.sa ---> t\nsat ---> w\natw ---> a\ntwa ---> n\nwan ---> d\nand ---> e\nnde ---> r\nder ---> .\n... ---> a\n..a ---> a\n.aa ---> d\naad ---> i\nadi ---> t\ndit ---> y\nity ---> a\ntya ---> .\n... ---> m\n..m ---> e\n.me ---> e\nmee ---> r\neer ---> a\nera ---> .\n... ---> b\n..b ---> h\n.bh ---> a\nbha ---> g\nhag ---> i\nagi ---> p\ngip ---> u\nipu ---> r\npur ---> i\nuri ---> .\n... ---> h\n..h ---> a\n.ha ---> i\nhai ---> l\nail ---> e\nile ---> n\nlen ---> a\nena ---> .\n... ---> l\n..l ---> a\n.la ---> k\nlak ---> h\nakh ---> i\nkhi ---> .\n... ---> h\n..h ---> a\n.ha ---> r\nhar ---> d\nard ---> a\nrda ---> m\ndam ---> .\n... ---> r\n..r ---> a\n.ra ---> f\nraf ---> i\nafi ---> .\n... ---> m\n..m ---> a\n.ma ---> h\nmah ---> i\nahi ---> n\nhin ---> d\nind ---> r\nndr ---> a\ndra ---> .\n... ---> r\n..r ---> a\n.ra ---> j\nraj ---> k\najk ---> a\njka ---> r\nkar ---> n\narn ---> t\nrnt ---> a\nnta ---> .\n... ---> a\n..a ---> a\n.aa ---> s\naas ---> .\n... ---> v\n..v ---> a\n.va ---> i\nvai ---> j\naij ---> a\nija ---> n\njan ---> t\nant ---> i\nnti ---> .\n... ---> k\n..k ---> u\n.ku ---> n\nkun ---> d\nund ---> e\nnde ---> n\nden ---> .\n... ---> s\n..s ---> h\n.sh ---> i\nshi ---> t\nhit ---> a\nita ---> l\ntal ---> .\n... ---> d\n..d ---> u\n.du ---> r\ndur ---> g\nurg ---> a\nrga ---> w\ngaw ---> a\nawa ---> t\nwat ---> i\nati ---> .\n... ---> c\n..c ---> h\n.ch ---> o\ncho ---> t\nhot ---> t\nott ---> i\ntti ---> .\n... ---> y\n..y ---> a\n.ya ---> a\nyaa ---> d\naad ---> r\nadr ---> a\ndra ---> m\nram ---> .\n... ---> p\n..p ---> a\n.pa ---> n\npan ---> d\nand ---> u\nndu ---> .\n... ---> a\n..a ---> s\n.as ---> f\nasf ---> a\nsfa ---> k\nfak ---> .\n... ---> m\n..m ---> a\n.ma ---> h\nmah ---> v\nahv ---> i\nhvi ---> s\nvis ---> h\nish ---> .\n... ---> r\n..r ---> u\n.ru ---> b\nrub ---> a\nuba ---> l\nbal ---> .\n... ---> r\n..r ---> i\n.ri ---> m\nrim ---> j\nimj ---> h\nmjh ---> i\njhi ---> m\nhim ---> .\n... ---> s\n..s ---> i\n.si ---> d\nsid ---> h\nidh ---> a\ndha ---> r\nhar ---> t\nart ---> h\nrth ---> .\n... ---> r\n..r ---> a\n.ra ---> v\nrav ---> i\navi ---> n\nvin ---> a\nina ---> t\nnat ---> h\nath ---> .\n... ---> l\n..l ---> a\n.la ---> k\nlak ---> s\naks ---> h\nksh ---> m\nshm ---> a\nhma ---> n\nman ---> .\n... ---> m\n..m ---> u\n.mu ---> q\nmuq ---> h\nuqh ---> t\nqht ---> a\nhta ---> r\ntar ---> .\n... ---> c\n..c ---> h\n.ch ---> u\nchu ---> n\nhun ---> n\nunn ---> i\nnni ---> .\n... ---> m\n..m ---> a\n.ma ---> h\nmah ---> e\nahe ---> n\nhen ---> d\nend ---> r\nndr ---> a\ndra ---> .\n... ---> g\n..g ---> y\n.gy ---> a\ngya ---> n\nyan ---> w\nanw ---> a\nnwa ---> t\nwat ---> i\nati ---> .\n... ---> p\n..p ---> r\n.pr ---> a\npra ---> t\nrat ---> i\nati ---> .\n... ---> m\n..m ---> e\n.me ---> g\nmeg ---> h\negh ---> a\ngha ---> r\nhar ---> a\nara ---> j\nraj ---> .\n... ---> j\n..j ---> a\n.ja ---> i\njai ---> v\naiv ---> i\nivi ---> n\nvin ---> d\nind ---> .\n... ---> n\n..n ---> a\n.na ---> r\nnar ---> a\nara ---> y\nray ---> a\naya ---> n\nyan ---> .\n... ---> j\n..j ---> a\n.ja ---> y\njay ---> a\naya ---> n\nyan ---> t\nant ---> i\nnti ---> .\n... ---> s\n..s ---> a\n.sa ---> b\nsab ---> b\nabb ---> i\nbbi ---> r\nbir ---> .\n... ---> k\n..k ---> a\n.ka ---> m\nkam ---> a\nama ---> l\nmal ---> .\n... ---> r\n..r ---> a\n.ra ---> j\nraj ---> e\naje ---> n\njen ---> d\nend ---> e\nnde ---> r\nder ---> i\neri ---> .\n... ---> j\n..j ---> i\n.ji ---> t\njit ---> t\nitt ---> e\ntte ---> n\nten ---> d\nend ---> e\nnde ---> r\nder ---> .\n... ---> c\n..c ---> h\n.ch ---> a\ncha ---> n\nhan ---> d\nand ---> a\nnda ---> n\ndan ---> .\n... ---> m\n..m ---> a\n.ma ---> h\nmah ---> u\nahu ---> d\nhud ---> .\n... ---> b\n..b ---> h\n.bh ---> a\nbha ---> g\nhag ---> i\nagi ---> r\ngir ---> a\nira ---> t\nrat ---> h\nath ---> .\n... ---> v\n..v ---> a\n.va ---> n\nvan ---> d\nand ---> h\nndh ---> a\ndha ---> n\nhan ---> a\nana ---> .\n... ---> b\n..b ---> a\n.ba ---> n\nban ---> s\nans ---> h\nnsh ---> i\nshi ---> .\n... ---> s\n..s ---> a\n.sa ---> n\nsan ---> g\nang ---> e\nnge ---> e\ngee ---> n\neen ---> a\nena ---> .\n... ---> g\n..g ---> h\n.gh ---> a\ngha ---> n\nhan ---> s\nans ---> h\nnsh ---> y\nshy ---> a\nhya ---> m\nyam ---> .\n... ---> h\n..h ---> a\n.ha ---> r\nhar ---> p\narp ---> a\nrpa ---> l\npal ---> .\n... ---> p\n..p ---> a\n.pa ---> n\npan ---> d\nand ---> i\nndi ---> t\ndit ---> .\n... ---> g\n..g ---> u\n.gu ---> l\ngul ---> i\nuli ---> s\nlis ---> t\nist ---> a\nsta ---> .\n... ---> s\n..s ---> a\n.sa ---> h\nsah ---> k\nahk ---> i\nhki ---> r\nkir ---> .\n... ---> a\n..a ---> j\n.aj ---> a\naja ---> y\njay ---> p\nayp ---> a\nypa ---> l\npal ---> .\n... ---> h\n..h ---> a\n.ha ---> p\nhap ---> p\napp ---> y\nppy ---> .\n... ---> v\n..v ---> i\n.vi ---> k\nvik ---> r\nikr ---> a\nkra ---> m\nram ---> .\n... ---> t\n..t ---> a\n.ta ---> r\ntar ---> a\nara ---> n\nran ---> .\n... ---> r\n..r ---> a\n.ra ---> t\nrat ---> n\natn ---> .\n... ---> r\n..r ---> a\n.ra ---> m\nram ---> r\namr ---> a\nmra ---> t\nrat ---> i\nati ---> .\n... ---> f\n..f ---> r\n.fr ---> a\nfra ---> .\n... ---> m\n..m ---> e\n.me ---> n\nmen ---> a\nena ---> k\nnak ---> s\naks ---> h\nksh ---> i\nshi ---> .\n... ---> j\n..j ---> a\n.ja ---> s\njas ---> h\nash ---> g\nshg ---> u\nhgu ---> l\ngul ---> .\n... ---> s\n..s ---> a\n.sa ---> t\nsat ---> v\natv ---> e\ntve ---> e\nvee ---> r\neer ---> .\n... ---> p\n..p ---> e\n.pe ---> e\npee ---> n\neen ---> a\nena ---> .\n... ---> d\n..d ---> e\n.de ---> e\ndee ---> p\neep ---> u\nepu ---> .\n... ---> j\n..j ---> i\n.ji ---> t\njit ---> e\nite ---> n\nten ---> d\nend ---> e\nnde ---> r\nder ---> a\nera ---> .\n... ---> y\n..y ---> o\n.yo ---> g\nyog ---> e\noge ---> n\ngen ---> d\nend ---> e\nnde ---> r\nder ---> .\n... ---> d\n..d ---> h\n.dh ---> a\ndha ---> r\nhar ---> v\narv ---> e\nrve ---> s\nves ---> h\nesh ---> .\n... ---> j\n..j ---> a\n.ja ---> i\njai ---> t\nait ---> u\nitu ---> n\ntun ---> .\n... ---> s\n..s ---> a\n.sa ---> l\nsal ---> i\nali ---> n\nlin ---> i\nini ---> .\n... ---> r\n..r ---> i\n.ri ---> m\nrim ---> p\nimp ---> y\nmpy ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> r\nhar ---> a\nara ---> d\nrad ---> .\n... ---> s\n..s ---> o\n.so ---> n\nson ---> a\nona ---> .\n... ---> p\n..p ---> r\n.pr ---> i\npri ---> y\nriy ---> a\niya ---> k\nyak ---> .\n... ---> p\n..p ---> o\n.po ---> m\npom ---> a\noma ---> .\n... ---> d\n..d ---> a\n.da ---> v\ndav ---> e\nave ---> e\nvee ---> n\neen ---> a\nena ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> m\nham ---> b\namb ---> u\nmbu ---> .\n... ---> s\n..s ---> h\n.sh ---> e\nshe ---> l\nhel ---> e\nele ---> n\nlen ---> d\nend ---> e\nnde ---> r\nder ---> .\n... ---> s\n..s ---> i\n.si ---> v\nsiv ---> a\niva ---> n\nvan ---> i\nani ---> .\n... ---> r\n..r ---> a\n.ra ---> m\nram ---> m\namm ---> u\nmmu ---> r\nmur ---> t\nurt ---> i\nrti ---> .\n... ---> t\n..t ---> a\n.ta ---> n\ntan ---> m\nanm ---> a\nnma ---> y\nmay ---> .\n... ---> i\n..i ---> n\n.in ---> d\nind ---> e\nnde ---> r\nder ---> v\nerv ---> e\nrve ---> s\nves ---> h\nesh ---> .\n... ---> r\n..r ---> a\n.ra ---> j\nraj ---> .\n... ---> d\n..d ---> o\n.do ---> u\ndou ---> l\noul ---> a\nula ---> t\nlat ---> .\n... ---> s\n..s ---> n\n.sn ---> j\nsnj ---> a\nnja ---> n\njan ---> a\nana ---> .\n... ---> b\n..b ---> h\n.bh ---> a\nbha ---> j\nhaj ---> a\naja ---> n\njan ---> .\n... ---> s\n..s ---> a\n.sa ---> k\nsak ---> s\naks ---> h\nksh ---> i\nshi ---> .\n... ---> r\n..r ---> a\n.ra ---> t\nrat ---> h\nath ---> a\ntha ---> n\nhan ---> .\n... ---> g\n..g ---> i\n.gi ---> t\ngit ---> i\niti ---> k\ntik ---> a\nika ---> .\n... ---> a\n..a ---> n\n.an ---> s\nans ---> u\nnsu ---> .\n... ---> s\n..s ---> u\n.su ---> n\nsun ---> d\nund ---> g\nndg ---> a\ndga ---> .\n... ---> y\n..y ---> a\n.ya ---> m\nyam ---> e\name ---> e\nmee ---> n\neen ---> .\n... ---> p\n..p ---> a\n.pa ---> r\npar ---> g\narg ---> a\nrga ---> t\ngat ---> i\nati ---> .\n... ---> j\n..j ---> a\n.ja ---> s\njas ---> w\nasw ---> i\nswi ---> n\nwin ---> d\nind ---> e\nnde ---> r\nder ---> .\n... ---> c\n..c ---> h\n.ch ---> e\nche ---> t\nhet ---> a\neta ---> n\ntan ---> r\nanr ---> a\nnra ---> m\nram ---> .\n... ---> r\n..r ---> a\n.ra ---> m\nram ---> e\name ---> s\nmes ---> h\nesh ---> w\nshw ---> a\nhwa ---> r\nwar ---> .\n... ---> h\n..h ---> i\n.hi ---> m\nhim ---> a\nima ---> n\nman ---> i\nani ---> .\n... ---> n\n..n ---> e\n.ne ---> e\nnee ---> m\neem ---> a\nema ---> .\n... ---> b\n..b ---> h\n.bh ---> a\nbha ---> n\nhan ---> .\n... ---> h\n..h ---> a\n.ha ---> s\nhas ---> e\nase ---> e\nsee ---> n\neen ---> .\n... ---> p\n..p ---> a\n.pa ---> r\npar ---> m\narm ---> j\nrmj ---> e\nmje ---> e\njee ---> t\neet ---> .\n... ---> m\n..m ---> e\n.me ---> r\nmer ---> o\nero ---> .\n... ---> g\n..g ---> u\n.gu ---> g\ngug ---> n\nugn ---> a\ngna ---> .\n... ---> p\n..p ---> h\n.ph ---> u\nphu ---> l\nhul ---> k\nulk ---> a\nlka ---> n\nkan ---> a\nana ---> .\n... ---> a\n..a ---> n\n.an ---> j\nanj ---> r\nnjr ---> e\njre ---> j\nrej ---> .\n... ---> a\n..a ---> k\n.ak ---> s\naks ---> h\nksh ---> i\nshi ---> t\nhit ---> a\nita ---> .\n... ---> y\n..y ---> a\n.ya ---> s\nyas ---> o\naso ---> d\nsod ---> h\nodh ---> a\ndha ---> .\n... ---> g\n..g ---> o\n.go ---> r\ngor ---> i\nori ---> .\n... ---> s\n..s ---> a\n.sa ---> f\nsaf ---> e\nafe ---> .\n... ---> m\n..m ---> a\n.ma ---> s\nmas ---> h\nash ---> e\nshe ---> e\nhee ---> n\neen ---> .\n... ---> y\n..y ---> u\n.yu ---> n\nyun ---> u\nunu ---> s\nnus ---> .\n... ---> g\n..g ---> u\n.gu ---> d\ngud ---> d\nudd ---> i\nddi ---> y\ndiy ---> a\niya ---> .\n... ---> a\n..a ---> k\n.ak ---> h\nakh ---> a\nkha ---> t\nhat ---> a\nata ---> r\ntar ---> i\nari ---> .\n... ---> n\n..n ---> a\n.na ---> r\nnar ---> e\nare ---> n\nren ---> d\nend ---> a\nnda ---> r\ndar ---> .\n... ---> i\n..i ---> s\n.is ---> h\nish ---> i\nshi ---> t\nhit ---> a\nita ---> .\n... ---> s\n..s ---> o\n.so ---> m\nsom ---> a\noma ---> .\n... ---> h\n..h ---> o\n.ho ---> m\nhom ---> a\noma ---> .\n... ---> s\n..s ---> a\n.sa ---> n\nsan ---> o\nano ---> .\n... ---> s\n..s ---> a\n.sa ---> m\nsam ---> v\namv ---> e\nmve ---> d\nved ---> n\nedn ---> a\ndna ---> .\n... ---> u\n..u ---> r\n.ur ---> e\nure ---> n\nren ---> d\nend ---> r\nndr ---> a\ndra ---> .\n... ---> s\n..s ---> o\n.so ---> z\nsoz ---> i\nozi ---> .\n... ---> p\n..p ---> a\n.pa ---> r\npar ---> u\naru ---> l\nrul ---> .\n... ---> k\n..k ---> a\n.ka ---> r\nkar ---> i\nari ---> s\nris ---> h\nish ---> m\nshm ---> a\nhma ---> .\n... ---> s\n..s ---> a\n.sa ---> h\nsah ---> i\nahi ---> d\nhid ---> .\n... ---> b\n..b ---> h\n.bh ---> u\nbhu ---> s\nhus ---> h\nush ---> a\nsha ---> n\nhan ---> .\n... ---> s\n..s ---> h\n.sh ---> m\nshm ---> e\nhme ---> j\nmej ---> h\nejh ---> a\njha ---> .\n... ---> s\n..s ---> w\n.sw ---> e\nswe ---> t\nwet ---> a\neta ---> .\n... ---> j\n..j ---> a\n.ja ---> m\njam ---> r\namr ---> u\nmru ---> j\nruj ---> a\nuja ---> h\njah ---> a\naha ---> .\n... ---> k\n..k ---> o\n.ko ---> k\nkok ---> i\noki ---> l\nkil ---> .\n... ---> r\n..r ---> i\n.ri ---> j\nrij ---> u\niju ---> l\njul ---> .\n... ---> g\n..g ---> u\n.gu ---> r\ngur ---> p\nurp ---> r\nrpr ---> i\npri ---> t\nrit ---> .\n... ---> n\n..n ---> a\n.na ---> s\nnas ---> e\nase ---> e\nsee ---> m\neem ---> .\n... ---> s\n..s ---> a\n.sa ---> t\nsat ---> e\nate ---> n\nten ---> d\nend ---> e\nnde ---> r\nder ---> .\n... ---> r\n..r ---> i\n.ri ---> y\nriy ---> a\niya ---> j\nyaj ---> u\naju ---> d\njud ---> i\nudi ---> n\ndin ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> d\nand ---> v\nndv ---> i\ndvi ---> .\n... ---> m\n..m ---> a\n.ma ---> h\nmah ---> a\naha ---> m\nham ---> m\namm ---> d\nmmd ---> .\n... ---> r\n..r ---> a\n.ra ---> j\nraj ---> n\najn ---> i\njni ---> s\nnis ---> h\nish ---> .\n... ---> s\n..s ---> u\n.su ---> k\nsuk ---> j\nukj ---> v\nkjv ---> e\njve ---> e\nvee ---> r\neer ---> .\n... ---> m\n..m ---> u\n.mu ---> s\nmus ---> h\nush ---> k\nshk ---> a\nhka ---> n\nkan ---> .\n... ---> j\n..j ---> h\n.jh ---> a\njha ---> w\nhaw ---> a\nawa ---> r\nwar ---> .\n... ---> a\n..a ---> a\n.aa ---> r\naar ---> u\naru ---> s\nrus ---> h\nush ---> i\nshi ---> .\n... ---> f\n..f ---> a\n.fa ---> z\nfaz ---> a\naza ---> l\nzal ---> e\nale ---> y\nley ---> .\n... ---> f\n..f ---> u\n.fu ---> l\nful ---> m\nulm ---> i\nlmi ---> y\nmiy ---> a\niya ---> .\n... ---> h\n..h ---> a\n.ha ---> r\nhar ---> i\nari ---> o\nrio ---> m\niom ---> .\n... ---> s\n..s ---> n\n.sn ---> t\nsnt ---> o\nnto ---> s\ntos ---> h\nosh ---> .\n... ---> f\n..f ---> a\n.fa ---> r\nfar ---> h\narh ---> a\nrha ---> j\nhaj ---> a\naja ---> .\n... ---> k\n..k ---> i\n.ki ---> s\nkis ---> h\nish ---> n\nshn ---> a\nhna ---> r\nnar ---> a\nara ---> m\nram ---> .\n... ---> f\n..f ---> a\n.fa ---> t\nfat ---> h\nath ---> e\nthe ---> r\nher ---> .\n... ---> b\n..b ---> a\n.ba ---> r\nbar ---> a\nara ---> k\nrak ---> h\nakh ---> a\nkha ---> .\n... ---> r\n..r ---> u\n.ru ---> b\nrub ---> e\nube ---> y\nbey ---> .\n... ---> j\n..j ---> i\n.ji ---> s\njis ---> h\nish ---> a\nsha ---> n\nhan ---> t\nant ---> .\n... ---> s\n..s ---> i\n.si ---> r\nsir ---> i\niri ---> s\nris ---> h\nish ---> .\n... ---> f\n..f ---> i\n.fi ---> z\nfiz ---> a\niza ---> .\n... ---> k\n..k ---> i\n.ki ---> t\nkit ---> t\nitt ---> i\ntti ---> .\n... ---> h\n..h ---> i\n.hi ---> m\nhim ---> m\nimm ---> a\nmma ---> t\nmat ---> .\n... ---> d\n..d ---> o\n.do ---> l\ndol ---> i\noli ---> .\n... ---> n\n..n ---> a\n.na ---> s\nnas ---> e\nase ---> e\nsee ---> b\neeb ---> a\neba ---> .\n... ---> j\n..j ---> o\n.jo ---> y\njoy ---> t\noyt ---> i\nyti ---> .\n... ---> p\n..p ---> r\n.pr ---> a\npra ---> m\nram ---> e\name ---> e\nmee ---> l\neel ---> a\nela ---> .\n... ---> d\n..d ---> e\n.de ---> p\ndep ---> a\nepa ---> n\npan ---> d\nand ---> e\nnde ---> r\nder ---> .\n... ---> k\n..k ---> u\n.ku ---> s\nkus ---> u\nusu ---> m\nsum ---> a\numa ---> k\nmak ---> a\naka ---> r\nkar ---> .\n... ---> d\n..d ---> e\n.de ---> v\ndev ---> .\n... ---> t\n..t ---> u\n.tu ---> l\ntul ---> s\nuls ---> a\nlsa ---> .\n... ---> j\n..j ---> h\n.jh ---> u\njhu ---> m\nhum ---> k\numk ---> i\nmki ---> .\n... ---> m\n..m ---> i\n.mi ---> d\nmid ---> h\nidh ---> a\ndha ---> n\nhan ---> a\nana ---> .\n... ---> r\n..r ---> a\n.ra ---> b\nrab ---> i\nabi ---> t\nbit ---> a\nita ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> m\nham ---> p\namp ---> a\nmpa ---> .\n... ---> d\n..d ---> i\n.di ---> r\ndir ---> g\nirg ---> a\nrga ---> j\ngaj ---> .\n... ---> s\n..s ---> h\n.sh ---> i\nshi ---> v\nhiv ---> a\niva ---> n\nvan ---> g\nang ---> i\nngi ---> .\n... ---> s\n..s ---> u\n.su ---> n\nsun ---> i\nuni ---> t\nnit ---> a\nita ---> .\n... ---> c\n..c ---> h\n.ch ---> a\ncha ---> n\nhan ---> d\nand ---> r\nndr ---> i\ndri ---> k\nrik ---> a\nika ---> .\n... ---> d\n..d ---> e\n.de ---> v\ndev ---> i\nevi ---> .\n... ---> r\n..r ---> a\n.ra ---> g\nrag ---> n\nagn ---> i\ngni ---> .\n... ---> c\n..c ---> h\n.ch ---> u\nchu ---> n\nhun ---> a\nuna ---> r\nnar ---> a\nara ---> m\nram ---> .\n... ---> k\n..k ---> a\n.ka ---> b\nkab ---> i\nabi ---> r\nbir ---> .\n... ---> r\n..r ---> i\n.ri ---> n\nrin ---> k\nink ---> e\nnke ---> .\n... ---> b\n..b ---> a\n.ba ---> d\nbad ---> s\nads ---> h\ndsh ---> y\nshy ---> a\nhya ---> .\n... ---> p\n..p ---> r\n.pr ---> e\npre ---> m\nrem ---> p\nemp ---> a\nmpa ---> l\npal ---> .\n... ---> p\n..p ---> a\n.pa ---> p\npap ---> i\napi ---> y\npiy ---> a\niya ---> .\n... ---> m\n..m ---> a\n.ma ---> m\nmam ---> .\n... ---> j\n..j ---> a\n.ja ---> s\njas ---> v\nasv ---> e\nsve ---> e\nvee ---> r\neer ---> .\n... ---> d\n..d ---> a\n.da ---> u\ndau ---> l\naul ---> a\nula ---> t\nlat ---> .\n... ---> g\n..g ---> a\n.ga ---> r\ngar ---> v\narv ---> .\n... ---> b\n..b ---> a\n.ba ---> c\nbac ---> c\nacc ---> h\ncch ---> u\nchu ---> .\n... ---> n\n..n ---> a\n.na ---> s\nnas ---> e\nase ---> e\nsee ---> f\neef ---> .\n... ---> v\n..v ---> y\n.vy ---> e\nvye ---> l\nyel ---> e\nele ---> t\nlet ---> .\n... ---> m\n..m ---> a\n.ma ---> r\nmar ---> z\narz ---> i\nrzi ---> n\nzin ---> a\nina ---> .\n... ---> b\n..b ---> i\n.bi ---> p\nbip ---> n\nipn ---> e\npne ---> s\nnes ---> h\nesh ---> .\n... ---> k\n..k ---> a\n.ka ---> c\nkac ---> h\nach ---> r\nchr ---> i\nhri ---> .\n... ---> m\n..m ---> a\n.ma ---> d\nmad ---> h\nadh ---> u\ndhu ---> n\nhun ---> i\nuni ---> .\n... ---> n\n..n ---> a\n.na ---> r\nnar ---> o\naro ---> o\nroo ---> .\n... ---> a\n..a ---> b\n.ab ---> u\nabu ---> .\n... ---> s\n..s ---> a\n.sa ---> t\nsat ---> y\naty ---> v\ntyv ---> a\nyva ---> t\nvat ---> i\nati ---> .\n... ---> p\n..p ---> r\n.pr ---> e\npre ---> y\nrey ---> o\neyo ---> j\nyoj ---> i\noji ---> t\njit ---> .\n... ---> r\n..r ---> a\n.ra ---> f\nraf ---> i\nafi ---> q\nfiq ---> .\n... ---> k\n..k ---> a\n.ka ---> l\nkal ---> a\nala ---> w\nlaw ---> a\nawa ---> t\nwat ---> i\nati ---> .\n... ---> d\n..d ---> a\n.da ---> l\ndal ---> i\nali ---> .\n... ---> e\n..e ---> b\n.eb ---> a\neba ---> n\nban ---> e\nane ---> .\n... ---> n\n..n ---> a\n.na ---> j\nnaj ---> r\najr ---> i\njri ---> n\nrin ---> .\n... ---> s\n..s ---> u\n.su ---> m\nsum ---> a\numa ---> n\nman ---> .\n... ---> a\n..a ---> z\n.az ---> a\naza ---> m\nzam ---> .\n... ---> a\n..a ---> y\n.ay ---> u\nayu ---> b\nyub ---> e\nube ---> .\n... ---> i\n..i ---> n\n.in ---> d\nind ---> r\nndr ---> e\ndre ---> s\nres ---> h\nesh ---> .\n... ---> b\n..b ---> a\n.ba ---> h\nbah ---> r\nahr ---> a\nhra ---> t\nrat ---> .\n... ---> s\n..s ---> a\n.sa ---> m\nsam ---> s\nams ---> e\nmse ---> r\nser ---> .\n... ---> n\n..n ---> a\n.na ---> z\nnaz ---> i\nazi ---> m\nzim ---> .\n... ---> r\n..r ---> a\n.ra ---> j\nraj ---> i\naji ---> t\njit ---> .\n... ---> b\n..b ---> i\n.bi ---> j\nbij ---> e\nije ---> n\njen ---> d\nend ---> r\nndr ---> a\ndra ---> .\n... ---> j\n..j ---> a\n.ja ---> q\njaq ---> u\naqu ---> i\nqui ---> r\nuir ---> .\n... ---> a\n..a ---> b\n.ab ---> h\nabh ---> i\nbhi ---> n\nhin ---> w\ninw ---> a\nnwa ---> v\nwav ---> .\n... ---> p\n..p ---> a\n.pa ---> n\npan ---> a\nana ---> j\nnaj ---> .\n... ---> s\n..s ---> a\n.sa ---> h\nsah ---> a\naha ---> n\nhan ---> a\nana ---> j\nnaj ---> .\n... ---> a\n..a ---> r\n.ar ---> h\narh ---> a\nrha ---> m\nham ---> .\n... ---> s\n..s ---> u\n.su ---> b\nsub ---> o\nubo ---> d\nbod ---> h\nodh ---> .\n... ---> p\n..p ---> h\n.ph ---> o\npho ---> o\nhoo ---> l\nool ---> i\noli ---> .\n... ---> a\n..a ---> m\n.am ---> r\namr ---> i\nmri ---> t\nrit ---> p\nitp ---> a\ntpa ---> l\npal ---> .\n... ---> p\n..p ---> h\n.ph ---> o\npho ---> o\nhoo ---> l\nool ---> .\n... ---> v\n..v ---> i\n.vi ---> k\nvik ---> e\nike ---> s\nkes ---> h\nesh ---> .\n... ---> s\n..s ---> h\n.sh ---> i\nshi ---> v\nhiv ---> n\nivn ---> a\nvna ---> t\nnat ---> h\nath ---> .\n... ---> k\n..k ---> i\n.ki ---> r\nkir ---> s\nirs ---> h\nrsh ---> a\nsha ---> n\nhan ---> .\n... ---> k\n..k ---> h\n.kh ---> a\nkha ---> i\nhai ---> r\nair ---> u\niru ---> .\n... ---> k\n..k ---> h\n.kh ---> u\nkhu ---> s\nhus ---> h\nush ---> a\nsha ---> b\nhab ---> u\nabu ---> .\n... ---> a\n..a ---> j\n.aj ---> m\najm ---> a\njma ---> l\nmal ---> .\n... ---> s\n..s ---> a\n.sa ---> r\nsar ---> j\narj ---> a\nrja ---> h\njah ---> a\naha ---> .\n... ---> a\n..a ---> a\n.aa ---> n\naan ---> s\nans ---> i\nnsi ---> .\n... ---> m\n..m ---> o\n.mo ---> u\nmou ---> s\nous ---> a\nusa ---> m\nsam ---> .\n... ---> d\n..d ---> h\n.dh ---> a\ndha ---> r\nhar ---> m\narm ---> p\nrmp ---> a\nmpa ---> l\npal ---> .\n... ---> r\n..r ---> a\n.ra ---> h\nrah ---> i\nahi ---> l\nhil ---> .\n... ---> b\n..b ---> a\n.ba ---> s\nbas ---> h\nash ---> u\nshu ---> d\nhud ---> e\nude ---> v\ndev ---> .\n... ---> n\n..n ---> j\n.nj ---> a\nnja ---> r\njar ---> e\nare ---> .\n... ---> r\n..r ---> a\n.ra ---> k\nrak ---> s\naks ---> h\nksh ---> a\nsha ---> .\n... ---> a\n..a ---> d\n.ad ---> a\nada ---> r\ndar ---> s\nars ---> h\nrsh ---> .\n... ---> v\n..v ---> i\n.vi ---> s\nvis ---> h\nish ---> n\nshn ---> u\nhnu ---> .\n... ---> l\n..l ---> a\n.la ---> l\nlal ---> u\nalu ---> .\n... ---> e\n..e ---> l\n.el ---> d\neld ---> r\nldr ---> o\ndro ---> .\n... ---> g\n..g ---> a\n.ga ---> n\ngan ---> e\nane ---> s\nnes ---> h\nesh ---> .\n... ---> a\n..a ---> r\n.ar ---> u\naru ---> n\nrun ---> k\nunk ---> u\nnku ---> m\nkum ---> a\numa ---> r\nmar ---> .\n... ---> b\n..b ---> a\n.ba ---> r\nbar ---> h\narh ---> a\nrha ---> m\nham ---> .\n... ---> s\n..s ---> a\n.sa ---> m\nsam ---> a\nama ---> d\nmad ---> h\nadh ---> a\ndha ---> n\nhan ---> .\n... ---> r\n..r ---> a\n.ra ---> t\nrat ---> n\natn ---> a\ntna ---> .\n... ---> m\n..m ---> u\n.mu ---> k\nmuk ---> r\nukr ---> a\nkra ---> m\nram ---> .\n... ---> p\n..p ---> r\n.pr ---> a\npra ---> b\nrab ---> h\nabh ---> u\nbhu ---> .\n... ---> j\n..j ---> a\n.ja ---> s\njas ---> p\nasp ---> r\nspr ---> e\npre ---> e\nree ---> t\neet ---> .\n... ---> m\n..m ---> u\n.mu ---> n\nmun ---> d\nund ---> e\nnde ---> r\nder ---> .\n... ---> d\n..d ---> e\n.de ---> v\ndev ---> a\neva ---> s\nvas ---> h\nash ---> i\nshi ---> s\nhis ---> h\nish ---> .\n... ---> p\n..p ---> a\n.pa ---> r\npar ---> a\nara ---> t\nrat ---> h\nath ---> v\nthv ---> i\nhvi ---> .\n... ---> a\n..a ---> a\n.aa ---> m\naam ---> i\nami ---> l\nmil ---> .\n... ---> t\n..t ---> a\n.ta ---> m\ntam ---> s\nams ---> a\nmsa ---> .\n... ---> a\n..a ---> s\n.as ---> h\nash ---> r\nshr ---> a\nhra ---> f\nraf ---> .\n... ---> n\n..n ---> a\n.na ---> j\nnaj ---> i\naji ---> r\njir ---> a\nira ---> .\n... ---> d\n..d ---> a\n.da ---> m\ndam ---> a\nama ---> n\nman ---> j\nanj ---> e\nnje ---> e\njee ---> t\neet ---> .\n... ---> d\n..d ---> e\n.de ---> v\ndev ---> a\neva ---> s\nvas ---> i\nasi ---> s\nsis ---> h\nish ---> .\n... ---> s\n..s ---> u\n.su ---> j\nsuj ---> a\nuja ---> n\njan ---> t\nant ---> i\nnti ---> .\n... ---> s\n..s ---> a\n.sa ---> r\nsar ---> v\narv ---> a\nrva ---> s\nvas ---> h\nash ---> .\n... ---> j\n..j ---> a\n.ja ---> n\njan ---> a\nana ---> k\nnak ---> .\n... ---> g\n..g ---> u\n.gu ---> r\ngur ---> j\nurj ---> e\nrje ---> e\njee ---> t\neet ---> .\n... ---> m\n..m ---> o\n.mo ---> d\nmod ---> h\nodh ---> .\n... ---> d\n..d ---> e\n.de ---> v\ndev ---> i\nevi ---> d\nvid ---> e\nide ---> e\ndee ---> n\neen ---> .\n... ---> s\n..s ---> h\n.sh ---> i\nshi ---> t\nhit ---> t\nitt ---> a\ntta ---> l\ntal ---> .\n... ---> l\n..l ---> a\n.la ---> k\nlak ---> s\naks ---> h\nksh ---> y\nshy ---> .\n... ---> a\n..a ---> s\n.as ---> h\nash ---> a\nsha ---> n\nhan ---> j\nanj ---> a\nnja ---> l\njal ---> i\nali ---> .\n... ---> h\n..h ---> a\n.ha ---> j\nhaj ---> a\naja ---> r\njar ---> i\nari ---> .\n... ---> s\n..s ---> a\n.sa ---> r\nsar ---> m\narm ---> i\nrmi ---> l\nmil ---> a\nila ---> .\n... ---> i\n..i ---> s\n.is ---> h\nish ---> .\n... ---> s\n..s ---> h\n.sh ---> e\nshe ---> i\nhei ---> k\neik ---> h\nikh ---> s\nkhs ---> a\nhsa ---> i\nsai ---> .\n... ---> s\n..s ---> e\n.se ---> h\nseh ---> d\nehd ---> e\nhde ---> v\ndev ---> .\n... ---> p\n..p ---> a\n.pa ---> r\npar ---> m\narm ---> i\nrmi ---> l\nmil ---> a\nila ---> .\n... ---> j\n..j ---> a\n.ja ---> g\njag ---> v\nagv ---> i\ngvi ---> r\nvir ---> i\niri ---> .\n... ---> b\n..b ---> a\n.ba ---> h\nbah ---> n\nahn ---> u\nhnu ---> .\n... ---> n\n..n ---> a\n.na ---> r\nnar ---> g\narg ---> i\nrgi ---> s\ngis ---> h\nish ---> .\n... ---> j\n..j ---> a\n.ja ---> s\njas ---> p\nasp ---> a\nspa ---> l\npal ---> .\n... ---> h\n..h ---> a\n.ha ---> r\nhar ---> d\nard ---> e\nrde ---> v\ndev ---> .\n... ---> t\n..t ---> o\n.to ---> s\ntos ---> h\nosh ---> a\nsha ---> r\nhar ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> r\nhar ---> i\nari ---> b\nrib ---> .\n... ---> y\n..y ---> a\n.ya ---> q\nyaq ---> u\naqu ---> b\nqub ---> .\n... ---> d\n..d ---> e\n.de ---> v\ndev ---> k\nevk ---> a\nvka ---> l\nkal ---> i\nali ---> .\n... ---> v\n..v ---> i\n.vi ---> p\nvip ---> u\nipu ---> n\npun ---> .\n... ---> r\n..r ---> i\n.ri ---> c\nric ---> h\nich ---> a\ncha ---> r\nhar ---> a\nara ---> j\nraj ---> .\n... ---> r\n..r ---> o\n.ro ---> o\nroo ---> p\noop ---> a\nopa ---> m\npam ---> .\n... ---> p\n..p ---> a\n.pa ---> r\npar ---> v\narv ---> e\nrve ---> e\nvee ---> n\neen ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> j\nhaj ---> i\naji ---> y\njiy ---> a\niya ---> .\n... ---> s\n..s ---> u\n.su ---> b\nsub ---> h\nubh ---> a\nbha ---> d\nhad ---> r\nadr ---> a\ndra ---> .\n... ---> a\n..a ---> s\n.as ---> h\nash ---> o\nsho ---> k\nhok ---> .\n... ---> k\n..k ---> a\n.ka ---> m\nkam ---> a\nama ---> k\nmak ---> s\naks ---> h\nksh ---> y\nshy ---> a\nhya ---> .\n... ---> s\n..s ---> a\n.sa ---> b\nsab ---> a\naba ---> n\nban ---> a\nana ---> .\n... ---> p\n..p ---> r\n.pr ---> i\npri ---> t\nrit ---> h\nith ---> v\nthv ---> i\nhvi ---> .\n... ---> s\n..s ---> u\n.su ---> r\nsur ---> j\nurj ---> i\nrji ---> t\njit ---> .\n... ---> y\n..y ---> a\n.ya ---> s\nyas ---> h\nash ---> o\nsho ---> d\nhod ---> h\nodh ---> a\ndha ---> .\n... ---> g\n..g ---> a\n.ga ---> l\ngal ---> i\nali ---> .\n... ---> a\n..a ---> m\n.am ---> a\nama ---> r\nmar ---> m\narm ---> u\nrmu ---> l\nmul ---> a\nula ---> .\n... ---> a\n..a ---> r\n.ar ---> m\narm ---> a\nrma ---> a\nmaa ---> n\naan ---> .\n... ---> s\n..s ---> h\n.sh ---> k\nshk ---> u\nhku ---> n\nkun ---> t\nunt ---> a\nnta ---> l\ntal ---> a\nala ---> .\n... ---> k\n..k ---> u\n.ku ---> s\nkus ---> u\nusu ---> m\nsum ---> a\numa ---> .\n... ---> n\n..n ---> a\n.na ---> g\nnag ---> i\nagi ---> n\ngin ---> a\nina ---> .\n... ---> s\n..s ---> o\n.so ---> h\nsoh ---> a\noha ---> n\nhan ---> p\nanp ---> a\nnpa ---> l\npal ---> .\n... ---> r\n..r ---> u\n.ru ---> b\nrub ---> o\nubo ---> .\n... ---> s\n..s ---> e\n.se ---> h\nseh ---> n\nehn ---> a\nhna ---> a\nnaa ---> z\naaz ---> .\n... ---> a\n..a ---> m\n.am ---> r\namr ---> a\nmra ---> t\nrat ---> .\n... ---> b\n..b ---> a\n.ba ---> l\nbal ---> j\nalj ---> e\nlje ---> e\njee ---> t\neet ---> .\n... ---> p\n..p ---> i\n.pi ---> t\npit ---> i\niti ---> k\ntik ---> a\nika ---> .\n... ---> n\n..n ---> a\n.na ---> u\nnau ---> l\naul ---> a\nula ---> k\nlak ---> h\nakh ---> .\n... ---> f\n..f ---> i\n.fi ---> r\nfir ---> o\niro ---> z\nroz ---> a\noza ---> .\n... ---> r\n..r ---> i\n.ri ---> s\nris ---> a\nisa ---> b\nsab ---> h\nabh ---> .\n... ---> a\n..a ---> t\n.at ---> u\natu ---> l\ntul ---> .\n... ---> i\n..i ---> n\n.in ---> d\nind ---> u\nndu ---> .\n... ---> s\n..s ---> h\n.sh ---> r\nshr ---> e\nhre ---> e\nree ---> m\neem ---> a\nema ---> t\nmat ---> i\nati ---> .\n... ---> p\n..p ---> a\n.pa ---> l\npal ---> v\nalv ---> i\nlvi ---> n\nvin ---> d\nind ---> e\nnde ---> r\nder ---> .\n... ---> o\n..o ---> m\n.om ---> p\nomp ---> a\nmpa ---> l\npal ---> .\n... ---> c\n..c ---> h\n.ch ---> a\ncha ---> n\nhan ---> c\nanc ---> h\nnch ---> l\nchl ---> .\n... ---> j\n..j ---> a\n.ja ---> g\njag ---> m\nagm ---> o\ngmo ---> h\nmoh ---> a\noha ---> n\nhan ---> .\n... ---> r\n..r ---> u\n.ru ---> k\nruk ---> m\nukm ---> a\nkma ---> n\nman ---> i\nani ---> .\n... ---> r\n..r ---> a\n.ra ---> i\nrai ---> .\n... ---> f\n..f ---> a\n.fa ---> r\nfar ---> h\narh ---> a\nrha ---> n\nhan ---> a\nana ---> a\nnaa ---> z\naaz ---> .\n... ---> g\n..g ---> a\n.ga ---> r\ngar ---> u\naru ---> p\nrup ---> a\nupa ---> l\npal ---> .\n... ---> j\n..j ---> a\n.ja ---> h\njah ---> i\nahi ---> r\nhir ---> u\niru ---> l\nrul ---> .\n... ---> f\n..f ---> o\n.fo ---> o\nfoo ---> l\nool ---> .\n... ---> y\n..y ---> o\n.yo ---> g\nyog ---> i\nogi ---> n\ngin ---> d\nind ---> e\nnde ---> r\nder ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> j\nanj ---> u\nnju ---> l\njul ---> a\nula ---> .\n... ---> a\n..a ---> n\n.an ---> a\nana ---> y\nnay ---> a\naya ---> t\nyat ---> h\nath ---> a\ntha ---> .\n... ---> r\n..r ---> i\n.ri ---> n\nrin ---> k\nink ---> i\nnki ---> .\n... ---> u\n..u ---> m\n.um ---> a\numa ---> n\nman ---> g\nang ---> .\n... ---> s\n..s ---> o\n.so ---> t\nsot ---> a\nota ---> j\ntaj ---> .\n... ---> d\n..d ---> i\n.di ---> s\ndis ---> i\nisi ---> .\n... ---> k\n..k ---> u\n.ku ---> m\nkum ---> a\numa ---> r\nmar ---> e\nare ---> .\n... ---> r\n..r ---> o\n.ro ---> z\nroz ---> i\nozi ---> n\nzin ---> a\nina ---> .\n... ---> r\n..r ---> e\n.re ---> h\nreh ---> a\neha ---> n\nhan ---> .\n... ---> h\n..h ---> o\n.ho ---> r\nhor ---> a\nora ---> m\nram ---> .\n... ---> h\n..h ---> e\n.he ---> m\nhem ---> .\n... ---> k\n..k ---> i\n.ki ---> n\nkin ---> g\ning ---> k\nngk ---> a\ngka ---> r\nkar ---> .\n... ---> s\n..s ---> a\n.sa ---> r\nsar ---> u\naru ---> .\n... ---> t\n..t ---> a\n.ta ---> r\ntar ---> n\narn ---> u\nrnu ---> m\nnum ---> .\n... ---> r\n..r ---> o\n.ro ---> o\nroo ---> p\noop ---> s\nops ---> i\npsi ---> n\nsin ---> g\ning ---> h\nngh ---> .\n... ---> m\n..m ---> a\n.ma ---> h\nmah ---> i\nahi ---> .\n... ---> h\n..h ---> a\n.ha ---> r\nhar ---> r\narr ---> y\nrry ---> .\n... ---> m\n..m ---> o\n.mo ---> g\nmog ---> a\noga ---> n\ngan ---> .\n... ---> b\n..b ---> a\n.ba ---> n\nban ---> t\nant ---> y\nnty ---> .\n... ---> r\n..r ---> a\n.ra ---> n\nran ---> j\nanj ---> i\nnji ---> t\njit ---> .\n... ---> b\n..b ---> a\n.ba ---> l\nbal ---> a\nala ---> k\nlak ---> .\n... ---> a\n..a ---> m\n.am ---> r\namr ---> a\nmra ---> t\nrat ---> a\nata ---> l\ntal ---> a\nala ---> l\nlal ---> .\n... ---> v\n..v ---> a\n.va ---> n\nvan ---> s\nans ---> h\nnsh ---> u\nshu ---> .\n... ---> m\n..m ---> u\n.mu ---> s\nmus ---> r\nusr ---> a\nsra ---> .\n... ---> k\n..k ---> u\n.ku ---> n\nkun ---> t\nunt ---> i\nnti ---> .\n... ---> k\n..k ---> i\n.ki ---> r\nkir ---> s\nirs ---> h\nrsh ---> n\nshn ---> a\nhna ---> .\n... ---> n\n..n ---> a\n.na ---> z\nnaz ---> r\nazr ---> a\nzra ---> n\nran ---> a\nana ---> .\n... ---> m\n..m ---> e\n.me ---> h\nmeh ---> n\nehn ---> a\nhna ---> j\nnaj ---> .\n... ---> h\n..h ---> a\n.ha ---> r\nhar ---> b\narb ---> h\nrbh ---> a\nbha ---> j\nhaj ---> a\naja ---> n\njan ---> .\n... ---> n\n..n ---> a\n.na ---> m\nnam ---> e\name ---> n\nmen ---> .\n... ---> k\n..k ---> a\n.ka ---> m\nkam ---> r\namr ---> e\nmre ---> e\nree ---> n\neen ---> .\n... ---> b\n..b ---> a\n.ba ---> d\nbad ---> r\nadr ---> u\ndru ---> .\n... ---> b\n..b ---> a\n.ba ---> b\nbab ---> a\naba ---> n\nban ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> h\nhah ---> r\nahr ---> u\nhru ---> k\nruk ---> h\nukh ---> .\n... ---> j\n..j ---> a\n.ja ---> m\njam ---> u\namu ---> n\nmun ---> a\nuna ---> .\n... ---> s\n..s ---> a\n.sa ---> r\nsar ---> s\nars ---> h\nrsh ---> w\nshw ---> a\nhwa ---> t\nwat ---> i\nati ---> .\n... ---> r\n..r ---> i\n.ri ---> n\nrin ---> u\ninu ---> k\nnuk ---> a\nuka ---> n\nkan ---> w\nanw ---> r\nnwr ---> .\n... ---> a\n..a ---> s\n.as ---> g\nasg ---> a\nsga ---> r\ngar ---> .\n... ---> k\n..k ---> o\n.ko ---> o\nkoo ---> k\nook ---> i\noki ---> .\n... ---> s\n..s ---> a\n.sa ---> h\nsah ---> i\nahi ---> r\nhir ---> a\nira ---> .\n... ---> j\n..j ---> a\n.ja ---> i\njai ---> w\naiw ---> a\niwa ---> n\nwan ---> t\nant ---> i\nnti ---> .\n... ---> k\n..k ---> h\n.kh ---> u\nkhu ---> s\nhus ---> h\nush ---> b\nshb ---> u\nhbu ---> .\n... ---> r\n..r ---> a\n.ra ---> m\nram ---> b\namb ---> h\nmbh ---> u\nbhu ---> l\nhul ---> .\n... ---> k\n..k ---> u\n.ku ---> m\nkum ---> a\numa ---> r\nmar ---> a\nara ---> g\nrag ---> e\nage ---> .\n... ---> m\n..m ---> o\n.mo ---> h\nmoh ---> a\noha ---> b\nhab ---> b\nabb ---> a\nbba ---> t\nbat ---> .\n... ---> m\n..m ---> e\n.me ---> h\nmeh ---> i\nehi ---> b\nhib ---> .\n... ---> s\n..s ---> i\n.si ---> k\nsik ---> a\nika ---> n\nkan ---> d\nand ---> e\nnde ---> r\nder ---> .\n... ---> k\n..k ---> u\n.ku ---> l\nkul ---> v\nulv ---> i\nlvi ---> n\nvin ---> d\nind ---> e\nnde ---> r\nder ---> .\n... ---> s\n..s ---> u\n.su ---> l\nsul ---> e\nule ---> k\nlek ---> h\nekh ---> a\nkha ---> .\n... ---> g\n..g ---> e\n.ge ---> e\ngee ---> r\neer ---> n\nern ---> i\nrni ---> s\nnis ---> h\nish ---> .\n... ---> k\n..k ---> u\n.ku ---> m\nkum ---> o\numo ---> d\nmod ---> .\n... ---> v\n..v ---> e\n.ve ---> r\nver ---> s\ners ---> a\nrsa ---> .\n... ---> h\n..h ---> a\n.ha ---> r\nhar ---> d\nard ---> e\nrde ---> e\ndee ---> p\neep ---> .\n... ---> b\n..b ---> a\n.ba ---> d\nbad ---> a\nada ---> m\ndam ---> i\nami ---> .\n... ---> l\n..l ---> a\n.la ---> v\nlav ---> p\navp ---> r\nvpr ---> e\npre ---> e\nree ---> t\neet ---> .\n... ---> k\n..k ---> i\n.ki ---> n\nkin ---> y\niny ---> a\nnya ---> .\n... ---> v\n..v ---> i\n.vi ---> k\nvik ---> a\nika ---> s\nkas ---> h\nash ---> .\n... ---> s\n..s ---> r\n.sr ---> i\nsri ---> m\nrim ---> a\nima ---> t\nmat ---> i\nati ---> .\n... ---> g\n..g ---> y\n.gy ---> a\ngya ---> n\nyan ---> d\nand ---> e\nnde ---> e\ndee ---> p\neep ---> .\n... ---> p\n..p ---> a\n.pa ---> l\npal ---> a\nala ---> k\nlak ---> .\n... ---> a\n..a ---> r\n.ar ---> c\narc ---> h\nrch ---> a\ncha ---> n\nhan ---> a\nana ---> .\n... ---> n\n..n ---> e\n.ne ---> e\nnee ---> t\neet ---> i\neti ---> .\n... ---> d\n..d ---> e\n.de ---> e\ndee ---> p\neep ---> a\nepa ---> n\npan ---> s\nans ---> u\nnsu ---> .\n... ---> b\n..b ---> h\n.bh ---> a\nbha ---> n\nhan ---> w\nanw ---> a\nnwa ---> r\nwar ---> i\nari ---> .\n... ---> m\n..m ---> e\n.me ---> m\nmem ---> a\nema ---> .\n... ---> a\n..a ---> g\n.ag ---> y\nagy ---> a\ngya ---> p\nyap ---> a\napa ---> d\npad ---> .\n... ---> b\n..b ---> h\n.bh ---> a\nbha ---> g\nhag ---> .\n... ---> t\n..t ---> a\n.ta ---> v\ntav ---> r\navr ---> a\nvra ---> j\nraj ---> .\n... ---> j\n..j ---> a\n.ja ---> w\njaw ---> a\nawa ---> h\nwah ---> a\naha ---> r\nhar ---> .\n... ---> a\n..a ---> s\n.as ---> w\nasw ---> i\nswi ---> n\nwin ---> .\n... ---> h\n..h ---> i\n.hi ---> s\nhis ---> h\nish ---> a\nsha ---> m\nham ---> .\n... ---> s\n..s ---> a\n.sa ---> k\nsak ---> a\naka ---> .\n... ---> c\n..c ---> h\n.ch ---> u\nchu ---> n\nhun ---> n\nunn ---> u\nnnu ---> .\n... ---> k\n..k ---> h\n.kh ---> a\nkha ---> j\nhaj ---> a\naja ---> n\njan ---> .\n... ---> c\n..c ---> h\n.ch ---> n\nchn ---> d\nhnd ---> a\nnda ---> .\n... ---> s\n..s ---> a\n.sa ---> v\nsav ---> i\navi ---> a\nvia ---> .\n... ---> m\n..m ---> o\n.mo ---> h\nmoh ---> n\nohn ---> i\nhni ---> .\n... ---> n\n..n ---> a\n.na ---> z\nnaz ---> m\nazm ---> a\nzma ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> d\nand ---> i\nndi ---> .\n... ---> r\n..r ---> a\n.ra ---> j\nraj ---> a\naja ---> n\njan ---> t\nant ---> i\nnti ---> .\n... ---> g\n..g ---> a\n.ga ---> u\ngau ---> t\naut ---> a\nuta ---> m\ntam ---> .\n... ---> h\n..h ---> a\n.ha ---> j\nhaj ---> r\najr ---> a\njra ---> t\nrat ---> i\nati ---> .\n... ---> m\n..m ---> e\n.me ---> e\nmee ---> n\neen ---> a\nena ---> t\nnat ---> .\n... ---> a\n..a ---> a\n.aa ---> m\naam ---> i\nami ---> n\nmin ---> .\n... ---> p\n..p ---> a\n.pa ---> w\npaw ---> n\nawn ---> a\nwna ---> .\n... ---> b\n..b ---> a\n.ba ---> b\nbab ---> u\nabu ---> d\nbud ---> d\nudd ---> e\ndde ---> n\nden ---> .\n... ---> k\n..k ---> a\n.ka ---> r\nkar ---> i\nari ---> m\nrim ---> a\nima ---> .\n... ---> v\n..v ---> a\n.va ---> k\nvak ---> i\naki ---> l\nkil ---> a\nila ---> .\n... ---> s\n..s ---> a\n.sa ---> l\nsal ---> e\nale ---> s\nles ---> h\nesh ---> .\n... ---> m\n..m ---> u\n.mu ---> k\nmuk ---> h\nukh ---> t\nkht ---> y\nhty ---> a\ntya ---> r\nyar ---> .\n... ---> s\n..s ---> h\n.sh ---> e\nshe ---> l\nhel ---> e\nele ---> s\nles ---> h\nesh ---> .\n... ---> p\n..p ---> r\n.pr ---> e\npre ---> e\nree ---> n\neen ---> a\nena ---> .\n... ---> k\n..k ---> a\n.ka ---> s\nkas ---> i\nasi ---> s\nsis ---> h\nish ---> .\n... ---> r\n..r ---> o\n.ro ---> j\nroj ---> m\nojm ---> e\njme ---> n\nmen ---> .\n... ---> r\n..r ---> a\n.ra ---> m\nram ---> v\namv ---> a\nmva ---> t\nvat ---> i\nati ---> .\n... ---> c\n..c ---> a\n.ca ---> p\ncap ---> t\napt ---> a\npta ---> i\ntai ---> n\nain ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> a\nana ---> k\nnak ---> .\n... ---> s\n..s ---> a\n.sa ---> n\nsan ---> a\nana ---> n\nnan ---> d\nand ---> .\n... ---> h\n..h ---> a\n.ha ---> r\nhar ---> b\narb ---> i\nrbi ---> r\nbir ---> .\n... ---> n\n..n ---> e\n.ne ---> e\nnee ---> s\nees ---> h\nesh ---> u\nshu ---> .\n... ---> s\n..s ---> h\n.sh ---> i\nshi ---> l\nhil ---> p\nilp ---> a\nlpa ---> .\n... ---> p\n..p ---> o\n.po ---> o\npoo ---> j\nooj ---> a\noja ---> .\n... ---> d\n..d ---> u\n.du ---> r\ndur ---> g\nurg ---> a\nrga ---> s\ngas ---> h\nash ---> .\n... ---> s\n..s ---> i\n.si ---> r\nsir ---> a\nira ---> j\nraj ---> .\n... ---> r\n..r ---> e\n.re ---> k\nrek ---> h\nekh ---> a\nkha ---> .\n... ---> a\n..a ---> s\n.as ---> m\nasm ---> a\nsma ---> t\nmat ---> .\n... ---> m\n..m ---> a\n.ma ---> y\nmay ---> u\nayu ---> r\nyur ---> .\n... ---> s\n..s ---> u\n.su ---> b\nsub ---> h\nubh ---> o\nbho ---> d\nhod ---> .\n... ---> w\n..w ---> a\n.wa ---> z\nwaz ---> i\nazi ---> r\nzir ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> v\nanv ---> e\nnve ---> n\nven ---> d\nend ---> r\nndr ---> a\ndra ---> .\n... ---> d\n..d ---> h\n.dh ---> e\ndhe ---> e\nhee ---> r\neer ---> a\nera ---> j\nraj ---> .\n... ---> r\n..r ---> a\n.ra ---> j\nraj ---> i\naji ---> d\njid ---> e\nide ---> r\nder ---> .\n... ---> k\n..k ---> a\n.ka ---> l\nkal ---> a\nala ---> p\nlap ---> .\n... ---> g\n..g ---> u\n.gu ---> r\ngur ---> u\nuru ---> p\nrup ---> r\nupr ---> e\npre ---> e\nree ---> t\neet ---> .\n... ---> s\n..s ---> r\n.sr ---> i\nsri ---> s\nris ---> h\nish ---> t\nsht ---> y\nhty ---> .\n... ---> a\n..a ---> k\n.ak ---> s\naks ---> h\nksh ---> p\nshp ---> a\nhpa ---> a\npaa ---> t\naat ---> .\n... ---> l\n..l ---> a\n.la ---> x\nlax ---> m\naxm ---> i\nxmi ---> .\n... ---> o\n..o ---> m\n.om ---> p\nomp ---> e\nmpe ---> r\nper ---> k\nerk ---> a\nrka ---> s\nkas ---> h\nash ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> p\nanp ---> h\nnph ---> o\npho ---> o\nhoo ---> l\nool ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> h\nhah ---> z\nahz ---> a\nhza ---> d\nzad ---> .\n... ---> r\n..r ---> a\n.ra ---> m\nram ---> l\naml ---> i\nmli ---> .\n... ---> f\n..f ---> a\n.fa ---> r\nfar ---> h\narh ---> a\nrha ---> n\nhan ---> .\n... ---> h\n..h ---> a\n.ha ---> g\nhag ---> a\naga ---> m\ngam ---> i\nami ---> .\n... ---> k\n..k ---> a\n.ka ---> l\nkal ---> p\nalp ---> a\nlpa ---> n\npan ---> a\nana ---> .\n... ---> p\n..p ---> u\n.pu ---> j\npuj ---> j\nujj ---> a\njja ---> .\n... ---> u\n..u ---> t\n.ut ---> k\nutk ---> a\ntka ---> r\nkar ---> s\nars ---> h\nrsh ---> .\n... ---> c\n..c ---> h\n.ch ---> i\nchi ---> r\nhir ---> a\nira ---> g\nrag ---> .\n... ---> k\n..k ---> u\n.ku ---> s\nkus ---> h\nush ---> a\nsha ---> g\nhag ---> r\nagr ---> a\ngra ---> .\n... ---> d\n..d ---> a\n.da ---> y\nday ---> a\naya ---> w\nyaw ---> a\nawa ---> t\nwat ---> i\nati ---> .\n... ---> k\n..k ---> a\n.ka ---> y\nkay ---> u\nayu ---> m\nyum ---> .\n... ---> s\n..s ---> h\n.sh ---> i\nshi ---> s\nhis ---> u\nisu ---> p\nsup ---> a\nupa ---> l\npal ---> .\n... ---> s\n..s ---> a\n.sa ---> h\nsah ---> w\nahw ---> a\nhwa ---> j\nwaj ---> .\n... ---> n\n..n ---> e\n.ne ---> e\nnee ---> s\nees ---> h\nesh ---> a\nsha ---> .\n... ---> n\n..n ---> i\n.ni ---> r\nnir ---> a\nira ---> n\nran ---> j\nanj ---> a\nnja ---> n\njan ---> .\n... ---> b\n..b ---> a\n.ba ---> c\nbac ---> h\nach ---> h\nchh ---> u\nhhu ---> .\n... ---> f\n..f ---> a\n.fa ---> u\nfau ---> i\naui ---> n\nuin ---> a\nina ---> .\n... ---> k\n..k ---> a\n.ka ---> a\nkaa ---> m\naam ---> i\nami ---> n\nmin ---> i\nini ---> .\n... ---> v\n..v ---> a\n.va ---> s\nvas ---> a\nasa ---> .\n... ---> j\n..j ---> a\n.ja ---> m\njam ---> e\name ---> e\nmee ---> l\neel ---> a\nela ---> .\n... ---> m\n..m ---> m\n.mm ---> t\nmmt ---> a\nmta ---> .\n... ---> d\n..d ---> e\n.de ---> e\ndee ---> p\neep ---> a\nepa ---> n\npan ---> s\nans ---> h\nnsh ---> u\nshu ---> .\n... ---> d\n..d ---> i\n.di ---> p\ndip ---> t\nipt ---> i\npti ---> .\n... ---> s\n..s ---> u\n.su ---> k\nsuk ---> u\nuku ---> l\nkul ---> .\n... ---> v\n..v ---> i\n.vi ---> p\nvip ---> e\nipe ---> n\npen ---> d\nend ---> r\nndr ---> a\ndra ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> j\nanj ---> i\nnji ---> t\njit ---> .\n... ---> a\n..a ---> a\n.aa ---> s\naas ---> h\nash ---> i\nshi ---> .\n... ---> s\n..s ---> a\n.sa ---> v\nsav ---> e\nave ---> t\nvet ---> a\neta ---> .\n... ---> t\n..t ---> i\n.ti ---> t\ntit ---> u\nitu ---> .\n... ---> t\n..t ---> a\n.ta ---> s\ntas ---> n\nasn ---> i\nsni ---> m\nnim ---> .\n... ---> g\n..g ---> u\n.gu ---> l\ngul ---> s\nuls ---> h\nlsh ---> t\nsht ---> a\nhta ---> b\ntab ---> .\n... ---> a\n..a ---> a\n.aa ---> f\naaf ---> t\naft ---> a\nfta ---> a\ntaa ---> b\naab ---> .\n... ---> l\n..l ---> a\n.la ---> k\nlak ---> s\naks ---> h\nksh ---> y\nshy ---> a\nhya ---> .\n... ---> s\n..s ---> a\n.sa ---> d\nsad ---> r\nadr ---> e\ndre ---> .\n... ---> m\n..m ---> a\n.ma ---> h\nmah ---> l\nahl ---> i\nhli ---> k\nlik ---> k\nikk ---> a\nkka ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> h\nhah ---> n\nahn ---> a\nhna ---> w\nnaw ---> a\nawa ---> z\nwaz ---> .\n... ---> a\n..a ---> n\n.an ---> c\nanc ---> h\nnch ---> a\ncha ---> l\nhal ---> .\n... ---> k\n..k ---> e\n.ke ---> s\nkes ---> h\nesh ---> a\nsha ---> n\nhan ---> t\nant ---> i\nnti ---> .\n... ---> a\n..a ---> m\n.am ---> e\name ---> n\nmen ---> a\nena ---> .\n... ---> b\n..b ---> i\n.bi ---> n\nbin ---> j\ninj ---> a\nnja ---> .\n... ---> g\n..g ---> u\n.gu ---> t\ngut ---> a\nuta ---> m\ntam ---> .\n... ---> a\n..a ---> r\n.ar ---> u\naru ---> n\nrun ---> i\nuni ---> .\n... ---> b\n..b ---> a\n.ba ---> c\nbac ---> c\nacc ---> h\ncch ---> e\nche ---> .\n... ---> s\n..s ---> i\n.si ---> t\nsit ---> h\nith ---> a\ntha ---> l\nhal ---> .\n... ---> a\n..a ---> b\n.ab ---> i\nabi ---> d\nbid ---> .\n... ---> e\n..e ---> l\n.el ---> i\neli ---> y\nliy ---> a\niya ---> s\nyas ---> .\n... ---> s\n..s ---> h\n.sh ---> o\nsho ---> b\nhob ---> h\nobh ---> a\nbha ---> .\n... ---> s\n..s ---> u\n.su ---> m\nsum ---> i\numi ---> t\nmit ---> r\nitr ---> a\ntra ---> .\n... ---> d\n..d ---> u\n.du ---> r\ndur ---> g\nurg ---> p\nrgp ---> a\ngpa ---> l\npal ---> .\n... ---> m\n..m ---> u\n.mu ---> n\nmun ---> n\nunn ---> a\nnna ---> w\nnaw ---> a\nawa ---> r\nwar ---> .\n... ---> c\n..c ---> h\n.ch ---> e\nche ---> t\nhet ---> a\neta ---> n\ntan ---> .\n... ---> j\n..j ---> a\n.ja ---> g\njag ---> a\naga ---> n\ngan ---> .\n... ---> m\n..m ---> i\n.mi ---> t\nmit ---> h\nith ---> u\nthu ---> .\n... ---> b\n..b ---> u\n.bu ---> d\nbud ---> h\nudh ---> o\ndho ---> .\n... ---> a\n..a ---> s\n.as ---> h\nash ---> r\nshr ---> a\nhra ---> b\nrab ---> i\nabi ---> .\n... ---> r\n..r ---> e\n.re ---> s\nres ---> m\nesm ---> i\nsmi ---> .\n... ---> k\n..k ---> u\n.ku ---> p\nkup ---> a\nupa ---> r\npar ---> t\nart ---> h\nrth ---> .\n... ---> s\n..s ---> o\n.so ---> b\nsob ---> h\nobh ---> a\nbha ---> .\n... ---> p\n..p ---> a\n.pa ---> t\npat ---> a\nata ---> v\ntav ---> .\n... ---> s\n..s ---> a\n.sa ---> l\nsal ---> u\nalu ---> p\nlup ---> a\nupa ---> .\n... ---> n\n..n ---> e\n.ne ---> p\nnep ---> a\nepa ---> l\npal ---> .\n... ---> p\n..p ---> r\n.pr ---> e\npre ---> y\nrey ---> a\neya ---> n\nyan ---> k\nank ---> .\n... ---> a\n..a ---> n\n.an ---> z\nanz ---> u\nnzu ---> m\nzum ---> .\n... ---> r\n..r ---> a\n.ra ---> j\nraj ---> n\najn ---> e\njne ---> e\nnee ---> s\nees ---> h\nesh ---> .\n... ---> b\n..b ---> h\n.bh ---> i\nbhi ---> m\nhim ---> s\nims ---> e\nmse ---> n\nsen ---> .\n... ---> b\n..b ---> h\n.bh ---> a\nbha ---> g\nhag ---> w\nagw ---> a\ngwa ---> n\nwan ---> a\nana ---> .\n... ---> p\n..p ---> a\n.pa ---> m\npam ---> m\namm ---> i\nmmi ---> .\n... ---> d\n..d ---> h\n.dh ---> a\ndha ---> r\nhar ---> m\narm ---> r\nrmr ---> a\nmra ---> j\nraj ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> u\nanu ---> .\n... ---> j\n..j ---> a\n.ja ---> s\njas ---> k\nask ---> a\nska ---> r\nkar ---> a\nara ---> n\nran ---> .\n... ---> f\n..f ---> r\n.fr ---> r\nfrr ---> a\nrra ---> .\n... ---> p\n..p ---> i\n.pi ---> n\npin ---> k\nink ---> i\nnki ---> .\n... ---> g\n..g ---> i\n.gi ---> r\ngir ---> i\niri ---> s\nris ---> h\nish ---> i\nshi ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> i\nhai ---> l\nail ---> a\nila ---> s\nlas ---> h\nash ---> .\n... ---> a\n..a ---> b\n.ab ---> d\nabd ---> u\nbdu ---> l\ndul ---> .\n... ---> n\n..n ---> i\n.ni ---> y\nniy ---> a\niya ---> a\nyaa ---> z\naaz ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> l\nhal ---> e\nale ---> s\nles ---> h\nesh ---> .\n... ---> s\n..s ---> o\n.so ---> o\nsoo ---> r\noor ---> a\nora ---> j\nraj ---> .\n... ---> s\n..s ---> h\n.sh ---> o\nsho ---> h\nhoh ---> a\noha ---> n\nhan ---> .\n... ---> a\n..a ---> r\n.ar ---> v\narv ---> i\nrvi ---> n\nvin ---> d\nind ---> .\n... ---> m\n..m ---> i\n.mi ---> t\nmit ---> t\nitt ---> h\ntth ---> u\nthu ---> .\n... ---> k\n..k ---> a\n.ka ---> w\nkaw ---> a\nawa ---> l\nwal ---> j\nalj ---> e\nlje ---> e\njee ---> t\neet ---> .\n... ---> s\n..s ---> a\n.sa ---> i\nsai ---> z\naiz ---> a\niza ---> d\nzad ---> .\n... ---> s\n..s ---> i\n.si ---> d\nsid ---> h\nidh ---> r\ndhr ---> a\nhra ---> t\nrat ---> h\nath ---> .\n... ---> c\n..c ---> h\n.ch ---> a\ncha ---> n\nhan ---> p\nanp ---> a\nnpa ---> .\n... ---> g\n..g ---> a\n.ga ---> j\ngaj ---> l\najl ---> a\njla ---> .\n... ---> n\n..n ---> o\n.no ---> o\nnoo ---> r\noor ---> a\nora ---> l\nral ---> h\nalh ---> a\nlha ---> .\n... ---> r\n..r ---> a\n.ra ---> m\nram ---> n\namn ---> i\nmni ---> w\nniw ---> a\niwa ---> s\nwas ---> j\nasj ---> .\n... ---> v\n..v ---> a\n.va ---> i\nvai ---> b\naib ---> a\niba ---> h\nbah ---> v\nahv ---> .\n... ---> s\n..s ---> u\n.su ---> f\nsuf ---> i\nufi ---> y\nfiy ---> a\niya ---> .\n... ---> k\n..k ---> l\n.kl ---> u\nklu ---> .\n... ---> m\n..m ---> a\n.ma ---> i\nmai ---> r\nair ---> i\niri ---> .\n... ---> t\n..t ---> u\n.tu ---> b\ntub ---> a\nuba ---> .\n... ---> s\n..s ---> a\n.sa ---> n\nsan ---> j\nanj ---> i\nnji ---> v\njiv ---> .\n... ---> z\n..z ---> a\n.za ---> m\nzam ---> e\name ---> e\nmee ---> r\neer ---> .\n... ---> v\n..v ---> i\n.vi ---> c\nvic ---> k\nick ---> e\ncke ---> y\nkey ---> .\n... ---> m\n..m ---> a\n.ma ---> m\nmam ---> i\nami ---> t\nmit ---> a\nita ---> .\n... ---> b\n..b ---> o\n.bo ---> h\nboh ---> a\noha ---> t\nhat ---> i\nati ---> .\n... ---> s\n..s ---> h\n.sh ---> i\nshi ---> v\nhiv ---> .\n... ---> s\n..s ---> u\n.su ---> s\nsus ---> m\nusm ---> a\nsma ---> t\nmat ---> a\nata ---> .\n... ---> l\n..l ---> a\n.la ---> x\nlax ---> a\naxa ---> m\nxam ---> i\nami ---> .\n... ---> o\n..o ---> m\n.om ---> p\nomp ---> r\nmpr ---> k\nprk ---> e\nrke ---> s\nkes ---> h\nesh ---> .\n... ---> k\n..k ---> r\n.kr ---> i\nkri ---> t\nrit ---> i\niti ---> .\n... ---> l\n..l ---> a\n.la ---> s\nlas ---> k\nask ---> s\nsks ---> h\nksh ---> i\nshi ---> t\nhit ---> a\nita ---> .\n... ---> d\n..d ---> h\n.dh ---> a\ndha ---> m\nham ---> e\name ---> n\nmen ---> d\nend ---> e\nnde ---> r\nder ---> .\n... ---> j\n..j ---> a\n.ja ---> r\njar ---> i\nari ---> n\nrin ---> a\nina ---> .\n... ---> s\n..s ---> e\n.se ---> e\nsee ---> v\neev ---> a\neva ---> .\n... ---> t\n..t ---> u\n.tu ---> l\ntul ---> s\nuls ---> h\nlsh ---> a\nsha ---> .\n... ---> m\n..m ---> a\n.ma ---> h\nmah ---> i\nahi ---> m\nhim ---> a\nima ---> .\n... ---> m\n..m ---> o\n.mo ---> h\nmoh ---> i\nohi ---> n\nhin ---> i\nini ---> .\n... ---> p\n..p ---> a\n.pa ---> l\npal ---> l\nall ---> a\nlla ---> w\nlaw ---> i\nawi ---> .\n... ---> s\n..s ---> a\n.sa ---> k\nsak ---> i\naki ---> b\nkib ---> .\n... ---> s\n..s ---> o\n.so ---> b\nsob ---> a\noba ---> .\n... ---> j\n..j ---> e\n.je ---> b\njeb ---> i\nebi ---> .\n... ---> d\n..d ---> e\n.de ---> n\nden ---> e\nene ---> s\nnes ---> h\nesh ---> .\n... ---> s\n..s ---> a\n.sa ---> n\nsan ---> i\nani ---> t\nnit ---> a\nita ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> w\nanw ---> i\nnwi ---> .\n... ---> i\n..i ---> s\n.is ---> t\nist ---> k\nstk ---> h\ntkh ---> a\nkha ---> r\nhar ---> .\n... ---> r\n..r ---> i\n.ri ---> n\nrin ---> k\nink ---> a\nnka ---> .\n... ---> p\n..p ---> r\n.pr ---> a\npra ---> b\nrab ---> h\nabh ---> i\nbhi ---> l\nhil ---> a\nila ---> .\n... ---> s\n..s ---> h\n.sh ---> i\nshi ---> e\nhie ---> n\nien ---> a\nena ---> .\n... ---> b\n..b ---> a\n.ba ---> j\nbaj ---> r\najr ---> a\njra ---> n\nran ---> g\nang ---> i\nngi ---> .\n... ---> a\n..a ---> l\n.al ---> e\nale ---> m\nlem ---> a\nema ---> .\n... ---> g\n..g ---> a\n.ga ---> n\ngan ---> e\nane ---> s\nnes ---> h\nesh ---> i\nshi ---> .\n... ---> g\n..g ---> a\n.ga ---> j\ngaj ---> e\naje ---> n\njen ---> d\nend ---> e\nnde ---> r\nder ---> .\n... ---> r\n..r ---> a\n.ra ---> j\nraj ---> e\naje ---> n\njen ---> d\nend ---> e\nnde ---> r\nder ---> .\n... ---> z\n..z ---> a\n.za ---> n\nzan ---> m\nanm ---> i\nnmi ---> .\n... ---> b\n..b ---> h\n.bh ---> u\nbhu ---> d\nhud ---> h\nudh ---> i\ndhi ---> .\n... ---> m\n..m ---> e\n.me ---> g\nmeg ---> h\negh ---> a\ngha ---> n\nhan ---> a\nana ---> t\nnat ---> h\nath ---> .\n... ---> b\n..b ---> i\n.bi ---> m\nbim ---> l\niml ---> e\nmle ---> s\nles ---> h\nesh ---> .\n... ---> r\n..r ---> o\n.ro ---> s\nros ---> i\nosi ---> n\nsin ---> a\nina ---> .\n... ---> s\n..s ---> a\n.sa ---> w\nsaw ---> a\nawa ---> n\nwan ---> a\nana ---> .\n... ---> r\n..r ---> a\n.ra ---> m\nram ---> j\namj ---> a\nmja ---> n\njan ---> a\nana ---> m\nnam ---> .\n... ---> s\n..s ---> u\n.su ---> r\nsur ---> a\nura ---> j\nraj ---> a\naja ---> .\n... ---> f\n..f ---> u\n.fu ---> r\nfur ---> k\nurk ---> a\nrka ---> n\nkan ---> .\n... ---> h\n..h ---> a\n.ha ---> n\nhan ---> u\nanu ---> m\nnum ---> a\numa ---> n\nman ---> .\n... ---> r\n..r ---> u\n.ru ---> p\nrup ---> e\nupe ---> n\npen ---> d\nend ---> r\nndr ---> a\ndra ---> .\n... ---> i\n..i ---> s\n.is ---> m\nism ---> a\nsma ---> l\nmal ---> i\nali ---> y\nliy ---> e\niye ---> .\n... ---> r\n..r ---> i\n.ri ---> c\nric ---> h\nich ---> a\ncha ---> .\n... ---> a\n..a ---> r\n.ar ---> i\nari ---> f\nrif ---> .\n... ---> a\n..a ---> k\n.ak ---> k\nakk ---> a\nkka ---> s\nkas ---> h\nash ---> .\n... ---> c\n..c ---> h\n.ch ---> a\ncha ---> n\nhan ---> c\nanc ---> h\nnch ---> a\ncha ---> l\nhal ---> .\n... ---> m\n..m ---> u\n.mu ---> n\nmun ---> n\nunn ---> a\nnna ---> .\n... ---> a\n..a ---> m\n.am ---> r\namr ---> i\nmri ---> t\nrit ---> .\n... ---> r\n..r ---> a\n.ra ---> m\nram ---> s\nams ---> u\nmsu ---> r\nsur ---> a\nura ---> t\nrat ---> .\n... ---> j\n..j ---> a\n.ja ---> m\njam ---> a\nama ---> d\nmad ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> e\nane ---> s\nnes ---> h\nesh ---> .\n... ---> a\n..a ---> n\n.an ---> k\nank ---> i\nnki ---> t\nkit ---> a\nita ---> .\n... ---> d\n..d ---> h\n.dh ---> a\ndha ---> r\nhar ---> a\nara ---> m\nram ---> .\n... ---> u\n..u ---> p\n.up ---> a\nupa ---> s\npas ---> a\nasa ---> n\nsan ---> a\nana ---> .\n... ---> p\n..p ---> a\n.pa ---> n\npan ---> n\nann ---> u\nnnu ---> .\n... ---> a\n..a ---> k\n.ak ---> h\nakh ---> i\nkhi ---> l\nhil ---> .\n... ---> s\n..s ---> h\n.sh ---> u\nshu ---> s\nhus ---> h\nush ---> i\nshi ---> l\nhil ---> .\n... ---> s\n..s ---> a\n.sa ---> k\nsak ---> i\naki ---> r\nkir ---> a\nira ---> n\nran ---> .\n... ---> t\n..t ---> r\n.tr ---> i\ntri ---> p\nrip ---> u\nipu ---> r\npur ---> a\nura ---> r\nrar ---> i\nari ---> .\n... ---> j\n..j ---> e\n.je ---> e\njee ---> v\neev ---> a\neva ---> n\nvan ---> .\n... ---> r\n..r ---> o\n.ro ---> s\nros ---> h\nosh ---> a\nsha ---> n\nhan ---> a\nana ---> r\nnar ---> a\nara ---> .\n... ---> a\n..a ---> r\n.ar ---> s\nars ---> h\nrsh ---> .\n... ---> b\n..b ---> h\n.bh ---> u\nbhu ---> r\nhur ---> e\nure ---> .\n... ---> d\n..d ---> e\n.de ---> e\ndee ---> p\neep ---> e\nepe ---> n\npen ---> d\nend ---> e\nnde ---> r\nder ---> .\n... ---> s\n..s ---> o\n.so ---> h\nsoh ---> i\nohi ---> l\nhil ---> .\n... ---> d\n..d ---> a\n.da ---> v\ndav ---> i\navi ---> n\nvin ---> d\nind ---> e\nnde ---> r\nder ---> .\n... ---> j\n..j ---> a\n.ja ---> s\njas ---> o\naso ---> d\nsod ---> a\noda ---> .\n... ---> h\n..h ---> a\n.ha ---> m\nham ---> i\nami ---> d\nmid ---> a\nida ---> .\n... ---> s\n..s ---> o\n.so ---> n\nson ---> y\nony ---> i\nnyi ---> .\n... ---> d\n..d ---> y\n.dy ---> a\ndya ---> .\n... ---> s\n..s ---> u\n.su ---> n\nsun ---> a\nuna ---> r\nnar ---> k\nark ---> a\nrka ---> l\nkal ---> i\nali ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> i\nhai ---> l\nail ---> j\nilj ---> a\nlja ---> .\n... ---> a\n..a ---> s\n.as ---> h\nash ---> a\nsha ---> r\nhar ---> a\nara ---> n\nran ---> i\nani ---> .\n... ---> r\n..r ---> a\n.ra ---> n\nran ---> n\nann ---> i\nnni ---> .\n... ---> h\n..h ---> u\n.hu ---> s\nhus ---> n\nusn ---> o\nsno ---> .\n... ---> r\n..r ---> i\n.ri ---> y\nriy ---> a\niya ---> j\nyaj ---> u\naju ---> l\njul ---> .\n... ---> k\n..k ---> a\n.ka ---> n\nkan ---> h\nanh ---> a\nnha ---> i\nhai ---> y\naiy ---> a\niya ---> .\n... ---> n\n..n ---> a\n.na ---> v\nnav ---> i\navi ---> n\nvin ---> .\n... ---> s\n..s ---> o\n.so ---> n\nson ---> a\nona ---> m\nnam ---> .\n... ---> r\n..r ---> a\n.ra ---> m\nram ---> a\nama ---> v\nmav ---> t\navt ---> a\nvta ---> r\ntar ---> .\n... ---> m\n..m ---> i\n.mi ---> r\nmir ---> a\nira ---> .\n... ---> m\n..m ---> a\n.ma ---> d\nmad ---> h\nadh ---> o\ndho ---> .\n... ---> j\n..j ---> a\n.ja ---> g\njag ---> n\nagn ---> a\ngna ---> t\nnat ---> h\nath ---> .\n... ---> v\n..v ---> i\n.vi ---> s\nvis ---> h\nish ---> v\nshv ---> a\nhva ---> s\nvas ---> h\nash ---> .\n... ---> c\n..c ---> h\n.ch ---> h\nchh ---> a\nhha ---> n\nhan ---> o\nano ---> .\n... ---> t\n..t ---> a\n.ta ---> j\ntaj ---> r\najr ---> a\njra ---> n\nran ---> i\nani ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> s\nhas ---> h\nash ---> w\nshw ---> a\nhwa ---> t\nwat ---> .\n... ---> a\n..a ---> a\n.aa ---> m\naam ---> o\namo ---> s\nmos ---> h\nosh ---> .\n... ---> m\n..m ---> o\n.mo ---> r\nmor ---> k\nork ---> i\nrki ---> .\n... ---> a\n..a ---> n\n.an ---> s\nans ---> u\nnsu ---> l\nsul ---> .\n... ---> i\n..i ---> j\n.ij ---> h\nijh ---> a\njha ---> r\nhar ---> .\n... ---> s\n..s ---> t\n.st ---> e\nste ---> p\ntep ---> h\neph ---> e\nphe ---> n\nhen ---> .\n... ---> k\n..k ---> a\n.ka ---> j\nkaj ---> o\najo ---> l\njol ---> .\n... ---> a\n..a ---> k\n.ak ---> s\naks ---> h\nksh ---> a\nsha ---> t\nhat ---> .\n... ---> r\n..r ---> a\n.ra ---> v\nrav ---> i\navi ---> n\nvin ---> d\nind ---> a\nnda ---> r\ndar ---> .\n... ---> s\n..s ---> h\n.sh ---> a\nsha ---> k\nhak ---> u\naku ---> n\nkun ---> .\n... ---> m\n..m ---> a\n.ma ---> k\nmak ---> b\nakb ---> u\nkbu ---> l\nbul ---> .\n... ---> d\n..d ---> e\n.de ---> v\ndev ---> a\neva ---> n\nvan ---> a\nana ---> n\nnan ---> d\nand ---> .\n... ---> n\n..n ---> a\n.na ---> d\nnad ---> e\nade ---> m\ndem ---> .\n... ---> b\n..b ---> u\n.bu ---> n\nbun ---> d\nund ---> h\nndh ---> u\ndhu ---> .\n... ---> i\n..i ---> n\n.in ---> k\nink ---> o\nnko ---> o\nkoo ---> .\n... ---> g\n..g ---> e\n.ge ---> n\ngen ---> s\nens ---> i\nnsi ---> n\nsin ---> g\ning ---> h\nngh ---> .\n... ---> r\n..r ---> a\n.ra ---> h\nrah ---> i\nahi ---> m\nhim ---> u\nimu ---> n\nmun ---> .\n... ---> g\n..g ---> a\n.ga ---> g\ngag ---> a\naga ---> n\ngan ---> .\n... ---> b\n..b ---> a\n.ba ---> l\nbal ---> r\nalr ---> a\nlra ---> m\nram ---> .\n... ---> k\n..k ---> h\n.kh ---> a\nkha ---> d\nhad ---> a\nada ---> k\ndak ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> b\nanb ---> h\nnbh ---> a\nbha ---> r\nhar ---> .\n... ---> r\n..r ---> a\n.ra ---> m\nram ---> b\namb ---> i\nmbi ---> r\nbir ---> .\n... ---> n\n..n ---> a\n.na ---> h\nnah ---> i\nahi ---> d\nhid ---> .\n... ---> i\n..i ---> q\n.iq ---> b\niqb ---> a\nqba ---> l\nbal ---> .\n... ---> k\n..k ---> a\n.ka ---> l\nkal ---> u\nalu ---> s\nlus ---> i\nusi ---> n\nsin ---> g\ning ---> h\nngh ---> .\n... ---> j\n..j ---> a\n.ja ---> l\njal ---> s\nals ---> i\nlsi ---> n\nsin ---> g\ning ---> h\nngh ---> .\n... ---> s\n..s ---> a\n.sa ---> b\nsab ---> e\nabe ---> n\nben ---> o\neno ---> o\nnoo ---> r\noor ---> .\n... ---> s\n..s ---> w\n.sw ---> a\nswa ---> t\nwat ---> r\natr ---> i\ntri ---> .\n... ---> m\n..m ---> i\n.mi ---> t\nmit ---> n\nitn ---> u\ntnu ---> .\n... ---> s\n..s ---> a\n.sa ---> n\nsan ---> j\nanj ---> o\nnjo ---> g\njog ---> t\nogt ---> a\ngta ---> .\n... ---> j\n..j ---> i\n.ji ---> s\njis ---> m\nism ---> .\n... ---> a\n..a ---> s\n.as ---> a\nasa ---> n\nsan ---> a\nana ---> .\n... ---> f\n..f ---> a\n.fa ---> t\nfat ---> m\natm ---> a\ntma ---> .\n... ---> f\n..f ---> i\n.fi ---> r\nfir ---> t\nirt ---> u\nrtu ---> .\n... ---> n\n..n ---> a\n.na ---> j\nnaj ---> a\naja ---> r\njar ---> a\nara ---> .\n... ---> a\n..a ---> m\n.am ---> i\nami ---> r\nmir ---> a\nira ---> k\nrak ---> a\naka ---> .\n... ---> t\n..t ---> a\n.ta ---> n\ntan ---> i\nani ---> s\nnis ---> h\nish ---> a\nsha ---> .\n... ---> n\n..n ---> a\n.na ---> v\nnav ---> d\navd ---> e\nvde ---> e\ndee ---> p\neep ---> .\n... ---> n\n..n ---> a\n.na ---> r\nnar ---> a\nara ---> n\nran ---> d\nand ---> e\nnde ---> r\nder ---> .\n... ---> v\n..v ---> e\n.ve ---> e\nvee ---> n\neen ---> i\neni ---> t\nnit ---> a\nita ---> .\n... ---> n\n..n ---> a\n.na ---> j\nnaj ---> n\najn ---> i\njni ---> .\n... ---> i\n..i ---> b\n.ib ---> r\nibr ---> a\nbra ---> h\nrah ---> i\nahi ---> m\nhim ---> .\n... ---> s\n..s ---> h\n.sh ---> e\nshe ---> n\nhen ---> a\nena ---> z\nnaz ---> .\n... ---> r\n..r ---> a\n.ra ---> j\nraj ---> k\najk ---> u\njku ---> m\nkum ---> a\numa ---> r\nmar ---> .\n... ---> s\n..s ---> u\n.su ---> k\nsuk ---> h\nukh ---> .\n... ---> s\n..s ---> u\n.su ---> n\nsun ---> d\nund ---> e\nnde ---> r\nder ---> .\n... ---> a\n..a ---> a\n.aa ---> l\naal ---> i\nali ---> n\nlin ---> a\nina ---> .\n... ---> m\n..m ---> u\n.mu ---> n\nmun ---> t\nunt ---> a\nnta ---> j\ntaj ---> a\naja ---> r\njar ---> .\n... ---> a\n..a ---> s\n.as ---> u\nasu ---> t\nsut ---> o\nuto ---> s\ntos ---> h\nosh ---> .\n... ---> a\n..a ---> n\n.an ---> g\nang ---> r\nngr ---> e\ngre ---> g\nreg ---> .\n... ---> n\n..n ---> a\n.na ---> t\nnat ---> t\natt ---> h\ntth ---> u\nthu ---> .\n... ---> r\n..r ---> a\n.ra ---> g\nrag ---> h\nagh ---> u\nghu ---> .\n... ---> m\n..m ---> a\n.ma ---> i\nmai ---> s\nais ---> a\nisa ---> n\nsan ---> .\n... ---> p\n..p ---> r\n.pr ---> i\npri ---> n\nrin ---> k\nink ---> a\nnka ---> y\nkay ---> a\naya ---> .\n... ---> a\n..a ---> n\n.an ---> j\nanj ---> a\nnja ---> n\njan ---> i\nani ---> .\n... ---> p\n..p ---> r\n.pr ---> a\npra ---> k\nrak ---> a\naka ---> s\nkas ---> h\nash ---> .\n... ---> u\n..u ---> m\n.um ---> e\nume ---> d\nmed ---> i\nedi ---> .\n... ---> d\n..d ---> i\n.di ---> l\ndil ---> s\nils ---> a\nlsa ---> d\nsad ---> .\n... ---> r\n..r ---> a\n.ra ---> j\nraj ---> k\najk ---> u\njku ---> m\nkum ---> a\numa ---> r\nmar ---> m\narm ---> .\n... ---> s\n..s ---> a\n.sa ---> r\nsar ---> f\narf ---> a\nrfa ---> r\nfar ---> a\nara ---> j\nraj ---> .\n... ---> s\n..s ---> a\n.sa ---> p\nsap ---> i\napi ---> t\npit ---> a\nita ---> .\n... ---> p\n..p ---> a\n.pa ---> p\npap ---> p\napp ---> u\nppu ---> .\n... ---> s\n..s ---> a\n.sa ---> k\nsak ---> i\naki ---> n\nkin ---> a\nina ---> .\n... ---> s\n..s ---> a\n.sa ---> i\nsai ---> d\naid ---> u\nidu ---> l\ndul ---> .\n... ---> s\n..s ---> u\n.su ---> b\nsub ---> h\nubh ---> i\nbhi ---> y\nhiy ---> a\niya ---> .\n... ---> y\n..y ---> a\n.ya ---> s\nyas ---> h\nash ---> w\nshw ---> a\nhwa ---> n\nwan ---> t\nant ---> .\n... ---> n\n..n ---> i\n.ni ---> r\nnir ---> b\nirb ---> h\nrbh ---> a\nbha ---> y\nhay ---> .\n... ---> r\n..r ---> u\n.ru ---> p\nrup ---> l\nupl ---> a\npla ---> l\nlal ---> .\n... ---> k\n..k ---> h\n.kh ---> u\nkhu ---> s\nhus ---> h\nush ---> b\nshb ---> a\nhba ---> r\nbar ---> i\nari ---> .\n... ---> j\n..j ---> i\n.ji ---> m\njim ---> m\nimm ---> i\nmmi ---> .\n... ---> m\n..m ---> a\n.ma ---> m\nmam ---> a\nama ---> t\nmat ---> a\nata ---> .\n... ---> a\n..a ---> a\n.aa ---> s\naas ---> h\nash ---> i\nshi ---> y\nhiy ---> a\niya ---> .\n... ---> i\n..i ---> s\n.is ---> h\nish ---> a\nsha ---> r\nhar ---> a\nara ---> r\nrar ---> .\n... ---> k\n..k ---> e\n.ke ---> s\nkes ---> h\nesh ---> a\nsha ---> v\nhav ---> .\n... ---> p\n..p ---> a\n.pa ---> r\npar ---> i\nari ---> .\n... ---> a\n..a ---> r\n.ar ---> j\narj ---> u\nrju ---> n\njun ---> .\n... ---> n\n..n ---> a\n.na ---> m\nnam ---> a\nama ---> n\nman ---> .\n... ---> j\n..j ---> a\n.ja ---> p\njap ---> n\napn ---> e\npne ---> e\nnee ---> t\neet ---> .\n... ---> n\n..n ---> r\n.nr ---> e\nnre ---> n\nren ---> d\nend ---> r\nndr ---> .\n... ---> r\n..r ---> a\n.ra ---> j\nraj ---> w\najw ---> a\njwa ---> n\nwan ---> t\nant ---> i\nnti ---> .\n... ---> m\n..m ---> a\n.ma ---> n\nman ---> f\nanf ---> u\nnfu ---> l\nful ---> .\n... ---> b\n..b ---> a\n.ba ---> s\nbas ---> a\nasa ---> n\nsan ---> t\nant ---> .\n... ---> u\n..u ---> m\n.um ---> a\numa ---> n\nman ---> a\nana ---> t\nnat ---> h\nath ---> .\n... ---> j\n..j ---> h\n.jh ---> u\njhu ---> h\nhuh ---> i\nuhi ---> .\n... ---> m\n..m ---> i\n.mi ---> t\nmit ---> h\nith ---> a\ntha ---> l\nhal ---> e\nale ---> s\nles ---> h\nesh ---> .\n\n\n\nX.shape, X.dtype, Y.shape, Y.dtype\n\n(torch.Size([7229, 3]), torch.int64, torch.Size([7229]), torch.int64)\n\n\n\n# Embedding layer for the context\n\nemb_dim = 2\nemb = torch.nn.Embedding(len(stoi), emb_dim)\n\n\nemb.weight.shape\n\ntorch.Size([27, 2])\n\n\n\n# Function to visualize the embedding in 2d space\n\ndef plot_emb(emb, itos, ax=None):\n    if ax is None:\n        fig, ax = plt.subplots()\n    for i in range(len(itos)):\n        x, y = emb.weight[i].detach().numpy()\n        ax.scatter(x, y, color='k')\n        ax.text(x, y, itos[i])\n    return ax\n\nplot_emb(emb, itos)\n\n<AxesSubplot: >\n\n\n\n\n\n\nclass NextChar(nn.Module):\n  def __init__(self, block_size, vocab_size, emb_dim, hidden_size):\n    super().__init__()\n    self.emb = nn.Embedding(vocab_size, emb_dim)\n    self.lin1 = nn.Linear(block_size * emb_dim, hidden_size)\n    self.lin2 = nn.Linear(hidden_size, vocab_size)\n\n  def forward(self, x):\n    x = self.emb(x)\n    x = x.view(x.shape[0], -1)\n    x = F.relu(self.lin1(x))\n    x = self.lin2(x)\n    return x\n    \n\n\n# Generate names from untrained model\n\n\nmodel = NextChar(block_size, len(stoi), emb_dim, 50)\n\ng = torch.Generator()\ng.manual_seed(4000002)\ndef generate_name(model, itos, stoi, block_size, max_len=10):\n    context = [0] * block_size\n    name = ''\n    for i in range(max_len):\n        x = torch.tensor(context).view(1, -1)\n        y_pred = model(x)\n        ix = torch.distributions.categorical.Categorical(logits=y_pred).sample().item()\n        ch = itos[ix]\n        if ch == '.':\n            break\n        name += ch\n        context = context[1:] + [ix]\n    return name\n\nfor i in range(10):\n    print(generate_name(model, itos, stoi, block_size))\n\nqyev\n\nveevcykfro\nuewexcgdha\nxbvu\nxibigzhkng\nflltdnioqe\n\navntdnaxun\nylpvygvzqf\n\n\n\n# Train the model\n\nloss_fn = nn.CrossEntropyLoss()\nopt = torch.optim.AdamW(model.parameters(), lr=0.001)\n\n# Mini-batch training\nbatch_size = 4\nfor epoch in range(2000):\n    for i in range(0, X.shape[0], batch_size):\n        x = X[i:i+batch_size]\n        y = Y[i:i+batch_size]\n        y_pred = model(x)\n        loss = loss_fn(y_pred, y)\n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n    if epoch % 100 == 0:\n        print(epoch, loss.item())\n\n\n0 1.1258258819580078\n100 0.5126990079879761\n200 0.5593062043190002\n\n\nKeyboardInterrupt: \n\n\n\n# Visualize the embedding\n\nplot_emb(model.emb, itos)\n\n<AxesSubplot: >\n\n\n\n\n\n\n# Generate names from trained model\n\nfor i in range(10):\n    print(generate_name(model, itos, stoi, block_size))\n\ndev\nsili\nsujino\nabim\nubultatin\nnashtaj\nnaula\nduna\nkav\nshtyi"
  },
  {
    "objectID": "notebooks/posts/maths-jax.html",
    "href": "notebooks/posts/maths-jax.html",
    "title": "Maths and JAX",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport jax.numpy as jnp\nimport jax\n\n\ndef func(x, y, z):\n    return x**2 + jnp.sin(y) + z\n\n\nfunc(1, 2, 3)\n\nDeviceArray(4.9092975, dtype=float32, weak_type=True)\n\n\n\nfrom sympy import *\ninit_printing()\n\nx, y, z = symbols('x y z')\nf = x**2 + sin(y) + z\nf\n\n\\(\\displaystyle x^{2} + z + \\sin{\\left(y \\right)}\\)\n\n\n\ndiff(f, x)\n\n\\(\\displaystyle 2 x\\)\n\n\n\n# Find the derivative of f with respect to x, y, and z using sympy\ndel_x, del_y, del_z = diff(f, x), diff(f, y), diff(f, z)\ndel_x, del_y, del_z\n\n\\(\\displaystyle \\left( 2 x, \\  \\cos{\\left(y \\right)}, \\  1\\right)\\)\n\n\n\ngrad_f = lambdify((x, y, z), [del_x, del_y, del_z])\ngrad_f(1, 2, 3)\n\n\\(\\displaystyle \\left[ 2, \\  -0.416146836547142, \\  1\\right]\\)\n\n\n\ngrad_f_jax = jax.grad(func, argnums=(0, 1, 2))\ngrad_f_jax(1., 2., 3.)\n\n(DeviceArray(2., dtype=float32, weak_type=True),\n DeviceArray(-0.41614684, dtype=float32, weak_type=True),\n DeviceArray(1., dtype=float32, weak_type=True))\n\n\n\nn = 20\nA = jax.random.normal(shape=(1, n), key=jax.random.PRNGKey(0), dtype=jnp.float32)\ntheta = jax.random.normal(shape=(n, 1), key=jax.random.PRNGKey(0), dtype=jnp.float32)\nb = A @ theta \n\nb\n\nDeviceArray([[28.684494]], dtype=float32)\n\n\n\nb.flatten(), b.item()\n\n(DeviceArray([28.684494], dtype=float32), 28.684494018554688)\n\n\n\ndef a_theta(A, theta):\n    return A @ theta\n\n\na_theta(A, theta)\n\nDeviceArray([[28.684494]], dtype=float32)\n\n\n\ngrad_a_theta = jax.grad(a_theta, argnums=1)\n\n\njax.jacobian(a_theta, argnums=1)(A, theta)[0, 0, :].shape\n\n\\(\\displaystyle \\left( 20, \\  1\\right)\\)\n\n\n\nA.shape\n\n\\(\\displaystyle \\left( 1, \\  20\\right)\\)\n\n\n\n# Sympy version\n\n\nA = MatrixSymbol('A', 1, n)\ntheta = MatrixSymbol('theta', n, 1)\nA, theta\n\n\\(\\displaystyle \\left( A, \\  \\theta\\right)\\)\n\n\n\ndiff(A*theta, theta)\n\n\\(\\displaystyle A^{T}\\)"
  },
  {
    "objectID": "notebooks/posts/tips.html",
    "href": "notebooks/posts/tips.html",
    "title": "Misc tips",
    "section": "",
    "text": "Miscelleneous tips\n\nTab Complete\na.b?\nBlack format\nrich\n\ntable\ninspect\n\ndir()\ntiming\ntiming with sort?!\ntimeit object\nplotting timing\narray .tolist()\nDataclasses\nAnnotation\nPlotting with pandas (sin, log, question …)\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\n\n\nn = 100\nk = 20\nm = 50\n\nnp.random.seed(0)\na = np.random.randn(n, k)\nb = np.random.randn(k, m)\na.shape, b.shape\n\n((100, 20), (20, 50))\n\n\n\na_list_of_list = a.tolist()\na_list_of_list[0]\n\nlist\n\n\n\n\"list\" in dir(a)[:]\n\nFalse\n\n\n\nimport rich\nrich.inspect(a.tolist, methods=True, all=True)\n\n╭──────────────────────── <built-in method tolist of numpy.ndarray object at 0x164cbb8d0> ────────────────────────╮\n│ def ndarray.tolist(...)                                                                                         │\n│                                                                                                                 │\n│ a.tolist()                                                                                                      │\n│                                                                                                                 │\n│            __doc__ = \"a.tolist()\\n\\n    Return the array as an ``a.ndim``-levels deep nested list of Python     │\n│                      scalars.\\n\\n    Return a copy of the array data as a (nested) Python list.\\n    Data items │\n│                      are converted to the nearest compatible builtin Python type, via\\n    the                  │\n│                      `~numpy.ndarray.item` function.\\n\\n    If ``a.ndim`` is 0, then since the depth of the     │\n│                      nested list is 0, it will\\n    not be a list at all, but a simple Python scalar.\\n\\n       │\n│                      Parameters\\n    ----------\\n    none\\n\\n    Returns\\n    -------\\n    y : object, or list  │\n│                      of object, or list of list of object, or ...\\n        The possibly nested list of array    │\n│                      elements.\\n\\n    Notes\\n    -----\\n    The array may be recreated via ``a =                │\n│                      np.array(a.tolist())``, although this\\n    may sometimes lose precision.\\n\\n    Examples\\n │\n│                      --------\\n    For a 1D array, ``a.tolist()`` is almost the same as ``list(a)``,\\n          │\n│                      except that ``tolist`` changes numpy scalars to Python scalars:\\n\\n    >>> a =             │\n│                      np.uint32([1, 2])\\n    >>> a_list = list(a)\\n    >>> a_list\\n    [1, 2]\\n    >>>           │\n│                      type(a_list[0])\\n    <class 'numpy.uint32'>\\n    >>> a_tolist = a.tolist()\\n    >>>        │\n│                      a_tolist\\n    [1, 2]\\n    >>> type(a_tolist[0])\\n    <class 'int'>\\n\\n    Additionally,    │\n│                      for a 2D array, ``tolist`` applies recursively:\\n\\n    >>> a = np.array([[1, 2], [3,       │\n│                      4]])\\n    >>> list(a)\\n    [array([1, 2]), array([3, 4])]\\n    >>> a.tolist()\\n    [[1,    │\n│                      2], [3, 4]]\\n\\n    The base case for this recursion is a 0D array:\\n\\n    >>> a =          │\n│                      np.array(1)\\n    >>> list(a)\\n    Traceback (most recent call last):\\n      ...\\n          │\n│                      TypeError: iteration over a 0-d array\\n    >>> a.tolist()\\n    1\"                          │\n│         __module__ = None                                                                                       │\n│           __name__ = 'tolist'                                                                                   │\n│       __qualname__ = 'ndarray.tolist'                                                                           │\n│           __self__ = array([[ 1.76405235e+00,  4.00157208e-01,  9.78737984e-01, ...,                            │\n│                              -2.05158264e-01,  3.13067702e-01, -8.54095739e-01],                                │\n│                             [-2.55298982e+00,  6.53618595e-01,  8.64436199e-01, ...,                            │\n│                               1.20237985e+00, -3.87326817e-01, -3.02302751e-01],                                │\n│                             [-1.04855297e+00, -1.42001794e+00, -1.70627019e+00, ...,                            │\n│                               3.02471898e-01, -6.34322094e-01, -3.62741166e-01],                                │\n│                             ...,                                                                                │\n│                             [ 8.73311836e-01,  1.19973618e+00,  4.56153036e-01, ...,                            │\n│                              -1.24021634e+00,  9.00054243e-01,  1.80224223e+00],                                │\n│                             [-2.08285103e-01,  1.57437124e+00,  1.98989494e-01, ...,                            │\n│                               4.32837621e-01, -8.08717532e-01, -1.10412399e+00],                                │\n│                             [-7.89102180e-01,  1.24845579e-03, -1.59939788e-01, ...,                            │\n│                               1.58433847e-01, -1.14190142e+00, -1.31097037e+00]])                               │\n│ __text_signature__ = None                                                                                       │\n│           __call__ = def __call__(*args, **kwargs): Call self as a function.                                    │\n│          __class__ = class __class__():                                                                         │\n│        __delattr__ = def __delattr__(name, /): Implement delattr(self, name).                                   │\n│            __dir__ = def __dir__(): Default dir() implementation.                                               │\n│             __eq__ = def __eq__(value, /): Return self==value.                                                  │\n│         __format__ = def __format__(format_spec, /): Default object formatter.                                  │\n│             __ge__ = def __ge__(value, /): Return self>=value.                                                  │\n│   __getattribute__ = def __getattribute__(name, /): Return getattr(self, name).                                 │\n│             __gt__ = def __gt__(value, /): Return self>value.                                                   │\n│           __hash__ = def __hash__(): Return hash(self).                                                         │\n│           __init__ = def __init__(*args, **kwargs): Initialize self.  See help(type(self)) for accurate         │\n│                      signature.                                                                                 │\n│  __init_subclass__ = def __init_subclass__(...) This method is called when a class is subclassed.               │\n│             __le__ = def __le__(value, /): Return self<=value.                                                  │\n│             __lt__ = def __lt__(value, /): Return self<value.                                                   │\n│             __ne__ = def __ne__(value, /): Return self!=value.                                                  │\n│            __new__ = def __new__(*args, **kwargs): Create and return a new object.  See help(type) for accurate │\n│                      signature.                                                                                 │\n│         __reduce__ = def __reduce__(...) Helper for pickle.                                                     │\n│      __reduce_ex__ = def __reduce_ex__(protocol, /): Helper for pickle.                                         │\n│           __repr__ = def __repr__(): Return repr(self).                                                         │\n│        __setattr__ = def __setattr__(name, value, /): Implement setattr(self, name, value).                     │\n│         __sizeof__ = def __sizeof__(): Size of object in memory, in bytes.                                      │\n│            __str__ = def __str__(): Return str(self).                                                           │\n│   __subclasshook__ = def __subclasshook__(...) Abstract classes can override this to customize issubclass().    │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\nlambda x: np.power(x, 3)\n\n\ndef f(x):\n    return np.power(x, 3)\n\n\nd = {\n    r\"$\\sin(x)$\": np.sin,\n    r\"$\\log(x)$\": np.log,\n    r\"$\\frac{sin(x)}{x}$\": lambda x: np.sin(x) / x,\n    r\"$x^3$\": lambda x: np.power(x, 3),\n}\n\n\nd\n\n{'$\\\\sin(x)$': <ufunc 'sin'>,\n '$\\\\log(x)$': <ufunc 'log'>,\n '$\\\\frac{sin(x)}{x}$': <function __main__.<lambda>(x)>,\n '$x^3$': <function __main__.<lambda>(x)>}\n\n\n\nx = np.arange(0.005, 10.0, 0.005)\n\n\ne = {k: v(x) for k, v in d.items()}\n\n\ne\n\n{'$\\\\sin(x)$': array([ 0.00499998,  0.00999983,  0.01499944, ..., -0.53137431,\n        -0.53560333, -0.53981897]),\n '$\\\\log(x)$': array([-5.29831737, -4.60517019, -4.19970508, ...,  2.30108397,\n         2.30158459,  2.30208497]),\n '$\\\\frac{sin(x)}{x}$': array([ 0.99999583,  0.99998333,  0.9999625 , ..., -0.05321726,\n        -0.05361395, -0.0540089 ]),\n '$x^3$': array([1.25000000e-07, 1.00000000e-06, 3.37500000e-06, ...,\n        9.95506747e+02, 9.97002999e+02, 9.98500750e+02])}\n\n\n\ndf = pd.DataFrame(e, index=x)\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      $\\sin(x)$\n      $\\log(x)$\n      $\\frac{sin(x)}{x}$\n      $x^3$\n    \n  \n  \n    \n      0.005\n      0.005000\n      -5.298317\n      0.999996\n      1.250000e-07\n    \n    \n      0.010\n      0.010000\n      -4.605170\n      0.999983\n      1.000000e-06\n    \n    \n      0.015\n      0.014999\n      -4.199705\n      0.999963\n      3.375000e-06\n    \n    \n      0.020\n      0.019999\n      -3.912023\n      0.999933\n      8.000000e-06\n    \n    \n      0.025\n      0.024997\n      -3.688879\n      0.999896\n      1.562500e-05\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      9.975\n      -0.522877\n      2.300082\n      -0.052419\n      9.925187e+02\n    \n    \n      9.980\n      -0.527132\n      2.300583\n      -0.052819\n      9.940120e+02\n    \n    \n      9.985\n      -0.531374\n      2.301084\n      -0.053217\n      9.955067e+02\n    \n    \n      9.990\n      -0.535603\n      2.301585\n      -0.053614\n      9.970030e+02\n    \n    \n      9.995\n      -0.539819\n      2.302085\n      -0.054009\n      9.985007e+02\n    \n  \n\n1999 rows × 4 columns\n\n\n\n\ndf.plot()\n\n<AxesSubplot:>\n\n\n\n\n\n\ndf.plot(subplots=True)\n\narray([<AxesSubplot:>, <AxesSubplot:>, <AxesSubplot:>, <AxesSubplot:>],\n      dtype=object)\n\n\n\n\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      $\\sin$\n      log\n      $\\frac{sin(x)}{x}$\n      x^3\n    \n  \n  \n    \n      0.005\n      0.005000\n      -5.298317\n      0.999996\n      1.250000e-07\n    \n    \n      0.010\n      0.010000\n      -4.605170\n      0.999983\n      1.000000e-06\n    \n    \n      0.015\n      0.014999\n      -4.199705\n      0.999963\n      3.375000e-06\n    \n    \n      0.020\n      0.019999\n      -3.912023\n      0.999933\n      8.000000e-06\n    \n    \n      0.025\n      0.024997\n      -3.688879\n      0.999896\n      1.562500e-05\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      9.975\n      -0.522877\n      2.300082\n      -0.052419\n      9.925187e+02\n    \n    \n      9.980\n      -0.527132\n      2.300583\n      -0.052819\n      9.940120e+02\n    \n    \n      9.985\n      -0.531374\n      2.301084\n      -0.053217\n      9.955067e+02\n    \n    \n      9.990\n      -0.535603\n      2.301585\n      -0.053614\n      9.970030e+02\n    \n    \n      9.995\n      -0.539819\n      2.302085\n      -0.054009\n      9.985007e+02\n    \n  \n\n1999 rows × 4 columns\n\n\n\n\n((df - df.min(axis=0)) / (df.max(axis=0) - df.min(axis=0))).plot()\n\n<AxesSubplot:>\n\n\n\n\n\n\ndf = pd.DataFrame(np.random.randn(1000, 5),\n                  columns=\"a,b,c,d,e\".split(\",\"))\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n      e\n    \n  \n  \n    \n      0\n      1.593274\n      0.568722\n      -0.114487\n      0.251630\n      -1.210856\n    \n    \n      1\n      -0.393734\n      0.085253\n      0.099422\n      -1.530616\n      0.327623\n    \n    \n      2\n      0.279196\n      -0.377051\n      0.004175\n      -1.483492\n      -1.479796\n    \n    \n      3\n      0.134687\n      -0.667723\n      -0.011556\n      0.839491\n      -0.173930\n    \n    \n      4\n      -2.810668\n      -0.150654\n      -0.481044\n      -0.234694\n      0.899731\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      995\n      -0.837658\n      1.315288\n      -0.364523\n      1.993571\n      1.584878\n    \n    \n      996\n      -2.104663\n      -2.553118\n      -1.242666\n      0.201987\n      -0.305332\n    \n    \n      997\n      -1.195587\n      -1.577903\n      0.849912\n      0.327590\n      -0.001670\n    \n    \n      998\n      -0.035563\n      -0.489252\n      1.930498\n      -0.262645\n      0.825932\n    \n    \n      999\n      -0.643267\n      -0.828981\n      -0.202735\n      -0.257866\n      0.070815\n    \n  \n\n1000 rows × 5 columns\n\n\n\n\ndf = df.assign(f=df.sum(axis=1))\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n      e\n      f\n    \n  \n  \n    \n      0\n      1.593274\n      0.568722\n      -0.114487\n      0.251630\n      -1.210856\n      1.088284\n    \n    \n      1\n      -0.393734\n      0.085253\n      0.099422\n      -1.530616\n      0.327623\n      -1.412052\n    \n    \n      2\n      0.279196\n      -0.377051\n      0.004175\n      -1.483492\n      -1.479796\n      -3.056967\n    \n    \n      3\n      0.134687\n      -0.667723\n      -0.011556\n      0.839491\n      -0.173930\n      0.120969\n    \n    \n      4\n      -2.810668\n      -0.150654\n      -0.481044\n      -0.234694\n      0.899731\n      -2.777329\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      995\n      -0.837658\n      1.315288\n      -0.364523\n      1.993571\n      1.584878\n      3.691555\n    \n    \n      996\n      -2.104663\n      -2.553118\n      -1.242666\n      0.201987\n      -0.305332\n      -6.003792\n    \n    \n      997\n      -1.195587\n      -1.577903\n      0.849912\n      0.327590\n      -0.001670\n      -1.597657\n    \n    \n      998\n      -0.035563\n      -0.489252\n      1.930498\n      -0.262645\n      0.825932\n      1.968971\n    \n    \n      999\n      -0.643267\n      -0.828981\n      -0.202735\n      -0.257866\n      0.070815\n      -1.862035\n    \n  \n\n1000 rows × 6 columns\n\n\n\n\ndf.query(\"f > 5\")[\"f\"].std()\n\n0.6609257763922614\n\n\n\ndf.query(\"f <= 5\")[\"f\"].std()\n\n2.1891090850524444\n\n\n\n\"tolist\" in dir(df)\n\nFalse\n\n\n\ndef search(obj, query):\n    import re\n\n    return list(filter(lambda x: re.search(query, x), dir(obj)))\n\n\nsearch(a, \"lis\")\n\n['tolist']\n\n\n\nimport numpy as np\nimport pandas as pd\n\n\ndef search(obj, query):\n    import re\n    from rich import inspect\n    from rich.pretty import Pretty\n    from rich.panel import Panel\n\n    z = list(filter(lambda x: re.search(query, x), dir(obj)))\n    p = Panel(Pretty(\"a\"), title=f\"Searching for `{query}`\")\n    # return p\n    ps = []\n    for q in z:\n        ps.append(Panel(Pretty(inspect(getattr(obj, q), methods=True, docs=True))))\n\n\nsearch(np.random, \"normal\")\n\n╭─ <built-in method lognormal of numpy.random.mtrand.RandomState object at 0x10c627840> ─╮\n│ def RandomState.lognormal(...)                                                         │\n│                                                                                        │\n│ lognormal(mean=0.0, sigma=1.0, size=None)                                              │\n│                                                                                        │\n│ 29 attribute(s) not shown. Run inspect(inspect) for options.                           │\n╰────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n╭─ <built-in method multivariate_normal of numpy.random.mtrand.RandomState object at 0x10c627840> ─╮\n│ def RandomState.multivariate_normal(...)                                                         │\n│                                                                                                  │\n│ multivariate_normal(mean, cov, size=None, check_valid='warn', tol=1e-8)                          │\n│                                                                                                  │\n│ 29 attribute(s) not shown. Run inspect(inspect) for options.                                     │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n╭─ <built-in method normal of numpy.random.mtrand.RandomState object at 0x10c627840> ─╮\n│ def RandomState.normal(...)                                                         │\n│                                                                                     │\n│ normal(loc=0.0, scale=1.0, size=None)                                               │\n│                                                                                     │\n│ 29 attribute(s) not shown. Run inspect(inspect) for options.                        │\n╰─────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n╭─ <built-in method standard_normal of numpy.random.mtrand.RandomState object at 0x10c627840> ─╮\n│ def RandomState.standard_normal(...)                                                         │\n│                                                                                              │\n│ standard_normal(size=None)                                                                   │\n│                                                                                              │\n│ 29 attribute(s) not shown. Run inspect(inspect) for options.                                 │\n╰──────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\ngetattr(pd.DataFrame().values, \"tolist\")\n\n<function ndarray.tolist>\n\n\n\npd.DataFrame.to\n\n\n\n\n\n  \n    \n      \n    \n  \n  \n  \n\n\n\n\n\ndf = pd.DataFrame()\nsearch(df.values, \"list\")\n\n╭───────────────────────────────────────────── Searching for {query} ─────────────────────────────────────────────╮\n│ ['tolist']                                                                                                      │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\nsearch(pd.DataFrame, \"to\")\n\n╭─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ [                                                                                                               │\n│     '_constructor',                                                                                             │\n│     '_constructor_sliced',                                                                                      │\n│     '_to_dict_of_blocks',                                                                                       │\n│     'kurtosis',                                                                                                 │\n│     'to_clipboard',                                                                                             │\n│     'to_csv',                                                                                                   │\n│     'to_dict',                                                                                                  │\n│     'to_excel',                                                                                                 │\n│     'to_feather',                                                                                               │\n│     'to_gbq',                                                                                                   │\n│     'to_hdf',                                                                                                   │\n│     'to_html',                                                                                                  │\n│     'to_json',                                                                                                  │\n│     'to_latex',                                                                                                 │\n│     'to_markdown',                                                                                              │\n│     'to_numpy',                                                                                                 │\n│     'to_orc',                                                                                                   │\n│     'to_parquet',                                                                                               │\n│     'to_period',                                                                                                │\n│     'to_pickle',                                                                                                │\n│     'to_records',                                                                                               │\n│     'to_sql',                                                                                                   │\n│     'to_stata',                                                                                                 │\n│     'to_string',                                                                                                │\n│     'to_timestamp',                                                                                             │\n│     'to_xarray',                                                                                                │\n│     'to_xml'                                                                                                    │\n│ ]                                                                                                               │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\nq = \"normal\"\n\n\nnp.random.normal\n\n<function RandomState.normal>\n\n\n\nfrom rich import inspect\n\ninspect(eval(f\"np.random.{q}\"), methods=True, all=True)\n\n╭─────────────── <built-in method normal of numpy.random.mtrand.RandomState object at 0x10c627840> ───────────────╮\n│ def RandomState.normal(...)                                                                                     │\n│                                                                                                                 │\n│ normal(loc=0.0, scale=1.0, size=None)                                                                           │\n│                                                                                                                 │\n│            __doc__ = '\\n        normal(loc=0.0, scale=1.0, size=None)\\n\\n        Draw random samples from a     │\n│                      normal (Gaussian) distribution.\\n\\n        The probability density function of the normal  │\n│                      distribution, first\\n        derived by De Moivre and 200 years later by both Gauss and    │\n│                      Laplace\\n        independently [2]_, is often called the bell curve because of\\n           │\n│                      its characteristic shape (see the example below).\\n\\n        The normal distributions      │\n│                      occurs often in nature.  For example, it\\n        describes the commonly occurring         │\n│                      distribution of samples influenced\\n        by a large number of tiny, random              │\n│                      disturbances, each with its own\\n        unique distribution [2]_.\\n\\n        .. note::\\n  │\n│                      New code should use the ``normal`` method of a ``default_rng()``\\n            instance     │\n│                      instead; please see the :ref:`random-quick-start`.\\n\\n        Parameters\\n                 │\n│                      ----------\\n        loc : float or array_like of floats\\n            Mean (\"centre\") of    │\n│                      the distribution.\\n        scale : float or array_like of floats\\n            Standard     │\n│                      deviation (spread or \"width\") of the distribution. Must be\\n            non-negative.\\n    │\n│                      size : int or tuple of ints, optional\\n            Output shape.  If the given shape is,   │\n│                      e.g., ``(m, n, k)``, then\\n            ``m * n * k`` samples are drawn.  If size is        │\n│                      ``None`` (default),\\n            a single value is returned if ``loc`` and ``scale`` are   │\n│                      both scalars.\\n            Otherwise, ``np.broadcast(loc, scale).size`` samples are        │\n│                      drawn.\\n\\n        Returns\\n        -------\\n        out : ndarray or scalar\\n              │\n│                      Drawn samples from the parameterized normal distribution.\\n\\n        See Also\\n            │\n│                      --------\\n        scipy.stats.norm : probability density function, distribution or\\n       │\n│                      cumulative density function, etc.\\n        random.Generator.normal: which should be used   │\n│                      for new code.\\n\\n        Notes\\n        -----\\n        The probability density for the     │\n│                      Gaussian distribution is\\n\\n        .. math:: p(x) = \\\\frac{1}{\\\\sqrt{ 2 \\\\pi \\\\sigma^2    │\n│                      }}\\n                         e^{ - \\\\frac{ (x - \\\\mu)^2 } {2 \\\\sigma^2} },\\n\\n             │\n│                      where :math:`\\\\mu` is the mean and :math:`\\\\sigma` the standard\\n        deviation. The    │\n│                      square of the standard deviation, :math:`\\\\sigma^2`,\\n        is called the variance.\\n\\n  │\n│                      The function has its peak at the mean, and its \"spread\" increases with\\n        the        │\n│                      standard deviation (the function reaches 0.607 times its maximum at\\n        :math:`x +    │\n│                      \\\\sigma` and :math:`x - \\\\sigma` [2]_).  This implies that\\n        normal is more likely  │\n│                      to return samples lying close to the mean, rather\\n        than those far away.\\n\\n        │\n│                      References\\n        ----------\\n        .. [1] Wikipedia, \"Normal distribution\",\\n         │\n│                      https://en.wikipedia.org/wiki/Normal_distribution\\n        .. [2] P. R. Peebles Jr.,       │\n│                      \"Central Limit Theorem\" in \"Probability,\\n               Random Variables and Random       │\n│                      Signal Principles\", 4th ed., 2001,\\n               pp. 51, 51, 125.\\n\\n        Examples\\n  │\n│                      --------\\n        Draw samples from the distribution:\\n\\n        >>> mu, sigma = 0, 0.1 #  │\n│                      mean and standard deviation\\n        >>> s = np.random.normal(mu, sigma, 1000)\\n\\n         │\n│                      Verify the mean and the variance:\\n\\n        >>> abs(mu - np.mean(s))\\n        0.0  # may  │\n│                      vary\\n\\n        >>> abs(sigma - np.std(s, ddof=1))\\n        0.1  # may vary\\n\\n            │\n│                      Display the histogram of the samples, along with\\n        the probability density          │\n│                      function:\\n\\n        >>> import matplotlib.pyplot as plt\\n        >>> count, bins, ignored │\n│                      = plt.hist(s, 30, density=True)\\n        >>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) │\n│                      *\\n        ...                np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\\n        ...    │\n│                      linewidth=2, color=\\'r\\')\\n        >>> plt.show()\\n\\n        Two-by-four array of samples  │\n│                      from N(3, 6.25):\\n\\n        >>> np.random.normal(3, 2.5, size=(2, 4))\\n                    │\n│                      array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\\n               [  │\n│                      0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random\\n\\n        '                │\n│         __module__ = None                                                                                       │\n│           __name__ = 'normal'                                                                                   │\n│       __qualname__ = 'RandomState.normal'                                                                       │\n│           __self__ = RandomState(MT19937) at 0x10C627840                                                        │\n│ __text_signature__ = None                                                                                       │\n│           __call__ = def __call__(*args, **kwargs): Call self as a function.                                    │\n│          __class__ = class __class__():                                                                         │\n│        __delattr__ = def __delattr__(name, /): Implement delattr(self, name).                                   │\n│            __dir__ = def __dir__(): Default dir() implementation.                                               │\n│             __eq__ = def __eq__(value, /): Return self==value.                                                  │\n│         __format__ = def __format__(format_spec, /): Default object formatter.                                  │\n│             __ge__ = def __ge__(value, /): Return self>=value.                                                  │\n│   __getattribute__ = def __getattribute__(name, /): Return getattr(self, name).                                 │\n│             __gt__ = def __gt__(value, /): Return self>value.                                                   │\n│           __hash__ = def __hash__(): Return hash(self).                                                         │\n│           __init__ = def __init__(*args, **kwargs): Initialize self.  See help(type(self)) for accurate         │\n│                      signature.                                                                                 │\n│  __init_subclass__ = def __init_subclass__(...) This method is called when a class is subclassed.               │\n│             __le__ = def __le__(value, /): Return self<=value.                                                  │\n│             __lt__ = def __lt__(value, /): Return self<value.                                                   │\n│             __ne__ = def __ne__(value, /): Return self!=value.                                                  │\n│            __new__ = def __new__(*args, **kwargs): Create and return a new object.  See help(type) for accurate │\n│                      signature.                                                                                 │\n│         __reduce__ = def __reduce__(...) Helper for pickle.                                                     │\n│      __reduce_ex__ = def __reduce_ex__(protocol, /): Helper for pickle.                                         │\n│           __repr__ = def __repr__(): Return repr(self).                                                         │\n│        __setattr__ = def __setattr__(name, value, /): Implement setattr(self, name, value).                     │\n│         __sizeof__ = def __sizeof__(): Size of object in memory, in bytes.                                      │\n│            __str__ = def __str__(): Return str(self).                                                           │\n│   __subclasshook__ = def __subclasshook__(...) Abstract classes can override this to customize issubclass().    │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\ninspect(inspect)\n\n╭─────────────────────────────────────── <function inspect at 0x10f3fc550> ───────────────────────────────────────╮\n│ def inspect(obj: Any, *, console: Optional[ForwardRef('Console')] = None, title: Optional[str] = None, help:    │\n│ bool = False, methods: bool = False, docs: bool = True, private: bool = False, dunder: bool = False, sort: bool │\n│ = True, all: bool = False, value: bool = True) -> None:                                                         │\n│                                                                                                                 │\n│ Inspect any Python object.                                                                                      │\n│                                                                                                                 │\n│ * inspect(<OBJECT>) to see summarized info.                                                                     │\n│ * inspect(<OBJECT>, methods=True) to see methods.                                                               │\n│ * inspect(<OBJECT>, help=True) to see full (non-abbreviated) help.                                              │\n│ * inspect(<OBJECT>, private=True) to see private attributes (single underscore).                                │\n│ * inspect(<OBJECT>, dunder=True) to see attributes beginning with double underscore.                            │\n│ * inspect(<OBJECT>, all=True) to see all attributes.                                                            │\n│                                                                                                                 │\n│ Args:                                                                                                           │\n│     obj (Any): An object to inspect.                                                                            │\n│     title (str, optional): Title to display over inspect result, or None use type. Defaults to None.            │\n│     help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.             │\n│     methods (bool, optional): Enable inspection of callables. Defaults to False.                                │\n│     docs (bool, optional): Also render doc strings. Defaults to True.                                           │\n│     private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.           │\n│     dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.                │\n│     sort (bool, optional): Sort attributes alphabetically. Defaults to True.                                    │\n│     all (bool, optional): Show all attributes. Defaults to False.                                               │\n│     value (bool, optional): Pretty print value. Defaults to True.                                               │\n│                                                                                                                 │\n│ 35 attribute(s) not shown. Run inspect(inspect) for options.                                                    │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass InventoryItem:\n    \"\"\"Class for keeping track of an item in inventory.\"\"\"\n\n    name: str\n    unit_price: float\n    quantity_on_hand: int = 0\n\n\nc = InventoryItem(\"A\", 20)\n\n\nc\n\nInventoryItem(name='A', unit_price=20, quantity_on_hand=0)\n\n\n\nclass InventoryItemOld:\n    def __init__(self, name: str, unit_price: float, \n                 quantity_on_hand: int = 0):\n        self.name = name\n        self.unit_price = unit_price\n        self.quantity_on_hand = quantity_on_hand\n\n\nd = InventoryItemOld(\"A\", 2)\nd\n\n<__main__.InventoryItemOld at 0x166340430>\n\n\n\ndef greeting(name: str) -> str:\n    return 'Hello ' + name\n\n\ngreeting(\"Abc\")\n\n'Hello Abc'\n\n\n\ngreeting(10)\n\nTypeError: can only concatenate str (not \"int\") to str"
  },
  {
    "objectID": "notebooks/posts/condition-inverse.html",
    "href": "notebooks/posts/condition-inverse.html",
    "title": "Conditioning and Linear Regression",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\n# Showing that np.linalg.solve is better conditioned than np.linalg.inv for linear regression normal equations\n\n# Generate data\nn = 100\np = 10\nX = np.random.randn(n, p)\ntheta = np.random.randn(p)\ny = X @ theta + np.random.randn(n)\n\n# Solve normal equations\ntheta_hat = np.linalg.solve(X.T @ X, X.T @ y)\ntheta_hat_inv = np.linalg.inv(X.T @ X) @ X.T @ y\n\n# Compare the condition numbers\nprint(np.linalg.cond(X.T @ X))\nprint(np.linalg.cond(np.linalg.inv(X.T @ X)))\n\n# Plot the difference between the two solutions\nplt.plot(theta_hat - theta_hat_inv)\nplt.title('Difference between solutions')\nplt.xlabel('Index')\nplt.ylabel('Difference')\nplt.show()\n\n\n2.980877596192165\n2.980877596192165"
  },
  {
    "objectID": "notebooks/index.html",
    "href": "notebooks/index.html",
    "title": "Notebook",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 1, 2023\n\n\nAutoDiff in JAX and PyTorch\n\n\nNipun Batra\n\n\n\n\nFeb 28, 2023\n\n\nLogistic Regression\n\n\nNipun Batra\n\n\n\n\nFeb 28, 2023\n\n\nNeural Network\n\n\nNipun Batra\n\n\n\n\nFeb 16, 2023\n\n\nGradient Descent\n\n\nNipun Batra\n\n\n\n\nFeb 14, 2023\n\n\nTaylor Series\n\n\nNipun Batra\n\n\n\n\nFeb 10, 2023\n\n\nConditioning and Linear Regression\n\n\nNipun Batra\n\n\n\n\nJan 31, 2023\n\n\nCNN\n\n\nNipun Batra\n\n\n\n\nJan 31, 2023\n\n\nLinear Regression: Geometric Perspective\n\n\nNipun Batra\n\n\n\n\nJan 31, 2023\n\n\nMaths and JAX: Low Rank\n\n\nNipun Batra\n\n\n\n\nJan 31, 2023\n\n\nGenerating names using MLPs\n\n\nNipun Batra\n\n\n\n\nJan 31, 2023\n\n\nMaths and JAX\n\n\nNipun Batra\n\n\n\n\nJan 17, 2023\n\n\nDataset splitting for machine learning\n\n\nNipun Batra\n\n\n\n\nJan 17, 2023\n\n\nGrid Search\n\n\nNipun Batra\n\n\n\n\nJan 17, 2023\n\n\nSome Python Utilities\n\n\nNipun Batra\n\n\n\n\nJan 12, 2023\n\n\nDT Regression\n\n\nNipun Batra\n\n\n\n\nJan 12, 2023\n\n\nPandas tips\n\n\nNipun Batra\n\n\n\n\nJan 10, 2023\n\n\nMisc tips\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "grading.html",
    "href": "grading.html",
    "title": "Grading Policy",
    "section": "",
    "text": "Quizzes: 60%\n\n10% each\nBest 6 out of 8\n\n\n\n\nAssignments: 40%\n\nVariable weight (e.g. some assignments would be 5%, some 10%, etc.)\nSome assignments would involve:\n\nMaking pull requests to public repositories\nWriting Hugging Face Spaces like demos\n\n\n\n\n\nBonus: up to 6%\n\nMaking a non-trivial pull request to a well-starred public repo (4%)\nGetting the PR accepted (2%)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ES 654 Machine Learning",
    "section": "",
    "text": "Summary\n\nInstructor: Nipun Batra (nipun.batra@iitgn.ac.in)\nTeaching Assistants: Zeel B Patel, Shriraj Sawant, Shrutimoy, Sarth Dubey, Hitarth Gandhi, Saagar Parikh, Eshan Gujarathi, Gautam Vashishta, Aadesh Desai\nCourse Timings: Tuesday, Thursday 330-450 PM IST in 1/101\nSlack Invite\n\n\n\nPre-requisites:\n\nGood experience in Python programming\nProbability\nLinear Algebra\n\nCourse preparation: Students are encouraged to study some of the following to refresh their understanding of some of the prerequisities before the course formally begins.\n\nFirst four chapters of the Python Data Science handbook\nSome material on Linear Algebra\nKhan academy course on Stats and Probability\n\n\n\nReference textbooks:\n\nGareth James, Daniela Witten, Trevor Hastie and Robert Tibshirani. An Introduction to Statistical Learning with Applications in R\nChristopher Bishop. Pattern Recognition and Machine Learning. Springer, 2006.[Freely available online]\nFriedman J, Hastie T, Tibshirani R. The elements of statistical learning. New York, NY, USA:: Springer series in statistics; 2001.[Freely available online]\nDuda RO, Hart PE, Stork DG. Pattern classification. John Wiley & Sons; 2012 Nov 9.\nMitchell TM. Machine learning. 1997. Burr Ridge, IL: McGraw Hill. 1997;45(37):870-7.\nMurphy, K. Machine Learning: A Probabilistic Perspective. MIT Press\nGoodfellow I, Bengio Y, Courville A, Bengio Y. Deep learning. Cambridge: MIT press; 2016 Nov 18.[Freely available online]\n\n\n\nSome other ML courses\n\nNPTEL course by Balaram Ravindran\nCMU course by Tom Mitchell and Maria-Florina Balcan\nCoursera ML course by Andrew Ng\nFAST.ai course on ML\nPractical deep learning for coders by FAST.ai\nCourse by Alex Ihler, UCI"
  },
  {
    "objectID": "exams/assignment-5.html",
    "href": "exams/assignment-5.html",
    "title": "Assignment 5",
    "section": "",
    "text": "General instructions\n\nFeel free to use any framework of your choice: PyTorch, JAX (+Flax/Equinox), Tensorflow (+Keras)\nWe are not providing any code template. However, it is recommended you adhere to high code quality standards.\nFeel free to make use of ChatGPT, CoPilot, etc. like tools. Cite where you used them. However, you should still be able to explain your code during the viva. Also, you need to be careful with the hallucinations of these tools!\nAs before, this assignment is in a group of two students. You do not need to submit the assignment but can show your private repo to the TA during the viva.\n\n\n\nIn this question, you have to compare the performance on a binary classification task of the following models:\n\nVGG (1 block)\nVGG (3 blocks)\nVGG (3 blocks) with data augmentation\nTransfer learning using VGG16 or VGG19\n\nRefer this article You do not need to write your own code. You can reuse the code from the post. Or, you could roll out your own implemenation. Either way, you should be able to explain your code during the viva.\nYou need to create the dataset on your own based on your first names. For instance if the first name of the team members are: Siya and Raghav, they can choose a dataset of their liking based on any names, place, animal or thing. As examples:\n\nSeoul v/s Riyadh\nSnake v/s Rat\nSquirrel v/s Rabbit\nSambhar v/s Roti\n\nYou can refer to resource 1 or resource 2 or plainly download 100 images of both classes (total 200 images). Of these 100 images of each class, we will use 80 for training and 20 for testing. You get 1 mark for dataset creation [1 mark]\nCreate a table with models as rows and the following columns [2 marks (0.5 marks for each model)]\n\nTraining time\nTraining loss\nTraining accuracy\nTesting accuracy\nNumber of model parameters\n\nWe will now be using Tensorboard for visualizing network performance. You are suggested to refer to:\n\nPyTorch + Tensorboard\nTensorflow + Tensorboard\n\nUse Tensorboard to log the following and present screenshots/images [1 mark]\nScalars\n\nTraining loss v/s iterations (and not epochs)\nTraining accuracy v/s iterations (and not epochs)\nTesting accuracy v/s iterations (and not epochs)\n\nImages\n\nShow all images from the test set and their predictions\n\nNow you have to present various insights. For instance, you should discuss the following: [2 marks (0.5 marks for each question)]\n\nAre the results as expected? Why or why not?\nDoes data augmentation help? Why or why not?\nDoes it matter how many epochs you fine tune the model? Why or why not?\nAre there any particular images that the model is confused about? Why or why not?\n\nNow, create a MLP model with comparable number of parameters as VGG16 and compare your performance with the other models in the table. You can choose the distribution of number of neurons and number of layers. What can you conclude? [1 mark]"
  },
  {
    "objectID": "exams/q4.html",
    "href": "exams/q4.html",
    "title": "Quiz 4 (25 March)",
    "section": "",
    "text": "Total Time: 1 hour 15 mins AND Total Marks: 10\n\n\n\nConsider the figure above, where we fit the model \\(p(y=1 \\mid \\mathbf{x}, \\bm{{\\theta}})=\\sigma\\left(\\theta_0+\\theta_1 x_1+\\theta_2 x_2\\right)\\) by maximum likelihood, i.e., we minimize \\(J_a({\\theta})=-\\ell\\left(\\bm{{\\theta}}, \\mathcal{D}_{\\text {train }}\\right)\\) where \\(\\ell\\left(\\bm{{\\theta}}, \\mathcal{D}_{\\text {train }}\\right)\\) is the log likelihood on the training set. In the questions below, when multiple decision boundaries are possible, you should choose the one which minimizes the number of classification errors on the training dataset.\n\n\nSketch a decision boundary for the model. How many classification errors does your method make? (1 mark)\n\n\nNow, we regularize only the \\(\\theta_0\\) parameter, i.e., we minimize: \\(J_b({\\theta})=-\\ell\\left(\\bm{{\\theta}}, \\mathcal{D}_{\\text {train }}\\right)+\\lambda \\theta_0^2\\). Suppose \\(\\lambda\\) is a very large number, so we regularize \\(\\theta_0\\) all the way to 0, but all other parameters are unregularized. Sketch a possible decision boundary. How many classification errors does your method make? (1 mark)\n\n\nRepeat part (b), but we now instead regularize the \\(\\theta_1\\) parameter. (1 mark)\n\n\nRepeat part (b), but we now instead regularize the \\(\\theta_2\\) parameter. (1 mark)\n\n\nProve that softmax is equivalent to sigmoid when there are only two classes. (1 mark)\n\\(y = \\sigma(z)\\), where \\(\\sigma\\) is the sigmoid function. We also know that \\(z = f(a)\\). Find \\(\\dfrac{\\partial y}{\\partial a}\\). (1 mark)\nLet us consider a \\(K\\)-class logistic regression problem. For some example, \\(x\\), we get our outputs before the application of softmax as: \\(z_1=x^T\\theta_1\\), \\(\\cdots , z_k=x^T\\theta_k\\), \\(\\cdots ,z_K=x^T\\theta_K\\). We denote the vector of outputs as \\(\\vec{z} = \\left[\\begin{array}{@{}c@{}}  z_{1} \\\\  z_{2} \\\\  \\vdots \\\\  z_{K}  \\end{array} \\right]\\)\n\nWe will try to now use the cross entropy loss function to train our model. One of the terms in the cross entropy loss function is: \\(\\log\\left(\\frac{e^{z_k}}{\\sum_{j=1}^K e^{z_j}}\\right)\\) which we refer to as \\(\\mathrm{LOGSOFTMAX}(z_k, \\vec{z})\\). However, we find that \\(\\mathrm{LOGSOFTMAX}(z_k, \\vec{z})\\) cannot be computed directly for several cases. When \\(z_k\\) is a large number (e.g. 5000), a computer is unable to compute \\(e^{z_k}\\) as an overflow occurs (\\(e^{z_k}\\) = inf). When \\(z_k\\) is a large negative number (e.g. -5000), \\(e^{z_k}\\) = 0.0.\n\n\nWhat problem occurs in computing \\(\\mathrm{LOGSOFTMAX}(z_k, \\vec{z})\\) when all elements of \\(\\vec{z}\\) are large (in magnitude) negative numbers (e.g. all \\(z_i < -6000\\))? (1 mark)\n\n\nModify the \\(\\mathrm{LOGSOFTMAX}(z_k, \\vec{z})\\) expression using some trick so that we are able to compute it for any \\(z_k\\) and \\(\\vec{z}\\). You need to show the steps/simplifications you make. Show that this trick solves both the above problems (overflow and the problem you find in part (a) of this question) (2 marks)\n\n\n\nWe use a new type of coin for coin toss experiments. For this coin, the probability of heads goes down exponentially with the draw. Assuming the probaility of heads for the first draw (\\(i=1\\)) is \\(\\theta\\) and for the \\(i\\)th draw is \\(\\theta_i = \\dfrac{\\theta}{2^{i-1}}\\). What is the maximum likelihood estimate for \\(\\theta\\) for obtaining the draws as: T, H, H. Assume that each draw is independent of the others. Ofcourse, the identical assumption can not be made. (1 mark)"
  },
  {
    "objectID": "exams/q3.html",
    "href": "exams/q3.html",
    "title": "Quiz 3 (27 Feb)",
    "section": "",
    "text": "Total Time: 1 hour 15 mins AND Total Marks: 10\n\n\nMany evaluation metrics decompose over the training examples. For example, the loss function for linear regression (proportional to mean squared error) is given as: \\[L(\\theta) = \\frac{1}{2N}\\sum_{i=1}^N (y_i - \\sum_{d=1}^D \\theta_d x_i^d)^2\\] where \\(N\\) is the number of training examples, \\(x_i\\) is the \\(i^{th}\\) training example and \\(y_i\\) is the corresponding label. Mention any evaluation metric/loss function in machine learning that does not decompose over the training examples. [1 mark]\nWe saw the figure showing SGD convergence. \n\n\n2A) Prove that SGD is an unbiased estimator. [1 mark]\n2B) It seems that the SGD algorithm is not converging to the global minimum. Why do you think this is the case? [1 mark]\n2C). Why is it generally a good idea to use a small learning rate for SGD? [1 mark]\n2D) It seems that while the SGD algorithm is not converging, but it seems to be very quickly moving close to the global minimum. Why is SGD good initially when the loss is high? To help you answer this question, we pose a series of questions. Consider a simplification of linear regression. Our data is 1d. Our model is \\(y=\\theta x\\). Consider a dataset of \\(N\\) examples. Obtain the closed form solution for \\(\\theta\\) in terms of the scalars \\(x_i\\) and \\(y_i\\) for \\(i=1, \\cdots, N\\). [1 marks]\n2E) Consider \\(N=3\\) and a datset of the form \\(x_1=1, x_2=2, x_3=3, y_1=1, y_2=2.2, y_3=2.8\\). Plot the approximate contour plot of the loss function \\(L(\\theta)\\) for \\(\\theta \\in [-1, 3]\\). [1 marks].\n2F) Plot the loss v/s parameters (\\(\\theta\\)) corresponding to the loss for each training input. [1 marks]\n2G) Now, answer why SGD works initially, when the loss is high. [1 marks]\n\n\nIn an above question, we proved that the SGD estimator is an unbiased estimator. We have also previously discussed that we typically have a bias-variance tradeoff in our models. In the recent assignment question, we have plotted the bias and variance for different complexity trees. In this question, you have to derive the mean squared error in terms of three terms: bias, variance and irreducible noise.\n\n\nLet us assume our data is generated from a `true’ function \\(f(x)\\) and we have some additional zero mean normally distributed noise \\(\\epsilon \\sim \\mathcal{N}(0, \\sigma^2)\\).\n\\[y = f(x) + \\epsilon\\]\nWe can use some model such as a decision tree or linear regression to approximate \\(f(x)\\). We now consider a single training example \\((x_0, y_0)\\). We can define the mean squared error as:\n\\[MSE = \\mathbb{E}[(y_0 - \\hat{f}(x_0)^2)]\\]\nwhere \\(y\\) is the true label and \\(\\hat{f}(x_0)\\) is the predicted label. The expectation is over all possible training sets that could have been generated.\nTo keep the notation simple, we refer \\(f(x_0)\\) as \\(f\\) and \\(\\hat{f}(x_0)\\) as \\(\\hat{f}\\). Thus, we can write \\[MSE = \\mathbb{E}[(f - \\hat{f})^2]\\] We also define the bias as the difference between the true function and the predicted function, evaluated at the training example: \\[bias = \\mathbb{E}[\\hat{f}] - f\\] or, \\[bias = \\overline{f} - f\\] where \\(\\overline{f}\\) is the average/expectation of the predicted function over all possible training sets.\nWe define the variance as: \\[variance = VAR(\\hat{f})\\] or,\n\\[variance = \\mathbb{E}[(\\hat{f} - \\overline{f})^2]\\]\nWe define irreducible noise as the variance of the noise term \\(\\epsilon\\):\n\\[irreducible = VAR(\\epsilon)\\] or,\n\\[irreducible = \\sigma^2\\]\nUsing the above definitions, show that the mean squared error can be written as:\n\\[MSE = bias^2 + variance + irreducible\\]\n[2 marks]"
  },
  {
    "objectID": "exams/q1.html",
    "href": "exams/q1.html",
    "title": "Quiz 1 (18 Jan)",
    "section": "",
    "text": "Instructions\n\nTotal Time: 30 mins\n\n\n\nRemember the entropy discussion we had in the lecture. We saw that for the Tennis example, the maximum entropy is 1.0. What is the maximum entropy an Imagenet classification problem, where we have 1024 classes? [1 mark]\nGiven the following dataset, what attribute/feature would the decision tree algorithm choose to split the data on for the first iteration? Why? [1 mark]\n\n\n\n\n\n\n\n\n\n\n\nSample #\nTomato radius\nTomato weight\nTomato color\nTomato quality\n\n\n\n\n1\n1\n1\n1\nGood\n\n\n2\n1\n1\n2\nGood\n\n\n3\n1\n2\n1\nBad\n\n\n4\n1\n2\n2\nBad\n\n\n5\n2\n1\n1\nGood\n\n\n6\n2\n2\n2\nGood\n\n\n\n\nIn the lectures we saw that np.std(x) and pd.Series(x).std() are different. Why? [1 mark]\nQuoting Wikipedia:\n\n\nPruning is a data compression technique in machine learning and search algorithms that reduces the size of decision trees by removing sections of the tree that are non-critical and redundant to classify instances. Pruning reduces the complexity of the final classifier, and hence improves predictive accuracy by the reduction of overfitting.\n\n\nPre-pruning procedures prevent a complete induction of the training set by replacing a stop () criterion in the induction algorithm (e.g. max. Tree depth or information gain (Attr)> minGain). Pre-pruning methods are do not induce an entire set, but rather trees remain small from the start.\n\nCreate a decision tree for the following classification problem. Explain why the pre-pruning using information gain approach can be limiting? [2 marks]\n\n\n\n\\(x_1\\)\n\\(x_2\\)\n\\(y\\)\n\n\n\n\n0\n0\n0\n\n\n0\n1\n1\n\n\n1\n0\n1\n\n\n1\n1\n0\n\n\n\n\nVisualize the decision tree for the following regression problem, where the ground truth is the function \\(y = x + 2\\). Use \\(x = \\{1, 2, \\cdots 4\\}\\) as the training dataset. Also visualize the learnt function [2 marks]\nCreate an example ground truth and prediction where the mean absolute error is 100 and mean error is 0. [0.5 marks]\nCreate one confusion matrix for 100 total examples where the precision is 0.8, recall is 0.5. [1 mark]\nShow visualisation of 1d regression problem for continuous inputs showing a good fit, a high bias and a high variance fit. [1.5 mark]"
  },
  {
    "objectID": "exams/prereq.html",
    "href": "exams/prereq.html",
    "title": "Prerequsite test",
    "section": "",
    "text": "Instructions\n\nThis test is open book, open internet, open notes. You can use any resources you want to solve the problems.\nYou should be typing your answers in a Jupyter notebook.\nThe submission would be a link to a public GitHub repository containing the notebook. Fill this form to submit your solution.\nA random subset of students may have a viva post the exam. The viva would be based on the notebook and the solutions you have provided.\nThe test is open till 6th January 2022 9 PM. You can submit your solutions anytime before that.\nThis problem has to be solved individually. You cannot collaborate with anyone else.\nThe code should be written using Python.\nSome questions may require you to answer in text. You can use markdown cells to write your answers. Some questions may require you to write code. You can use code cells to write your code. Some questions may require you to write mathematical expressions. You can use LaTeX to write your expressions. You can write such LaTeX expressions in markdown cells.\nFor any other questions, please ask on the General channel on Slack.\n\n\n\n\nQuestions\n\nHow many multiplications and additions do you need to perform a matrix multiplication between a (n, k) and (k, m) matrix? Explain.\nWrite Python code to multiply the above two matrices. Solve using list of lists and then use numpy. Compare the timing of both solutions. Which one is faster? Why?\nFinding the highest element in a list requires one pass of the array. Finding the second highest element requires 2 passes of the the array. Using this method, what is the time complexity of finding the median of the array? Can you suggest a better method? Can you implement both these methods in Python and compare against numpy.median routine in terms of time?\nWhat is the gradient of the following function with respect to x and y? \\[\nx^2y+y^3\\sin(x)\n\\]\nUse JAX to confirm the gradient evaluated by your method matches the analytical solution corresponding to a few random values of x and y\nUse sympy to confirm that you obtain the same gradient analytically.\nCreate a Python nested dictionary to represent hierarchical information. We want to store record of students and their marks. Something like:\n\n2022\n\nBranch 1\n\nRoll Number: 1, Name: N, Marks:\n\nMaths: 100, English: 70 …\n\n\nBranch 2\n\n2023\n\nBranch 1\nBranch 2\n\n2024\n\nBranch 1\nBranch 2\n\n2025\n\nBranch 1\nBranch 2\n\n\nStore the same information using Python classes. We have an overall database which is a list of year objects. Each year contains a list of branches. Each branch contains a list of students. Each student has some properties like name, roll number and has marks in some subjects.\nUsing matplotlib plot the following functions on the domain: x = 0.5 to 100.0 in steps of 0.5.\n\n\\(y = x\\)\n\\(y = x^2\\)\n\\(y = \\frac{x^3}{100}\\)\n\\(y = \\sin(x)\\)\n\\(y = \\frac{\\sin(x)}{x}\\)\n\\(y = \\log(x)\\)\n\\(y = e^x\\)\n\nUsing numpy generate a matrix of size 20X5 containing random numbers drawn uniformly from the range of 1 to 2. Using Pandas create a dataframe out of this matrix. Name the columns of the dataframe as “a”, “b”, “c”, “d”, “e”. Find the column with the highest standard deviation. Find the row with the lowest mean.\nAdd a new column to the dataframe called “f” which is the sum of the columns “a”, “b”, “c”, “d”, “e”. Create another column called “g”. The value in the column “g” should be “LT8” if the value in the column “f” is less than 8 and “GT8” otherwise. Find the number of rows in the dataframe where the value in the column “g” is “LT8”. Find the standard deviation of the column “f” for the rows where the value in the column “g” is “LT8” and “GT8” respectively.\nWrite a small piece of code to explain broadcasting in numpy.\nWrite a function to compute the argmin of a numpy array. The function should take a numpy array as input and return the index of the minimum element. You can use the np.argmin function to verify your solution."
  },
  {
    "objectID": "exams/q2.html",
    "href": "exams/q2.html",
    "title": "Quiz 2 (8 Feb)",
    "section": "",
    "text": "Total Time: 1 hour 15 mins AND Total Marks: 10\n\n\nIn bootstrap sampling, we sample with replacement from the original dataset. Let us assume that the original dataset of size \\(N\\) has all distinct elements. As an example if \\(N=8\\), we may have the dataset as \\(\\{1, 2,3, 4, 5, 6, 7, 8\\}\\). A bootstrap sample (or round) is also of size \\(N\\) and can contain some elements more than once. For example, a bootstrap sample may be \\(\\{8, 8, 3, 4, 5, 1, 8, 5\\}\\). The unique elements in this sample are: \\(\\{1, 3, 4, 5, 8\\}\\). This sample has 5 unique elements. Show that on average the number of unique elements in a bootstrap sample is \\(63.2\\%\\) of \\(N\\). [1.5 marks]\nWe studied the ADABoost classification algorithm for binary classification. We wrote the final prediction as: \\(\\mathrm{SIGN}(\\sum{\\alpha_i}h_i(x))\\) where \\(\\alpha_i\\) is the weight of the classifier \\(h_i\\) and \\(h_i(x)\\) is the prediction of the classifier \\(h_i\\) on the input \\(x\\). We also noted that each prediction \\(h_i(x)\\) is either \\(+1\\) or \\(-1\\).\nExtend ADABoost to multi-class classification where we have \\(K\\) classes and each classifier predicts one of the \\(K\\) classes (a number from \\(\\{1 \\cdots K\\}\\)). As an example, if we have \\(m=4\\) members in the ensemble, we may have something like \\(h_1(x) = 1\\), \\(h_2(x) = 2\\), \\(h_3(x) = 3\\) and \\(h_4(x) = 2\\). Now, write the formula for prediction for multi-class classification using the ensemble of classifiers, i.e. for any input \\(x\\), which class amongst \\(\\{1 \\cdots K\\}\\)) will be predicted as a function of \\(\\alpha_i\\)s and \\(h_i(x)\\)? Note: do not use the concept of one-vs-one or one-vs-all here. [2 marks]\nWhich hyperparameter can you vary to control the bias-variance tradeoff (or complexity) for decision trees? Draw the bias variance tradeoff curve for decision trees using this hyperparameter. Explain your answer. [1.5 mark]\nThe normal equation for linear regression is given as: \\(\\hat{\\theta} = (X^TX)^{-1}X^Ty\\). Instead of computing the normal equation directly, let us use the SVD decomposition of X. We decompose X as \\(X = U\\Sigma V^T\\).\n\n\nRewrite the normal equation using the reduced SVD decomposition of X, that is write \\(\\hat{\\theta}\\) in terms of \\(U\\), \\(\\Sigma\\) and \\(V\\) and \\(y\\).\n\n\nFor this question, let us assume that \\(X\\) is of size \\(n \\times m\\) and \\(y\\) is of size \\(n \\times 1\\). Let us also assume that the number of features \\(m\\) is significantly less than the number of samples \\(n\\).\n\n\nOnce you have written \\(\\hat{\\theta}\\) in terms of \\(U\\), \\(\\Sigma\\) and \\(V\\) and \\(y\\), find the time complexity of computing \\(\\hat{\\theta}\\) using the reduced form of SVD decomposition of \\(X\\). [4 marks]\n\n\nWe provide some background on the SVD decomposition of a matrix \\(X\\) below: The reduced form of SVD decomposition of \\(X\\) is given as \\(X = U\\Sigma V^T\\) where \\(U\\) is of size \\(n \\times m\\), \\(\\Sigma\\) is of size \\(m \\times m\\) and \\(V\\) is of size \\(m \\times m\\). The columns of \\(U\\) are called the left singular vectors of \\(X\\) and the columns of \\(V\\) are called the right singular vectors of \\(X\\). The singular matrix \\(\\Sigma\\) is a diagonal matrix: it has zeros everywhere except on the diagonal. The diagonal elements of \\(\\Sigma\\) are the singular values of \\(X\\). The singular values of \\(X\\) are always non-negative and are arranged in decreasing order. The singular values of \\(X\\) are also called the eigenvalues of \\(X^TX\\).\n\n\nFurther, for reduced SVD, \\(U^TU = I\\) and \\(V^TV = I\\) and \\(VV^T = I\\) where \\(I\\) is the identity matrix.\n\n\nWe also provide some background on the time complexity of matrix multiplication below: Let \\(A\\) be of size \\(n \\times m\\), \\(B\\) be of size \\(m \\times p\\) and \\(C\\) be of size \\(n \\times p\\). The time complexity of computing \\(C = AB\\) is \\(O(nmp)\\). Further, the time complexity of inverse of a \\(n \\times n\\) matrix \\(A\\) is \\(O(n^3)\\). The time complexity of computing SVD of the above \\(n \\times m\\) matrix \\(X\\) is \\(O(nm^2)\\). You should factor this time complexity in your answer for computing \\(\\hat{\\theta}\\).\n\n\nBONUS: Solve the above problem (computing \\(\\hat{\\theta}\\) and its time complexity) with the full version of SVD, what changes will you need to make? The full version of SVD is given as \\(X = U\\Sigma V^T\\) where \\(U\\) is of size \\(n \\times n\\), \\(\\Sigma\\) is of size \\(n \\times m\\) and \\(V\\) is of size \\(m \\times m\\). \\(U\\) and \\(V\\) are orthogonal matrices. [2 marks]\n\n\nLet us assume \\(K\\) members in an ensemble. For simplicity let us assume that each member in the ensemble has the same probability of error \\(p<0.5\\). We saw in the class that the probability of error (given by the binomial expansion) reduces as we increase the number of members in the ensemble. But, empirically adding more members in an ensemble may not always reduce the error. Why? [1 mark]"
  },
  {
    "objectID": "quizzes.html",
    "href": "quizzes.html",
    "title": "Quizzes",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJan 5, 2023\n\n\nPrerequsite test\n\n\n\n\n\n\nJan 18, 2023\n\n\nQuiz 1 (18 Jan)\n\n\n\n\n\n\nFeb 8, 2023\n\n\nQuiz 2 (8 Feb)\n\n\n\n\n\n\nFeb 27, 2023\n\n\nQuiz 3 (27 Feb)\n\n\n\n\n\n\nMar 25, 2023\n\n\nQuiz 4 (25 March)\n\n\n\n\n\n\nMar 26, 2023\n\n\nAssignment 5\n\n\n\n\n\n\n\n\nNo matching items"
  }
]